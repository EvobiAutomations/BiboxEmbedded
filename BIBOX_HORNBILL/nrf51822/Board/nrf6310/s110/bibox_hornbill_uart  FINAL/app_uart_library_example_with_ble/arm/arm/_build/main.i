#line 1 "..\\main.c"










 








 
 
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"

	
	
	

#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdbool.h"
 






 





#line 25 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdbool.h"



#line 31 "..\\main.c"
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
 
 





 









     
#line 27 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
     











#line 46 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"





 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     




typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;


     
typedef   signed     long long intmax_t;
typedef unsigned     long long uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     






     






     






     

     


     


     


     

     
#line 216 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     



     






     
    
 



#line 241 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     







     










     











#line 305 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"






 
#line 32 "..\\main.c"
#line 1 "..\\..\\..\\..\\Include\\nrf_delay.h"



#line 1 "..\\..\\..\\..\\Include\\nrf.h"




























 





 
#line 1 "..\\..\\..\\..\\Include\\nrf51.h"

 








































 





 



 









 

typedef enum {
 
  Reset_IRQn                    = -15,               
  NonMaskableInt_IRQn           = -14,               
  HardFault_IRQn                = -13,               
  SVCall_IRQn                   =  -5,               
  DebugMonitor_IRQn             =  -4,               
  PendSV_IRQn                   =  -2,               
  SysTick_IRQn                  =  -1,               
 
  POWER_CLOCK_IRQn              =   0,               
  RADIO_IRQn                    =   1,               
  UART0_IRQn                    =   2,               
  SPI0_TWI0_IRQn                =   3,               
  SPI1_TWI1_IRQn                =   4,               
  GPIOTE_IRQn                   =   6,               
  ADC_IRQn                      =   7,               
  TIMER0_IRQn                   =   8,               
  TIMER1_IRQn                   =   9,               
  TIMER2_IRQn                   =  10,               
  RTC0_IRQn                     =  11,               
  TEMP_IRQn                     =  12,               
  RNG_IRQn                      =  13,               
  ECB_IRQn                      =  14,               
  CCM_AAR_IRQn                  =  15,               
  WDT_IRQn                      =  16,               
  RTC1_IRQn                     =  17,               
  QDEC_IRQn                     =  18,               
  LPCOMP_IRQn                   =  19,               
  SWI0_IRQn                     =  20,               
  SWI1_IRQn                     =  21,               
  SWI2_IRQn                     =  22,               
  SWI3_IRQn                     =  23,               
  SWI4_IRQn                     =  24,               
  SWI5_IRQn                     =  25                
} IRQn_Type;




 


 
 
 

 




   

#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"
 




 

























 











#line 45 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"
















 




 


 

 













#line 118 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"



 







#line 160 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"

#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cmInstr.h"
 




 

























 












 



 

#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\cmsis_armcc.h"
 




 

























 










 



 

 
 






 
static __inline uint32_t __get_CONTROL(void)
{
  register uint32_t __regControl         __asm("control");
  return(__regControl);
}







 
static __inline void __set_CONTROL(uint32_t control)
{
  register uint32_t __regControl         __asm("control");
  __regControl = control;
}







 
static __inline uint32_t __get_IPSR(void)
{
  register uint32_t __regIPSR          __asm("ipsr");
  return(__regIPSR);
}







 
static __inline uint32_t __get_APSR(void)
{
  register uint32_t __regAPSR          __asm("apsr");
  return(__regAPSR);
}







 
static __inline uint32_t __get_xPSR(void)
{
  register uint32_t __regXPSR          __asm("xpsr");
  return(__regXPSR);
}







 
static __inline uint32_t __get_PSP(void)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  return(__regProcessStackPointer);
}







 
static __inline void __set_PSP(uint32_t topOfProcStack)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  __regProcessStackPointer = topOfProcStack;
}







 
static __inline uint32_t __get_MSP(void)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  return(__regMainStackPointer);
}







 
static __inline void __set_MSP(uint32_t topOfMainStack)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  __regMainStackPointer = topOfMainStack;
}







 
static __inline uint32_t __get_PRIMASK(void)
{
  register uint32_t __regPriMask         __asm("primask");
  return(__regPriMask);
}







 
static __inline void __set_PRIMASK(uint32_t priMask)
{
  register uint32_t __regPriMask         __asm("primask");
  __regPriMask = (priMask);
}


#line 279 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\cmsis_armcc.h"


#line 315 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\cmsis_armcc.h"



 


 



 



 
#line 337 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\cmsis_armcc.h"




 







 







 






 








 










 










 












 









 

__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
{
  rev16 r0, r0
  bx lr
}








 

__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
{
  revsh r0, r0
  bx lr
}










 










 









 



__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;
  int32_t s = 4   * 8 - 1; 

  result = value;                      
  for (value >>= 1U; value; value >>= 1U)
  {
    result <<= 1U;
    result |= value & 1U;
    s--;
  }
  result <<= s;                       
  return(result);
}









 



#line 702 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\cmsis_armcc.h"

   


 



 

#line 784 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\cmsis_armcc.h"
 


#line 53 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cmInstr.h"

#line 77 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cmInstr.h"

   

#line 162 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cmFunc.h"
 




 

























 












 



 

#line 53 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cmFunc.h"

#line 77 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cmFunc.h"

 

#line 163 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"
















 
#line 196 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"

 






 
#line 212 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"

 




 










 


 





 


 
typedef union
{
  struct
  {
    uint32_t _reserved0:28;               
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} APSR_Type;

 














 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       
    uint32_t _reserved0:23;               
  } b;                                    
  uint32_t w;                             
} IPSR_Type;

 





 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       
    uint32_t _reserved0:15;               
    uint32_t T:1;                         
    uint32_t _reserved1:3;                
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} xPSR_Type;

 




















 
typedef union
{
  struct
  {
    uint32_t _reserved0:1;                
    uint32_t SPSEL:1;                     
    uint32_t _reserved1:30;               
  } b;                                    
  uint32_t w;                             
} CONTROL_Type;

 



 






 


 
typedef struct
{
  volatile uint32_t ISER[1U];                
        uint32_t RESERVED0[31U];
  volatile uint32_t ICER[1U];                
        uint32_t RSERVED1[31U];
  volatile uint32_t ISPR[1U];                
        uint32_t RESERVED2[31U];
  volatile uint32_t ICPR[1U];                
        uint32_t RESERVED3[31U];
        uint32_t RESERVED4[64U];
  volatile uint32_t IP[8U];                  
}  NVIC_Type;

 






 


 
typedef struct
{
  volatile const  uint32_t CPUID;                   
  volatile uint32_t ICSR;                    
        uint32_t RESERVED0;
  volatile uint32_t AIRCR;                   
  volatile uint32_t SCR;                     
  volatile uint32_t CCR;                     
        uint32_t RESERVED1;
  volatile uint32_t SHP[2U];                 
  volatile uint32_t SHCSR;                   
} SCB_Type;

 















 



























 















 









 






 



 






 


 
typedef struct
{
  volatile uint32_t CTRL;                    
  volatile uint32_t LOAD;                    
  volatile uint32_t VAL;                     
  volatile const  uint32_t CALIB;                   
} SysTick_Type;

 












 



 



 









 








 
 






 







 








 


 






 

 










 









 

 



 




 

 
 










 
static __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}







 
static __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}











 
static __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
}







 
static __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}







 
static __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}










 
static __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
  }
  else
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
  }
}












 
static __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) < 0)
  {
    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
  }
  else
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
  }
}





 
static __inline void NVIC_SystemReset(void)
{
  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
 
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
                 (1UL << 2U));
  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           

  for(;;)                                                            
  {
    __nop();
  }
}

 



 




 

















 
static __inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);                                                    
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
  NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
                   (1UL << 1U)   |
                   (1UL );                          
  return (0UL);                                                      
}



 










#line 120 "..\\..\\..\\..\\Include\\nrf51.h"
#line 1 "..\\..\\..\\..\\Include\\system_nrf51.h"




























 







#line 38 "..\\..\\..\\..\\Include\\system_nrf51.h"


extern uint32_t SystemCoreClock;     









 
extern void SystemInit (void);









 
extern void SystemCoreClockUpdate (void);





#line 121 "..\\..\\..\\..\\Include\\nrf51.h"


 
 
 




 


 

  #pragma push
  #pragma anon_unions
#line 148 "..\\..\\..\\..\\Include\\nrf51.h"


typedef struct {
  volatile uint32_t  CPU0;                               
  volatile uint32_t  SPIS1;                              
  volatile uint32_t  RADIO;                              
  volatile uint32_t  ECB;                                
  volatile uint32_t  CCM;                                
  volatile uint32_t  AAR;                                
} AMLI_RAMPRI_Type;

typedef struct {
  volatile  uint32_t  EN;                                 
  volatile  uint32_t  DIS;                                
} PPI_TASKS_CHG_Type;

typedef struct {
  volatile uint32_t  EEP;                                
  volatile uint32_t  TEP;                                
} PPI_CH_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[30];
  volatile  uint32_t  TASKS_CONSTLAT;                     
  volatile  uint32_t  TASKS_LOWPWR;                       
  volatile const  uint32_t  RESERVED1[34];
  volatile uint32_t  EVENTS_POFWARN;                     
  volatile const  uint32_t  RESERVED2[126];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[61];
  volatile uint32_t  RESETREAS;                          
  volatile const  uint32_t  RESERVED4[9];
  volatile const  uint32_t  RAMSTATUS;                          
  volatile const  uint32_t  RESERVED5[53];
  volatile  uint32_t  SYSTEMOFF;                          
  volatile const  uint32_t  RESERVED6[3];
  volatile uint32_t  POFCON;                             
  volatile const  uint32_t  RESERVED7[2];
  volatile uint32_t  GPREGRET;                          
 
  volatile const  uint32_t  RESERVED8;
  volatile uint32_t  RAMON;                              
  volatile const  uint32_t  RESERVED9[7];
  volatile uint32_t  RESET;                             
 
  volatile const  uint32_t  RESERVED10[3];
  volatile uint32_t  RAMONB;                             
  volatile const  uint32_t  RESERVED11[8];
  volatile uint32_t  DCDCEN;                             
  volatile const  uint32_t  RESERVED12[291];
  volatile uint32_t  DCDCFORCE;                          
} NRF_POWER_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_HFCLKSTART;                   
  volatile  uint32_t  TASKS_HFCLKSTOP;                    
  volatile  uint32_t  TASKS_LFCLKSTART;                   
  volatile  uint32_t  TASKS_LFCLKSTOP;                    
  volatile  uint32_t  TASKS_CAL;                          
  volatile  uint32_t  TASKS_CTSTART;                      
  volatile  uint32_t  TASKS_CTSTOP;                       
  volatile const  uint32_t  RESERVED0[57];
  volatile uint32_t  EVENTS_HFCLKSTARTED;                
  volatile uint32_t  EVENTS_LFCLKSTARTED;                
  volatile const  uint32_t  RESERVED1;
  volatile uint32_t  EVENTS_DONE;                        
  volatile uint32_t  EVENTS_CTTO;                        
  volatile const  uint32_t  RESERVED2[124];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[63];
  volatile const  uint32_t  HFCLKRUN;                           
  volatile const  uint32_t  HFCLKSTAT;                          
  volatile const  uint32_t  RESERVED4;
  volatile const  uint32_t  LFCLKRUN;                           
  volatile const  uint32_t  LFCLKSTAT;                          
  volatile const  uint32_t  LFCLKSRCCOPY;                      
 
  volatile const  uint32_t  RESERVED5[62];
  volatile uint32_t  LFCLKSRC;                           
  volatile const  uint32_t  RESERVED6[7];
  volatile uint32_t  CTIV;                               
  volatile const  uint32_t  RESERVED7[5];
  volatile uint32_t  XTALFREQ;                           
} NRF_CLOCK_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[330];
  volatile uint32_t  PERR0;                              
  volatile uint32_t  RLENR0;                             
  volatile const  uint32_t  RESERVED1[52];
  volatile uint32_t  PROTENSET0;                         
  volatile uint32_t  PROTENSET1;                         
  volatile uint32_t  DISABLEINDEBUG;                     
  volatile uint32_t  PROTBLOCKSIZE;                      
} NRF_MPU_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[448];
  volatile uint32_t  REPLACEADDR[8];                     
  volatile const  uint32_t  RESERVED1[24];
  volatile uint32_t  PATCHADDR[8];                       
  volatile const  uint32_t  RESERVED2[24];
  volatile uint32_t  PATCHEN;                            
  volatile uint32_t  PATCHENSET;                         
  volatile uint32_t  PATCHENCLR;                         
} NRF_PU_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[896];
  AMLI_RAMPRI_Type RAMPRI;                           
} NRF_AMLI_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_TXEN;                         
  volatile  uint32_t  TASKS_RXEN;                         
  volatile  uint32_t  TASKS_START;                        
  volatile  uint32_t  TASKS_STOP;                         
  volatile  uint32_t  TASKS_DISABLE;                      
  volatile  uint32_t  TASKS_RSSISTART;                    
  volatile  uint32_t  TASKS_RSSISTOP;                     
  volatile  uint32_t  TASKS_BCSTART;                      
  volatile  uint32_t  TASKS_BCSTOP;                       
  volatile const  uint32_t  RESERVED0[55];
  volatile uint32_t  EVENTS_READY;                       
  volatile uint32_t  EVENTS_ADDRESS;                     
  volatile uint32_t  EVENTS_PAYLOAD;                     
  volatile uint32_t  EVENTS_END;                         
  volatile uint32_t  EVENTS_DISABLED;                    
  volatile uint32_t  EVENTS_DEVMATCH;                    
  volatile uint32_t  EVENTS_DEVMISS;                     
  volatile uint32_t  EVENTS_RSSIEND;                    
 
  volatile const  uint32_t  RESERVED1[2];
  volatile uint32_t  EVENTS_BCMATCH;                     
  volatile const  uint32_t  RESERVED2[53];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED3[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED4[61];
  volatile const  uint32_t  CRCSTATUS;                          
  volatile const  uint32_t  CD;                                 
  volatile const  uint32_t  RXMATCH;                            
  volatile const  uint32_t  RXCRC;                              
  volatile const  uint32_t  DAI;                                
  volatile const  uint32_t  RESERVED5[60];
  volatile uint32_t  PACKETPTR;                          
  volatile uint32_t  FREQUENCY;                          
  volatile uint32_t  TXPOWER;                            
  volatile uint32_t  MODE;                               
  volatile uint32_t  PCNF0;                              
  volatile uint32_t  PCNF1;                              
  volatile uint32_t  BASE0;                              
  volatile uint32_t  BASE1;                              
  volatile uint32_t  PREFIX0;                            
  volatile uint32_t  PREFIX1;                            
  volatile uint32_t  TXADDRESS;                          
  volatile uint32_t  RXADDRESSES;                        
  volatile uint32_t  CRCCNF;                             
  volatile uint32_t  CRCPOLY;                            
  volatile uint32_t  CRCINIT;                            
  volatile uint32_t  TEST;                               
  volatile uint32_t  TIFS;                               
  volatile const  uint32_t  RSSISAMPLE;                         
  volatile const  uint32_t  RESERVED6;
  volatile const  uint32_t  STATE;                              
  volatile uint32_t  DATAWHITEIV;                        
  volatile const  uint32_t  RESERVED7[2];
  volatile uint32_t  BCC;                                
  volatile const  uint32_t  RESERVED8[39];
  volatile uint32_t  DAB[8];                             
  volatile uint32_t  DAP[8];                             
  volatile uint32_t  DACNF;                              
  volatile const  uint32_t  RESERVED9[56];
  volatile uint32_t  OVERRIDE0;                          
  volatile uint32_t  OVERRIDE1;                          
  volatile uint32_t  OVERRIDE2;                          
  volatile uint32_t  OVERRIDE3;                          
  volatile uint32_t  OVERRIDE4;                          
  volatile const  uint32_t  RESERVED10[561];
  volatile uint32_t  POWER;                              
} NRF_RADIO_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_STARTRX;                      
  volatile  uint32_t  TASKS_STOPRX;                       
  volatile  uint32_t  TASKS_STARTTX;                      
  volatile  uint32_t  TASKS_STOPTX;                       
  volatile const  uint32_t  RESERVED0[3];
  volatile  uint32_t  TASKS_SUSPEND;                      
  volatile const  uint32_t  RESERVED1[56];
  volatile uint32_t  EVENTS_CTS;                         
  volatile uint32_t  EVENTS_NCTS;                        
  volatile uint32_t  EVENTS_RXDRDY;                      
  volatile const  uint32_t  RESERVED2[4];
  volatile uint32_t  EVENTS_TXDRDY;                      
  volatile const  uint32_t  RESERVED3;
  volatile uint32_t  EVENTS_ERROR;                       
  volatile const  uint32_t  RESERVED4[7];
  volatile uint32_t  EVENTS_RXTO;                        
  volatile const  uint32_t  RESERVED5[46];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED6[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED7[93];
  volatile uint32_t  ERRORSRC;                           
  volatile const  uint32_t  RESERVED8[31];
  volatile uint32_t  ENABLE;                             
  volatile const  uint32_t  RESERVED9;
  volatile uint32_t  PSELRTS;                            
  volatile uint32_t  PSELTXD;                            
  volatile uint32_t  PSELCTS;                            
  volatile uint32_t  PSELRXD;                            
  volatile const  uint32_t  RXD;                               

 
  volatile  uint32_t  TXD;                                
  volatile const  uint32_t  RESERVED10;
  volatile uint32_t  BAUDRATE;                           
  volatile const  uint32_t  RESERVED11[17];
  volatile uint32_t  CONFIG;                             
  volatile const  uint32_t  RESERVED12[675];
  volatile uint32_t  POWER;                              
} NRF_UART_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[66];
  volatile uint32_t  EVENTS_READY;                       
  volatile const  uint32_t  RESERVED1[126];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED2[125];
  volatile uint32_t  ENABLE;                             
  volatile const  uint32_t  RESERVED3;
  volatile uint32_t  PSELSCK;                            
  volatile uint32_t  PSELMOSI;                           
  volatile uint32_t  PSELMISO;                           
  volatile const  uint32_t  RESERVED4;
  volatile const  uint32_t  RXD;                                
  volatile uint32_t  TXD;                                
  volatile const  uint32_t  RESERVED5;
  volatile uint32_t  FREQUENCY;                          
  volatile const  uint32_t  RESERVED6[11];
  volatile uint32_t  CONFIG;                             
  volatile const  uint32_t  RESERVED7[681];
  volatile uint32_t  POWER;                              
} NRF_SPI_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_STARTRX;                      
  volatile const  uint32_t  RESERVED0;
  volatile  uint32_t  TASKS_STARTTX;                      
  volatile const  uint32_t  RESERVED1[2];
  volatile  uint32_t  TASKS_STOP;                         
  volatile const  uint32_t  RESERVED2;
  volatile  uint32_t  TASKS_SUSPEND;                      
  volatile  uint32_t  TASKS_RESUME;                       
  volatile const  uint32_t  RESERVED3[56];
  volatile uint32_t  EVENTS_STOPPED;                     
  volatile uint32_t  EVENTS_RXDREADY;                    
  volatile const  uint32_t  RESERVED4[4];
  volatile uint32_t  EVENTS_TXDSENT;                     
  volatile const  uint32_t  RESERVED5;
  volatile uint32_t  EVENTS_ERROR;                       
  volatile const  uint32_t  RESERVED6[4];
  volatile uint32_t  EVENTS_BB;                          
  volatile const  uint32_t  RESERVED7[3];
  volatile uint32_t  EVENTS_SUSPENDED;                   
  volatile const  uint32_t  RESERVED8[45];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED9[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED10[110];
  volatile uint32_t  ERRORSRC;                           
  volatile const  uint32_t  RESERVED11[14];
  volatile uint32_t  ENABLE;                             
  volatile const  uint32_t  RESERVED12;
  volatile uint32_t  PSELSCL;                            
  volatile uint32_t  PSELSDA;                            
  volatile const  uint32_t  RESERVED13[2];
  volatile const  uint32_t  RXD;                                
  volatile uint32_t  TXD;                                
  volatile const  uint32_t  RESERVED14;
  volatile uint32_t  FREQUENCY;                          
  volatile const  uint32_t  RESERVED15[24];
  volatile uint32_t  ADDRESS;                            
  volatile const  uint32_t  RESERVED16[668];
  volatile uint32_t  POWER;                              
} NRF_TWI_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[9];
  volatile  uint32_t  TASKS_ACQUIRE;                      
  volatile  uint32_t  TASKS_RELEASE;                      
  volatile const  uint32_t  RESERVED1[54];
  volatile uint32_t  EVENTS_END;                         
  volatile const  uint32_t  RESERVED2[8];
  volatile uint32_t  EVENTS_ACQUIRED;                    
  volatile const  uint32_t  RESERVED3[53];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED4[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED5[61];
  volatile const  uint32_t  SEMSTAT;                            
  volatile const  uint32_t  RESERVED6[15];
  volatile uint32_t  STATUS;                             
  volatile const  uint32_t  RESERVED7[47];
  volatile uint32_t  ENABLE;                             
  volatile const  uint32_t  RESERVED8;
  volatile uint32_t  PSELSCK;                            
  volatile uint32_t  PSELMISO;                           
  volatile uint32_t  PSELMOSI;                           
  volatile uint32_t  PSELCSN;                            
  volatile const  uint32_t  RESERVED9[7];
  volatile uint32_t  RXDPTR;                             
  volatile uint32_t  MAXRX;                              
  volatile const  uint32_t  AMOUNTRX;                           
  volatile const  uint32_t  RESERVED10;
  volatile uint32_t  TXDPTR;                             
  volatile uint32_t  MAXTX;                              
  volatile const  uint32_t  AMOUNTTX;                           
  volatile const  uint32_t  RESERVED11;
  volatile uint32_t  CONFIG;                             
  volatile const  uint32_t  RESERVED12;
  volatile uint32_t  DEF;                                
  volatile const  uint32_t  RESERVED13[24];
  volatile uint32_t  ORC;                                
  volatile const  uint32_t  RESERVED14[654];
  volatile uint32_t  POWER;                              
} NRF_SPIS_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_OUT[4];                       
  volatile const  uint32_t  RESERVED0[60];
  volatile uint32_t  EVENTS_IN[4];                       
  volatile const  uint32_t  RESERVED1[27];
  volatile uint32_t  EVENTS_PORT;                        
  volatile const  uint32_t  RESERVED2[97];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[129];
  volatile uint32_t  CONFIG[4];                          
  volatile const  uint32_t  RESERVED4[695];
  volatile uint32_t  POWER;                              
} NRF_GPIOTE_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                        
  volatile  uint32_t  TASKS_STOP;                         
  volatile const  uint32_t  RESERVED0[62];
  volatile uint32_t  EVENTS_END;                         
  volatile const  uint32_t  RESERVED1[128];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED2[61];
  volatile const  uint32_t  BUSY;                               
  volatile const  uint32_t  RESERVED3[63];
  volatile uint32_t  ENABLE;                             
  volatile uint32_t  CONFIG;                             
  volatile const  uint32_t  RESULT;                             
  volatile const  uint32_t  RESERVED4[700];
  volatile uint32_t  POWER;                              
} NRF_ADC_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                        
  volatile  uint32_t  TASKS_STOP;                         
  volatile  uint32_t  TASKS_COUNT;                        
  volatile  uint32_t  TASKS_CLEAR;                        
  volatile  uint32_t  TASKS_SHUTDOWN;                     
  volatile const  uint32_t  RESERVED0[11];
  volatile  uint32_t  TASKS_CAPTURE[4];                   
  volatile const  uint32_t  RESERVED1[60];
  volatile uint32_t  EVENTS_COMPARE[4];                  
  volatile const  uint32_t  RESERVED2[44];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED3[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED4[126];
  volatile uint32_t  MODE;                               
  volatile uint32_t  BITMODE;                            
  volatile const  uint32_t  RESERVED5;
  volatile uint32_t  PRESCALER;                         
 
  volatile const  uint32_t  RESERVED6[11];
  volatile uint32_t  CC[4];                              
  volatile const  uint32_t  RESERVED7[683];
  volatile uint32_t  POWER;                              
} NRF_TIMER_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                        
  volatile  uint32_t  TASKS_STOP;                         
  volatile  uint32_t  TASKS_CLEAR;                        
  volatile  uint32_t  TASKS_TRIGOVRFLW;                   
  volatile const  uint32_t  RESERVED0[60];
  volatile uint32_t  EVENTS_TICK;                        
  volatile uint32_t  EVENTS_OVRFLW;                      
  volatile const  uint32_t  RESERVED1[14];
  volatile uint32_t  EVENTS_COMPARE[4];                  
  volatile const  uint32_t  RESERVED2[109];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[13];
  volatile uint32_t  EVTEN;                              
  volatile uint32_t  EVTENSET;                          
 
  volatile uint32_t  EVTENCLR;                          
 
  volatile const  uint32_t  RESERVED4[110];
  volatile const  uint32_t  COUNTER;                            
  volatile uint32_t  PRESCALER;                         
 
  volatile const  uint32_t  RESERVED5[13];
  volatile uint32_t  CC[4];                              
  volatile const  uint32_t  RESERVED6[683];
  volatile uint32_t  POWER;                              
} NRF_RTC_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                        
  volatile  uint32_t  TASKS_STOP;                         
  volatile const  uint32_t  RESERVED0[62];
  volatile uint32_t  EVENTS_DATARDY;                     
  volatile const  uint32_t  RESERVED1[128];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED2[127];
  volatile const  int32_t   TEMP;                               
  volatile const  uint32_t  RESERVED3[700];
  volatile uint32_t  POWER;                              
} NRF_TEMP_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                        
  volatile  uint32_t  TASKS_STOP;                         
  volatile const  uint32_t  RESERVED0[62];
  volatile uint32_t  EVENTS_VALRDY;                      
  volatile const  uint32_t  RESERVED1[63];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED2[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[126];
  volatile uint32_t  CONFIG;                             
  volatile const  uint32_t  VALUE;                              
  volatile const  uint32_t  RESERVED4[700];
  volatile uint32_t  POWER;                              
} NRF_RNG_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_STARTECB;                    

 
  volatile  uint32_t  TASKS_STOPECB;                     
 
  volatile const  uint32_t  RESERVED0[62];
  volatile uint32_t  EVENTS_ENDECB;                      
  volatile uint32_t  EVENTS_ERRORECB;                   
 
  volatile const  uint32_t  RESERVED1[127];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED2[126];
  volatile uint32_t  ECBDATAPTR;                         
  volatile const  uint32_t  RESERVED3[701];
  volatile uint32_t  POWER;                              
} NRF_ECB_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                       
 
  volatile const  uint32_t  RESERVED0;
  volatile  uint32_t  TASKS_STOP;                         
  volatile const  uint32_t  RESERVED1[61];
  volatile uint32_t  EVENTS_END;                         
  volatile uint32_t  EVENTS_RESOLVED;                    
  volatile uint32_t  EVENTS_NOTRESOLVED;                 
  volatile const  uint32_t  RESERVED2[126];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[61];
  volatile const  uint32_t  STATUS;                             
  volatile const  uint32_t  RESERVED4[63];
  volatile uint32_t  ENABLE;                             
  volatile uint32_t  NIRK;                               
  volatile uint32_t  IRKPTR;                             
  volatile const  uint32_t  RESERVED5;
  volatile uint32_t  ADDRPTR;                            
  volatile uint32_t  SCRATCHPTR;                        
 
  volatile const  uint32_t  RESERVED6[697];
  volatile uint32_t  POWER;                              
} NRF_AAR_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_KSGEN;                       
 
  volatile  uint32_t  TASKS_CRYPT;                       
 
  volatile  uint32_t  TASKS_STOP;                         
  volatile const  uint32_t  RESERVED0[61];
  volatile uint32_t  EVENTS_ENDKSGEN;                    
  volatile uint32_t  EVENTS_ENDCRYPT;                    
  volatile uint32_t  EVENTS_ERROR;                       
  volatile const  uint32_t  RESERVED1[61];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED2[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[61];
  volatile const  uint32_t  MICSTATUS;                          
  volatile const  uint32_t  RESERVED4[63];
  volatile uint32_t  ENABLE;                             
  volatile uint32_t  MODE;                               
  volatile uint32_t  CNFPTR;                             
  volatile uint32_t  INPTR;                              
  volatile uint32_t  OUTPTR;                             
  volatile uint32_t  SCRATCHPTR;                        
 
  volatile const  uint32_t  RESERVED5[697];
  volatile uint32_t  POWER;                              
} NRF_CCM_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                        
  volatile const  uint32_t  RESERVED0[63];
  volatile uint32_t  EVENTS_TIMEOUT;                     
  volatile const  uint32_t  RESERVED1[128];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED2[61];
  volatile const  uint32_t  RUNSTATUS;                          
  volatile const  uint32_t  REQSTATUS;                          
  volatile const  uint32_t  RESERVED3[63];
  volatile uint32_t  CRV;                                
  volatile uint32_t  RREN;                               
  volatile uint32_t  CONFIG;                             
  volatile const  uint32_t  RESERVED4[60];
  volatile  uint32_t  RR[8];                              
  volatile const  uint32_t  RESERVED5[631];
  volatile uint32_t  POWER;                              
} NRF_WDT_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                        
  volatile  uint32_t  TASKS_STOP;                         
  volatile  uint32_t  TASKS_READCLRACC;                  
 
  volatile const  uint32_t  RESERVED0[61];
  volatile uint32_t  EVENTS_SAMPLERDY;                   
  volatile uint32_t  EVENTS_REPORTRDY;                  
 
  volatile uint32_t  EVENTS_ACCOF;                       
  volatile const  uint32_t  RESERVED1[61];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED2[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[125];
  volatile uint32_t  ENABLE;                             
  volatile uint32_t  LEDPOL;                             
  volatile uint32_t  SAMPLEPER;                          
  volatile const  int32_t   SAMPLE;                             
  volatile uint32_t  REPORTPER;                          
  volatile const  int32_t   ACC;                                
  volatile const  int32_t   ACCREAD;                           
 
  volatile uint32_t  PSELLED;                            
  volatile uint32_t  PSELA;                              
  volatile uint32_t  PSELB;                              
  volatile uint32_t  DBFEN;                              
  volatile const  uint32_t  RESERVED4[5];
  volatile uint32_t  LEDPRE;                             
  volatile const  uint32_t  ACCDBL;                             
  volatile const  uint32_t  ACCDBLREAD;                        
 
  volatile const  uint32_t  RESERVED5[684];
  volatile uint32_t  POWER;                              
} NRF_QDEC_Type;


 
 
 




 

typedef struct {                                     
  volatile  uint32_t  TASKS_START;                        
  volatile  uint32_t  TASKS_STOP;                         
  volatile  uint32_t  TASKS_SAMPLE;                       
  volatile const  uint32_t  RESERVED0[61];
  volatile uint32_t  EVENTS_READY;                       
  volatile uint32_t  EVENTS_DOWN;                        
  volatile uint32_t  EVENTS_UP;                          
  volatile uint32_t  EVENTS_CROSS;                       
  volatile const  uint32_t  RESERVED1[60];
  volatile uint32_t  SHORTS;                             
  volatile const  uint32_t  RESERVED2[64];
  volatile uint32_t  INTENSET;                           
  volatile uint32_t  INTENCLR;                           
  volatile const  uint32_t  RESERVED3[61];
  volatile const  uint32_t  RESULT;                             
  volatile const  uint32_t  RESERVED4[63];
  volatile uint32_t  ENABLE;                             
  volatile uint32_t  PSEL;                               
  volatile uint32_t  REFSEL;                             
  volatile uint32_t  EXTREFSEL;                          
  volatile const  uint32_t  RESERVED5[4];
  volatile uint32_t  ANADETECT;                          
  volatile const  uint32_t  RESERVED6[694];
  volatile uint32_t  POWER;                              
} NRF_LPCOMP_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  UNUSED;                             
} NRF_SWI_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[256];
  volatile const  uint32_t  READY;                              
  volatile const  uint32_t  RESERVED1[64];
  volatile uint32_t  CONFIG;                             
  volatile uint32_t  ERASEPAGE;                          
  volatile uint32_t  ERASEALL;                           
  volatile uint32_t  ERASEPROTECTEDPAGE;                 
  volatile uint32_t  ERASEUICR;                          
} NRF_NVMC_Type;


 
 
 




 

typedef struct {                                     
  PPI_TASKS_CHG_Type TASKS_CHG[4];                   
  volatile const  uint32_t  RESERVED0[312];
  volatile uint32_t  CHEN;                               
  volatile uint32_t  CHENSET;                            
  volatile uint32_t  CHENCLR;                            
  volatile const  uint32_t  RESERVED1;
  PPI_CH_Type CH[16];                                
  volatile const  uint32_t  RESERVED2[156];
  volatile uint32_t  CHG[4];                             
} NRF_PPI_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[4];
  volatile const  uint32_t  CODEPAGESIZE;                       
  volatile const  uint32_t  CODESIZE;                           
  volatile const  uint32_t  RESERVED1[4];
  volatile const  uint32_t  CLENR0;                             
  volatile const  uint32_t  PPFC;                               
  volatile const  uint32_t  RESERVED2;
  volatile const  uint32_t  NUMRAMBLOCK;                        
  
  union {
    volatile const  uint32_t  SIZERAMBLOCK[4];                 

 
    volatile const  uint32_t  SIZERAMBLOCKS;                    
  };
  volatile const  uint32_t  RESERVED3[5];
  volatile const  uint32_t  CONFIGID;                           
  volatile const  uint32_t  DEVICEID[2];                        
  volatile const  uint32_t  RESERVED4[6];
  volatile const  uint32_t  ER[4];                              
  volatile const  uint32_t  IR[4];                              
  volatile const  uint32_t  DEVICEADDRTYPE;                     
  volatile const  uint32_t  DEVICEADDR[2];                      
  volatile const  uint32_t  OVERRIDEEN;                         
  volatile const  uint32_t  NRF_1MBIT[5];                      
 
  volatile const  uint32_t  RESERVED5[10];
  volatile const  uint32_t  BLE_1MBIT[5];                      
 
} NRF_FICR_Type;


 
 
 




 

typedef struct {                                     
  volatile uint32_t  CLENR0;                             
  volatile uint32_t  RBPCONF;                            
  volatile uint32_t  XTALFREQ;                           
  volatile const  uint32_t  RESERVED0;
  volatile const  uint32_t  FWID;                               
  volatile uint32_t  BOOTLOADERADDR;                     
} NRF_UICR_Type;


 
 
 




 

typedef struct {                                     
  volatile const  uint32_t  RESERVED0[321];
  volatile uint32_t  OUT;                                
  volatile uint32_t  OUTSET;                             
  volatile uint32_t  OUTCLR;                             
  volatile const  uint32_t  IN;                                 
  volatile uint32_t  DIR;                                
  volatile uint32_t  DIRSET;                             
  volatile uint32_t  DIRCLR;                             
  volatile const  uint32_t  RESERVED1[120];
  volatile uint32_t  PIN_CNF[32];                        
} NRF_GPIO_Type;


 

  #pragma pop
#line 1138 "..\\..\\..\\..\\Include\\nrf51.h"




 
 
 

#line 1179 "..\\..\\..\\..\\Include\\nrf51.h"


 
 
 

#line 1218 "..\\..\\..\\..\\Include\\nrf51.h"


   
   
   








#line 38 "..\\..\\..\\..\\Include\\nrf.h"
#line 1 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"




























 



 

#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"
 




 

























 








#line 169 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"



#line 795 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.4.0\\CMSIS\\Include\\core_cm0.h"

#line 36 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
 

 






 






 






 
 

 






 






 






 
 

 



 
 

 





 
 

 



 
 

 






 
 

 
 

 






 
 

 






 
 

 





 
 

 





 
 

 






 
#line 184 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 192 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 201 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 






 
 

 



 
 

 






 
 

 
 

 
#line 243 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 255 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 267 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 279 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 291 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 303 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 315 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 327 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
#line 342 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 354 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 366 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 378 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 390 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 402 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 414 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 426 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
#line 441 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 453 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 465 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 477 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 489 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 501 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 513 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 525 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
#line 540 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 552 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 564 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 576 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 588 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 600 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 612 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 624 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
#line 639 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 651 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 663 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 675 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 687 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 699 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 711 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 723 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
#line 738 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 750 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 762 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 774 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 786 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 798 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 810 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
#line 822 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
 

 





 
 

 






 






 






 
 

 






 






 






 
 

 





 
 

 





 
 

 





 
 

 






 
 

 
 

 






 






 






 






 
 

 






 






 






 






 
 

 





 
 

 





 





 
 

 





 
 

 





 






 
 

 






 
 

 






 
 

 



 
 

 






 
 

 
 

 






 






 
 

 






 






 
 

 






 
 

 
 

 





 
 

 



 



 
 

 





 
 

 





 






 
 

 
 

 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 
 

 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 
 

 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 
 

 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 
 

 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 
 

 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 
 

 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 
 

 






 
#line 2683 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 






 





 






 
 

 
 

 






 






 






 






 






 
 

 






 






 






 






 






 
 

 





 






 



 






 
 

 






 
 

 
 

 





 





 





 





 





 
 

 






 






 






 






 
 

 






 






 






 






 
 

 





 
 

 





 
 

 
#line 2950 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
#line 2965 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 





 
 

 






 
 

 






 
 

 
 

 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 
 

 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 
 

 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 
 

 





 
 

 





 
 

 
 

 





 
 

 






 
 

 





 
 

 






 
 

 
 

 






 
 

 






 
 

 



 



 



 



 



 



 



 
 

 





 





 





 





 
 

 




 
 

 
#line 3739 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 





 
 

 



 
 

 





 





 





 





 
 

 





 
 

 





 





 





 





 
 

 





 
 

 





 






 
 

 
 

 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 
 

 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 
 

 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 
 

 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 






 
 

 
 

 



 
 

 





 





 





 





 





 





 





 





 
 

 






 






 






 






 






 






 






 






 
 

 






 






 






 






 






 






 






 







 
 

 
 

 





 





 
 

 






 






 






 
 

 






 






 






 
 

 





 
 

 





 
 

 
#line 4863 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 



 
 

 
#line 4885 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 





 
 

 



 
 

 



 
 

 



 
 

 






 
 

 
 

 





 





 





 





 





 





 





 





 
 

 






 






 






 






 






 






 






 






 






 
 

 






 






 






 






 






 






 






 






 






 
 

 





 
 

 



 
 

 



 
 

 



 
 

 



 
 

 



 
 

 
#line 5170 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 
#line 5181 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 



 



 



 
 

 





 





 



 



 



 
 

 



 



 



 



 
 

 



 



 



 



 
 

 



 
 

 





 





 





 





 





 





 





 





 
 

 





 
#line 5336 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 



 
 

 



 
 

 





 





 
 

 



 
 

 



 
 

 
#line 5395 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 



 
 

 



 
 

 



 



 



 



 



 



 



 



 





 





 





 





 





 





 





 





 
 

 



 
 

 



 
 

 



 
 

 



 
 

 





 



 
 

 






 
 

 
 

 





 
 

 






 
 

 






 
 

 





 
 

 



 
 

 






 
 

 
 

 






 






 






 






 






 






 
 

 






 






 






 






 






 






 
 

 





 





 





 





 





 





 
 

 






 






 






 






 






 






 
 

 






 






 






 






 






 






 
 

 



 
 

 



 
 

 



 
 

 






 
 

 
 

 






 
 

 






 
 

 





 
 

 



 
 

 



 
 

 
#line 5914 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 





 





 





 
 

 






 
 

 
 

 





 
 

 






 






 
 

 






 






 
 

 
#line 6002 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 






 






 
 

 





 
 

 



 
 

 



 
 

 



 
 

 



 
 

 





 





 





 
 

 



 
 

 



 
 

 






 
 

 
 

 






 
 

 






 
 

 






 
 

 
 

 





 





 





 





 





 





 





 





 
 

 






 






 






 






 
 

 






 






 






 






 
 

 





 
 

 
#line 6270 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 



 
 

 






 
 

 
 

 





 





 
 

 






 






 






 






 






 






 
 

 






 






 






 






 






 






 
 

 






 






 
 

 





 
 

 



 
 

 



 
 

 






 
 

 



 
 

 






 
 

 
 

 





 





 
 

 






 






 






 






 






 






 
 

 






 






 






 






 






 






 
 

 






 






 






 






 
 

 





 
 

 



 
 

 



 
 

 
#line 6647 "..\\..\\..\\..\\Include\\nrf51_bitfields.h"

 
 

 





 





 
 

 






 
 

 
 

 





 





 
 

 





 
 

 




 
 

 
 

 






 
 

 






 
 

 





 
 

 





 





 





 





 





 





 





 





 
 

 





 





 





 





 





 





 





 





 
 

 





 





 
 

 




 
 

 






 
#line 39 "..\\..\\..\\..\\Include\\nrf.h"
#line 1 "..\\..\\..\\..\\Include\\nrf51_deprecated.h"




























 



 




 

 
 

 

 
 
 

 
 
 
 




 
 
 
 




 




 




 





 
 
 

 




 




 






 
 




 


 




 




 




 
 
#line 136 "..\\..\\..\\..\\Include\\nrf51_deprecated.h"
 
#line 169 "..\\..\\..\\..\\Include\\nrf51_deprecated.h"
 




 
#line 431 "..\\..\\..\\..\\Include\\nrf51_deprecated.h"



 



#line 40 "..\\..\\..\\..\\Include\\nrf.h"




#line 1 "..\\..\\..\\..\\Include\\compiler_abstraction.h"




























 



 


    



    



    

  
#line 90 "..\\..\\..\\..\\Include\\compiler_abstraction.h"

 

#line 45 "..\\..\\..\\..\\Include\\nrf.h"





#line 5 "..\\..\\..\\..\\Include\\nrf_delay.h"

 

static __asm void __inline nrf_delay_us(uint32_t volatile number_of_us)
{
loop
        SUBS    R0, R0, #1
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        BNE    loop
        BX     LR
}
#line 71 "..\\..\\..\\..\\Include\\nrf_delay.h"

void nrf_delay_ms(uint32_t volatile number_of_ms);

#line 33 "..\\main.c"
#line 1 "..\\..\\..\\..\\Include\\nrf_gpio.h"



#line 5 "..\\..\\..\\..\\Include\\nrf_gpio.h"
#line 6 "..\\..\\..\\..\\Include\\nrf_gpio.h"












 




 
typedef enum
{
    NRF_GPIO_PORT_DIR_OUTPUT,       
    NRF_GPIO_PORT_DIR_INPUT         
} nrf_gpio_port_dir_t;




 
typedef enum
{
    NRF_GPIO_PIN_DIR_INPUT,   
    NRF_GPIO_PIN_DIR_OUTPUT   
} nrf_gpio_pin_dir_t;




 
typedef enum
{
    NRF_GPIO_PORT_SELECT_PORT0 = 0,           
    NRF_GPIO_PORT_SELECT_PORT1,               
    NRF_GPIO_PORT_SELECT_PORT2,               
    NRF_GPIO_PORT_SELECT_PORT3,               
} nrf_gpio_port_select_t;




 
typedef enum
{
    NRF_GPIO_PIN_NOPULL   = (0x00UL),                 
    NRF_GPIO_PIN_PULLDOWN = (0x01UL),                 
    NRF_GPIO_PIN_PULLUP   = (0x03UL),                   
} nrf_gpio_pin_pull_t;




 
typedef enum
{
    NRF_GPIO_PIN_NOSENSE    = (0x00UL),              
    NRF_GPIO_PIN_SENSE_LOW  = (0x03UL),                   
    NRF_GPIO_PIN_SENSE_HIGH = (0x02UL),                  
} nrf_gpio_pin_sense_t;











 
static __inline void nrf_gpio_range_cfg_output(uint32_t pin_range_start, uint32_t pin_range_end)
{
     
    for (; pin_range_start <= pin_range_end; pin_range_start++)
    {
        ((NRF_GPIO_Type *) 0x50000000UL)->PIN_CNF[pin_range_start] = ((0x00UL) << (16UL))
                                        | ((0x00UL) << (8UL))
                                        | ((0x00UL) << (2UL))
                                        | ((1UL) << (1UL))
                                        | ((1UL) << (0UL));
    }
}













 
static __inline void nrf_gpio_range_cfg_input(uint32_t pin_range_start, uint32_t pin_range_end, nrf_gpio_pin_pull_t pull_config)
{
     
    for (; pin_range_start <= pin_range_end; pin_range_start++)
    {
        ((NRF_GPIO_Type *) 0x50000000UL)->PIN_CNF[pin_range_start] = ((0x00UL) << (16UL))
                                        | ((0x00UL) << (8UL))
                                        | (pull_config << (2UL))
                                        | ((0UL) << (1UL))
                                        | ((0UL) << (0UL));
    }
}








 
static __inline void nrf_gpio_cfg_output(uint32_t pin_number)
{
     
    ((NRF_GPIO_Type *) 0x50000000UL)->PIN_CNF[pin_number] = ((0x00UL) << (16UL))
                                            | ((0x00UL) << (8UL))
                                            | ((0x00UL) << (2UL))
                                            | ((1UL) << (1UL))
                                            | ((1UL) << (0UL));
}










 
static __inline void nrf_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config)
{
     
    ((NRF_GPIO_Type *) 0x50000000UL)->PIN_CNF[pin_number] = ((0x00UL) << (16UL))
                                        | ((0x00UL) << (8UL))
                                        | (pull_config << (2UL))
                                        | ((0UL) << (1UL))
                                        | ((0UL) << (0UL));
}











 
static __inline void nrf_gpio_cfg_sense_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config, nrf_gpio_pin_sense_t sense_config)
{
     
    ((NRF_GPIO_Type *) 0x50000000UL)->PIN_CNF[pin_number] = (sense_config << (16UL))
                                        | ((0x00UL) << (8UL))
                                        | (pull_config << (2UL))
                                        | ((0UL) << (1UL))
                                        | ((0UL) << (0UL));
}








 
static __inline void nrf_gpio_pin_dir_set(uint32_t pin_number, nrf_gpio_pin_dir_t direction)
{
    if(direction == NRF_GPIO_PIN_DIR_INPUT)
    {
        ((NRF_GPIO_Type *) 0x50000000UL)->PIN_CNF[pin_number] =
          ((0x00UL) << (16UL))
        | ((0x00UL) << (8UL))
        | ((0x00UL) << (2UL))
        | ((0UL) << (1UL))
        | ((0UL) << (0UL));
    }
    else
    {
        ((NRF_GPIO_Type *) 0x50000000UL)->DIRSET = (1UL << pin_number);
    }
}









 
static __inline void nrf_gpio_pin_set(uint32_t pin_number)
{
    ((NRF_GPIO_Type *) 0x50000000UL)->OUTSET = (1UL << pin_number);
}









 
static __inline void nrf_gpio_pin_clear(uint32_t pin_number)
{
    ((NRF_GPIO_Type *) 0x50000000UL)->OUTCLR = (1UL << pin_number);
}









 
static __inline void nrf_gpio_pin_toggle(uint32_t pin_number)
{
    const uint32_t pin_bit   = 1UL << pin_number;
    const uint32_t pin_state = ((((NRF_GPIO_Type *) 0x50000000UL)->OUT >> pin_number) & 1UL);
    
    if (pin_state == 0)
    {
        
        ((NRF_GPIO_Type *) 0x50000000UL)->OUTSET = pin_bit;        
    }
    else
    {
        
        ((NRF_GPIO_Type *) 0x50000000UL)->OUTCLR = pin_bit;       
    }
}













 
static __inline void nrf_gpio_pin_write(uint32_t pin_number, uint32_t value)
{
    if (value == 0)
    {
        nrf_gpio_pin_clear(pin_number);
    }
    else
    {
        nrf_gpio_pin_set(pin_number);
    }
}














 
static __inline uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    return  ((((NRF_GPIO_Type *) 0x50000000UL)->IN >> pin_number) & 1UL);
}














 
static __inline void nrf_gpio_word_byte_write(volatile uint32_t * word_address, uint8_t byte_no, uint8_t value)
{
    *((volatile uint8_t*)(word_address) + byte_no) = value;
}













 
static __inline uint8_t nrf_gpio_word_byte_read(const volatile uint32_t* word_address, uint8_t byte_no)
{
    return (*((const volatile uint8_t*)(word_address) + byte_no));
}







 
static __inline void nrf_gpio_port_dir_set(nrf_gpio_port_select_t port, nrf_gpio_port_dir_t dir)
{
    if (dir == NRF_GPIO_PORT_DIR_OUTPUT)
    {
        nrf_gpio_word_byte_write(&((NRF_GPIO_Type *) 0x50000000UL)->DIRSET, port, 0xFF);
    }
    else
    {
        nrf_gpio_range_cfg_input(port*8, (port+1)*8-1, NRF_GPIO_PIN_NOPULL);
    }
}







 
static __inline uint8_t nrf_gpio_port_read(nrf_gpio_port_select_t port)
{
    return nrf_gpio_word_byte_read(&((NRF_GPIO_Type *) 0x50000000UL)->IN, port);
}









 
static __inline void nrf_gpio_port_write(nrf_gpio_port_select_t port, uint8_t value)
{
    nrf_gpio_word_byte_write(&((NRF_GPIO_Type *) 0x50000000UL)->OUT, port, value);
}











 
static __inline void nrf_gpio_port_set(nrf_gpio_port_select_t port, uint8_t set_mask)
{
    nrf_gpio_word_byte_write(&((NRF_GPIO_Type *) 0x50000000UL)->OUTSET, port, set_mask);
}











 
static __inline void nrf_gpio_port_clear(nrf_gpio_port_select_t port, uint8_t clr_mask)
{
    nrf_gpio_word_byte_write(&((NRF_GPIO_Type *) 0x50000000UL)->OUTCLR, port, clr_mask);
}

 

#line 34 "..\\main.c"
#line 1 "..\\..\\..\\..\\Include\\boards.h"










 



#line 1 "..\\..\\..\\..\\Include\\boards/nrf6310.h"










 



#line 16 "..\\..\\..\\..\\Include\\boards/nrf6310.h"

#line 27 "..\\..\\..\\..\\Include\\boards/nrf6310.h"

#line 39 "..\\..\\..\\..\\Include\\boards/nrf6310.h"




























#line 81 "..\\..\\..\\..\\Include\\boards/nrf6310.h"




#line 96 "..\\..\\..\\..\\Include\\boards/nrf6310.h"

#line 112 "..\\..\\..\\..\\Include\\boards/nrf6310.h"



#line 17 "..\\..\\..\\..\\Include\\boards.h"
#line 26 "..\\..\\..\\..\\Include\\boards.h"

#line 35 "..\\main.c"
#line 1 "..\\ST7735.h"




 
 
 








 
 
 











#line 38 "..\\ST7735.h"











#line 55 "..\\ST7735.h"












#line 75 "..\\ST7735.h"
















void ST7735_Write_Cmd(unsigned char );

void ST7735_Write_Data(unsigned char);

void SetAddrWindow(unsigned char , unsigned char, unsigned char , unsigned char );

void ST7735_Initial(void);


void ST7735_SPI_Initial(void);

void ST_SPI_Write(unsigned char);


void fill_display(unsigned char x0,unsigned char y0,unsigned char x1,unsigned char y1,unsigned int color);















#line 36 "..\\main.c"
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"




 





 












 






   









 






#line 61 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"

#line 75 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"







   




 















 
#line 112 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"











 





extern __attribute__((__pcs__("aapcs"))) unsigned __ARM_dcmp4(double  , double  );
extern __attribute__((__pcs__("aapcs"))) unsigned __ARM_fcmp4(float  , float  );
    




 

extern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassifyf(float  );
extern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassify(double  );
     
     

static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinitef(float __x)
{
    return (((*(unsigned *)&(__x)) >> 23) & 0xff) != 0xff;
}
static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinite(double __x)
{
    return (((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff) != 0x7ff;
}
     
     

static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinff(float __x)
{
    return ((*(unsigned *)&(__x)) << 1) == 0xff000000;
}
static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinf(double __x)
{
    return (((*(1 + (unsigned *)&(__x))) << 1) == 0xffe00000) && ((*(unsigned *)&(__x)) == 0);
}
     
     

static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreaterf(float __x, float __y)
{
    unsigned __f = __ARM_fcmp4(__x, __y) >> 28;
    return (__f == 8) || (__f == 2);  
}
static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreater(double __x, double __y)
{
    unsigned __f = __ARM_dcmp4(__x, __y) >> 28;
    return (__f == 8) || (__f == 2);  
}
    


 

static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnanf(float __x)
{
    return (0x7f800000 - ((*(unsigned *)&(__x)) & 0x7fffffff)) >> 31;
}
static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnan(double __x)
{
    unsigned __xf = (*(1 + (unsigned *)&(__x))) | (((*(unsigned *)&(__x)) == 0) ? 0 : 1);
    return (0x7ff00000 - (__xf & 0x7fffffff)) >> 31;
}
     
     

static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormalf(float __x)
{
    unsigned __xe = ((*(unsigned *)&(__x)) >> 23) & 0xff;
    return (__xe != 0xff) && (__xe != 0);
}
static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormal(double __x)
{
    unsigned __xe = ((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff;
    return (__xe != 0x7ff) && (__xe != 0);
}
     
     

static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbitf(float __x)
{
    return (*(unsigned *)&(__x)) >> 31;
}
static inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbit(double __x)
{
    return (*(1 + (unsigned *)&(__x))) >> 31;
}
     
     








#line 230 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"







   
  typedef float float_t;
  typedef double double_t;
#line 251 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"



extern const int math_errhandling;
#line 261 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"

extern __declspec(__nothrow) double acos(double  );
    
    
    
extern __declspec(__nothrow) double asin(double  );
    
    
    
    

extern __declspec(__nothrow) __attribute__((const)) double atan(double  );
    
    

extern __declspec(__nothrow) double atan2(double  , double  );
    
    
    
    

extern __declspec(__nothrow) double cos(double  );
    
    
    
    
extern __declspec(__nothrow) double sin(double  );
    
    
    
    

extern void __use_accurate_range_reduction(void);
    
    

extern __declspec(__nothrow) double tan(double  );
    
    
    
    

extern __declspec(__nothrow) double cosh(double  );
    
    
    
    
extern __declspec(__nothrow) double sinh(double  );
    
    
    
    
    

extern __declspec(__nothrow) __attribute__((const)) double tanh(double  );
    
    

extern __declspec(__nothrow) double exp(double  );
    
    
    
    
    

extern __declspec(__nothrow) double frexp(double  , int *  ) __attribute__((__nonnull__(2)));
    
    
    
    
    
    

extern __declspec(__nothrow) double ldexp(double  , int  );
    
    
    
    
extern __declspec(__nothrow) double log(double  );
    
    
    
    
    
extern __declspec(__nothrow) double log10(double  );
    
    
    
extern __declspec(__nothrow) double modf(double  , double *  ) __attribute__((__nonnull__(2)));
    
    
    
    

extern __declspec(__nothrow) double pow(double  , double  );
    
    
    
    
    
    
extern __declspec(__nothrow) double sqrt(double  );
    
    
    




    inline double _sqrt(double __x) { return sqrt(__x); }




    inline float _sqrtf(float __x) { return (float)sqrt(__x); }

    



 

extern __declspec(__nothrow) __attribute__((const)) double ceil(double  );
    
    
extern __declspec(__nothrow) __attribute__((const)) double fabs(double  );
    
    

extern __declspec(__nothrow) __attribute__((const)) double floor(double  );
    
    

extern __declspec(__nothrow) double fmod(double  , double  );
    
    
    
    
    

    









 



extern __declspec(__nothrow) double acosh(double  );
    

 
extern __declspec(__nothrow) double asinh(double  );
    

 
extern __declspec(__nothrow) double atanh(double  );
    

 
extern __declspec(__nothrow) double cbrt(double  );
    

 
inline __declspec(__nothrow) __attribute__((const)) double copysign(double __x, double __y)
    

 
{
    (*(1 + (unsigned *)&(__x))) = ((*(1 + (unsigned *)&(__x))) & 0x7fffffff) | ((*(1 + (unsigned *)&(__y))) & 0x80000000);
    return __x;
}
inline __declspec(__nothrow) __attribute__((const)) float copysignf(float __x, float __y)
    

 
{
    (*(unsigned *)&(__x)) = ((*(unsigned *)&(__x)) & 0x7fffffff) | ((*(unsigned *)&(__y)) & 0x80000000);
    return __x;
}
extern __declspec(__nothrow) double erf(double  );
    

 
extern __declspec(__nothrow) double erfc(double  );
    

 
extern __declspec(__nothrow) double expm1(double  );
    

 



    

 






#line 479 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"


extern __declspec(__nothrow) double hypot(double  , double  );
    




 
extern __declspec(__nothrow) int ilogb(double  );
    

 
extern __declspec(__nothrow) int ilogbf(float  );
    

 
extern __declspec(__nothrow) int ilogbl(long double  );
    

 







    

 





    



 





    



 





    

 





    



 





    



 





    



 





    

 





    

 





    


 

extern __declspec(__nothrow) double lgamma (double  );
    


 
extern __declspec(__nothrow) double log1p(double  );
    

 
extern __declspec(__nothrow) double logb(double  );
    

 
extern __declspec(__nothrow) float logbf(float  );
    

 
extern __declspec(__nothrow) long double logbl(long double  );
    

 
extern __declspec(__nothrow) double nextafter(double  , double  );
    


 
extern __declspec(__nothrow) float nextafterf(float  , float  );
    


 
extern __declspec(__nothrow) long double nextafterl(long double  , long double  );
    


 
extern __declspec(__nothrow) double nexttoward(double  , long double  );
    


 
extern __declspec(__nothrow) float nexttowardf(float  , long double  );
    


 
extern __declspec(__nothrow) long double nexttowardl(long double  , long double  );
    


 
extern __declspec(__nothrow) double remainder(double  , double  );
    

 
extern __declspec(__nothrow) __attribute__((const)) double rint(double  );
    

 
extern __declspec(__nothrow) double scalbln(double  , long int  );
    

 
extern __declspec(__nothrow) float scalblnf(float  , long int  );
    

 
extern __declspec(__nothrow) long double scalblnl(long double  , long int  );
    

 
extern __declspec(__nothrow) double scalbn(double  , int  );
    

 
extern __declspec(__nothrow) float scalbnf(float  , int  );
    

 
extern __declspec(__nothrow) long double scalbnl(long double  , int  );
    

 




    

 



 
extern __declspec(__nothrow) __attribute__((const)) float _fabsf(float);  
inline __declspec(__nothrow) __attribute__((const)) float fabsf(float __f) { return _fabsf(__f); }
extern __declspec(__nothrow) float sinf(float  );
extern __declspec(__nothrow) float cosf(float  );
extern __declspec(__nothrow) float tanf(float  );
extern __declspec(__nothrow) float acosf(float  );
extern __declspec(__nothrow) float asinf(float  );
extern __declspec(__nothrow) float atanf(float  );
extern __declspec(__nothrow) float atan2f(float  , float  );
extern __declspec(__nothrow) float sinhf(float  );
extern __declspec(__nothrow) float coshf(float  );
extern __declspec(__nothrow) float tanhf(float  );
extern __declspec(__nothrow) float expf(float  );
extern __declspec(__nothrow) float logf(float  );
extern __declspec(__nothrow) float log10f(float  );
extern __declspec(__nothrow) float powf(float  , float  );
extern __declspec(__nothrow) float sqrtf(float  );
extern __declspec(__nothrow) float ldexpf(float  , int  );
extern __declspec(__nothrow) float frexpf(float  , int *  ) __attribute__((__nonnull__(2)));
extern __declspec(__nothrow) __attribute__((const)) float ceilf(float  );
extern __declspec(__nothrow) __attribute__((const)) float floorf(float  );
extern __declspec(__nothrow) float fmodf(float  , float  );
extern __declspec(__nothrow) float modff(float  , float *  ) __attribute__((__nonnull__(2)));

 
 













 
__declspec(__nothrow) long double acosl(long double );
__declspec(__nothrow) long double asinl(long double );
__declspec(__nothrow) long double atanl(long double );
__declspec(__nothrow) long double atan2l(long double , long double );
__declspec(__nothrow) long double ceill(long double );
__declspec(__nothrow) long double cosl(long double );
__declspec(__nothrow) long double coshl(long double );
__declspec(__nothrow) long double expl(long double );
__declspec(__nothrow) long double fabsl(long double );
__declspec(__nothrow) long double floorl(long double );
__declspec(__nothrow) long double fmodl(long double , long double );
__declspec(__nothrow) long double frexpl(long double , int* ) __attribute__((__nonnull__(2)));
__declspec(__nothrow) long double ldexpl(long double , int );
__declspec(__nothrow) long double logl(long double );
__declspec(__nothrow) long double log10l(long double );
__declspec(__nothrow) long double modfl(long double  , long double *  ) __attribute__((__nonnull__(2)));
__declspec(__nothrow) long double powl(long double , long double );
__declspec(__nothrow) long double sinl(long double );
__declspec(__nothrow) long double sinhl(long double );
__declspec(__nothrow) long double sqrtl(long double );
__declspec(__nothrow) long double tanl(long double );
__declspec(__nothrow) long double tanhl(long double );





 
extern __declspec(__nothrow) float acoshf(float  );
__declspec(__nothrow) long double acoshl(long double );
extern __declspec(__nothrow) float asinhf(float  );
__declspec(__nothrow) long double asinhl(long double );
extern __declspec(__nothrow) float atanhf(float  );
__declspec(__nothrow) long double atanhl(long double );
__declspec(__nothrow) long double copysignl(long double , long double );
extern __declspec(__nothrow) float cbrtf(float  );
__declspec(__nothrow) long double cbrtl(long double );
extern __declspec(__nothrow) float erff(float  );
__declspec(__nothrow) long double erfl(long double );
extern __declspec(__nothrow) float erfcf(float  );
__declspec(__nothrow) long double erfcl(long double );
extern __declspec(__nothrow) float expm1f(float  );
__declspec(__nothrow) long double expm1l(long double );
extern __declspec(__nothrow) float log1pf(float  );
__declspec(__nothrow) long double log1pl(long double );
extern __declspec(__nothrow) float hypotf(float  , float  );
__declspec(__nothrow) long double hypotl(long double , long double );
extern __declspec(__nothrow) float lgammaf(float  );
__declspec(__nothrow) long double lgammal(long double );
extern __declspec(__nothrow) float remainderf(float  , float  );
__declspec(__nothrow) long double remainderl(long double , long double );
extern __declspec(__nothrow) float rintf(float  );
__declspec(__nothrow) long double rintl(long double );






 
extern __declspec(__nothrow) double exp2(double  );  
extern __declspec(__nothrow) float exp2f(float  );
__declspec(__nothrow) long double exp2l(long double );
extern __declspec(__nothrow) double fdim(double  , double  );
extern __declspec(__nothrow) float fdimf(float  , float  );
__declspec(__nothrow) long double fdiml(long double , long double );
#line 803 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"
extern __declspec(__nothrow) double fma(double  , double  , double  );
extern __declspec(__nothrow) float fmaf(float  , float  , float  );

inline __declspec(__nothrow) long double fmal(long double __x, long double __y, long double __z)     { return (long double)fma((double)__x, (double)__y, (double)__z); }


extern __declspec(__nothrow) __attribute__((const)) double fmax(double  , double  );
extern __declspec(__nothrow) __attribute__((const)) float fmaxf(float  , float  );
__declspec(__nothrow) long double fmaxl(long double , long double );
extern __declspec(__nothrow) __attribute__((const)) double fmin(double  , double  );
extern __declspec(__nothrow) __attribute__((const)) float fminf(float  , float  );
__declspec(__nothrow) long double fminl(long double , long double );
extern __declspec(__nothrow) double log2(double  );  
extern __declspec(__nothrow) float log2f(float  );
__declspec(__nothrow) long double log2l(long double );
extern __declspec(__nothrow) long lrint(double  );
extern __declspec(__nothrow) long lrintf(float  );

inline __declspec(__nothrow) long lrintl(long double __x)     { return lrint((double)__x); }


extern __declspec(__nothrow) long long llrint(double  );
extern __declspec(__nothrow) long long llrintf(float  );

inline __declspec(__nothrow) long long llrintl(long double __x)     { return llrint((double)__x); }


extern __declspec(__nothrow) long lround(double  );
extern __declspec(__nothrow) long lroundf(float  );

inline __declspec(__nothrow) long lroundl(long double __x)     { return lround((double)__x); }


extern __declspec(__nothrow) long long llround(double  );
extern __declspec(__nothrow) long long llroundf(float  );

inline __declspec(__nothrow) long long llroundl(long double __x)     { return llround((double)__x); }


extern __declspec(__nothrow) __attribute__((const)) double nan(const char * );
extern __declspec(__nothrow) __attribute__((const)) float nanf(const char * );

inline __declspec(__nothrow) __attribute__((const)) long double nanl(const char *__t)     { return (long double)nan(__t); }
#line 856 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"
extern __declspec(__nothrow) __attribute__((const)) double nearbyint(double  );
extern __declspec(__nothrow) __attribute__((const)) float nearbyintf(float  );
__declspec(__nothrow) long double nearbyintl(long double );
extern  double remquo(double  , double  , int * );
extern  float remquof(float  , float  , int * );

inline long double remquol(long double __x, long double __y, int *__q)     { return (long double)remquo((double)__x, (double)__y, __q); }


extern __declspec(__nothrow) __attribute__((const)) double round(double  );
extern __declspec(__nothrow) __attribute__((const)) float roundf(float  );
__declspec(__nothrow) long double roundl(long double );
extern __declspec(__nothrow) double tgamma(double  );  
extern __declspec(__nothrow) float tgammaf(float  );
__declspec(__nothrow) long double tgammal(long double );
extern __declspec(__nothrow) __attribute__((const)) double trunc(double  );
extern __declspec(__nothrow) __attribute__((const)) float truncf(float  );
__declspec(__nothrow) long double truncl(long double );






#line 896 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"

#line 1087 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"











#line 1317 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\math.h"





 
#line 37 "..\\main.c"
#line 1 "..\\..\\..\\..\\Include\\simple_uart.h"
 









 




 

#line 19 "..\\..\\..\\..\\Include\\simple_uart.h"
#line 20 "..\\..\\..\\..\\Include\\simple_uart.h"









 




 
uint8_t simple_uart_get(void);






 
_Bool simple_uart_get_with_timeout(int32_t timeout_ms, uint8_t *rx_data);




 
void simple_uart_put(uint8_t cr);





 
void simple_uart_putstring(const uint8_t *str);







 
void simple_uart_config(uint8_t rts_pin_number, uint8_t txd_pin_number, uint8_t cts_pin_number, uint8_t rxd_pin_number, _Bool hwfc);



 

 
#line 38 "..\\main.c"
#line 1 "..\\winbond_flash.h"



#line 5 "..\\winbond_flash.h"
#line 6 "..\\winbond_flash.h"



















                                              









                                              
                                              







 	 

void Winbond_SPI_Initial(void);







 

unsigned char SPI_Write_Read(unsigned char );







 

void Winbond_Write_Enable(void);






 

_Bool Winbond_Flash_Busy(void);





 

void Winbond_Release_Powerdown(void);





 

void Winbond_Chip_Erase(void);








 

void Winbond_Write(uint32_t ,unsigned int,const uint16_t * );










 

void Winbond_Read(uint32_t ,unsigned int,uint8_t * );








 


void Winbond_Chip_32kErase(uint32_t);










#line 39 "..\\main.c"


















                                              









                                              
                                              





uint8_t	SPI_BUF[20];
uint8_t Spi_buf_index;


const uint16_t ImageArray[]=
{
 0x32EE, 0x3AEF, 0x2AEF, 0x2AF0, 0x2AEF, 0x2B10, 0x2AF0, 0x2B11, 
  0x2310, 0x2B11, 0x2B10, 0x3311, 0x2310, 0x2311, 0x2B10, 0x3B31, 
  0x2B10, 0x2B31, 0x3B30, 0x4B51, 0x3B30, 0x3331, 0x3331, 0x3B51, 
  0x2B31, 0x3351, 0x3331, 0x3351, 0x3331, 0x3351, 0x3331, 0x3352, 
  0x2B51, 0x2B52, 0x2B51, 0x3372, 0x2B51, 0x3372, 0x3351, 0x4372, 
  0x4371, 0x4B92, 0x4372, 0x4372, 0x3B71, 0x4372, 0x4351, 0x5371, 
  0x5B50, 0x6350, 0x6B4F, 0x8350, 0x734F, 0x6B50, 0x6B50, 0x7370, 
  0x7370, 0x8390, 0x6391, 0x5B92, 0x5391, 0x63B1, 0x5391, 0x3BB2, 
  0x3B92, 0x43B2, 0x4BB1, 0x5BB2, 0x63B1, 0x73B1, 0x73B1, 0x8BB1, 
  0x8B90, 0x83B1, 0x93B0, 0x9BB1, 0x7BB0, 0x63B1, 0x5391, 0x5BB2, 
  0x5B91, 0x5391, 0x4B71, 0x5B71, 0x5B70, 0x5B71, 0x5350, 0x5B71, 
  0x6370, 0x9B6F, 0xD38D, 0xE3AD, 0xEBAC, 0x9B8F, 0x5B70, 0x6371, 
  0x5370, 0x5371, 0x6370, 0x6B70, 0x5B50, 0x5B50, 0x5330, 0x4B10, 
  0x3AEF, 0x42EF, 0x42EF, 0x32EF, 0x2ACF, 0x42CF, 0x42CF, 0x3AEF, 
  0x3AEF, 0x530F, 0x6B0E, 0x8B2F, 0x8B2E, 0x934F, 0xA34E, 0xAB6E, 
  0x8B4F, 0x8B6F, 0x934F, 0x7350, 0x6B4F, 0x7350, 0x5330, 0x4B51, 
  0x3B0F, 0x3B0F, 0x3B10, 0x3310, 0x3310, 0x2B10, 0x3331, 0x2B10, 
  0x2B31, 0x2B11, 0x3331, 0x3331, 0x3331, 0x2B11, 0x3331, 0x3B31, 
  0x3B51, 0x3331, 0x4B51, 0x5B51, 0x4B71, 0x3B51, 0x4372, 0x4351, 
  0x3B52, 0x3351, 0x3B52, 0x3351, 0x3B72, 0x3B51, 0x3B72, 0x3371, 
  0x3372, 0x3372, 0x3372, 0x3372, 0x3372, 0x3372, 0x3B72, 0x4372, 
  0x5392, 0x5392, 0x5392, 0x3B72, 0x3B92, 0x3B72, 0x4B92, 0x5371, 
  0x6391, 0x6B70, 0x7371, 0x8350, 0x8370, 0x7B70, 0x7391, 0x7390, 
  0x8391, 0x8B90, 0x6BB2, 0x5BB2, 0x63B2, 0x73B1, 0x63D2, 0x43B2, 
  0x43B3, 0x43B2, 0x4BD3, 0x53B2, 0x63D2, 0x6BD2, 0x73F2, 0x83D1, 
  0x93D1, 0x83D1, 0x9BD1, 0x9BD1, 0x83F2, 0x6BD1, 0x6BD2, 0x6BD2, 
  0x6BD2, 0x5BB1, 0x63B2, 0x7B91, 0x8391, 0x6B91, 0x6391, 0x6B90, 
  0x8390, 0x9B8F, 0xC3AF, 0xDBAD, 0xE3CD, 0x9390, 0x7B91, 0x7391, 
  0x6391, 0x6391, 0x83B1, 0x7B90, 0x7391, 0x6B70, 0x6350, 0x5330, 
  0x5330, 0x4B0F, 0x5B10, 0x52EF, 0x530F, 0x4AEF, 0x4AF0, 0x42EF, 
  0x3AF0, 0x42EF, 0x6330, 0x732F, 0x8B4F, 0xA34E, 0xBB6E, 0x9B4F, 
  0x8B70, 0x8B4F, 0x9370, 0x834F, 0x6B50, 0x4330, 0x3B51, 0x3B51, 
  0x3AEF, 0x4310, 0x3B0F, 0x3330, 0x2B10, 0x2B31, 0x2B10, 0x2B31, 
  0x2B10, 0x2B31, 0x2B30, 0x3331, 0x2B31, 0x3331, 0x3331, 0x3B51, 
  0x4351, 0x4352, 0x4351, 0x5B71, 0x5351, 0x4B72, 0x4B51, 0x4B72, 
  0x4351, 0x3B72, 0x3351, 0x3B72, 0x3B51, 0x3B72, 0x3B71, 0x3B72, 
  0x3372, 0x3372, 0x3372, 0x3392, 0x3372, 0x3372, 0x3B72, 0x4B92, 
  0x5B92, 0x5BB2, 0x4B91, 0x4392, 0x3B72, 0x3B92, 0x3B72, 0x4B92, 
  0x5371, 0x6B91, 0x7370, 0x8370, 0x8370, 0x8B90, 0x7B90, 0x8391, 
  0x8390, 0x93B1, 0x73B1, 0x5BD2, 0x6BB1, 0x83D1, 0x5BD2, 0x4BD2, 
  0x43B2, 0x4BD3, 0x43D2, 0x53D2, 0x5BD2, 0x6BF2, 0x63D2, 0x7BF2, 
  0x8BD1, 0x8BF1, 0x93D1, 0x9BF1, 0x73F1, 0x73F2, 0x73F1, 0x6BF2, 
  0x63D2, 0x63D2, 0x73B1, 0x8BB1, 0x7BB1, 0x73B1, 0x6B90, 0x8390, 
  0x9B8F, 0xBBAF, 0xCB8E, 0xD3AE, 0xCBAE, 0x93B0, 0x8B90, 0x83B1, 
  0x6BB1, 0x83B1, 0x8BB0, 0x7BB1, 0x7B90, 0x7B70, 0x6350, 0x6350, 
  0x5B2F, 0x6B2F, 0x730E, 0x6B0F, 0x730E, 0x6B0F, 0x5AEF, 0x530F, 
  0x530F, 0x5B30, 0x630F, 0x834F, 0x932E, 0xBB4E, 0xCB6C, 0xB36E, 
  0xA34E, 0xAB6F, 0x936F, 0x7B70, 0x4330, 0x2331, 0x2331, 0x2B51, 
  0x4330, 0x4310, 0x4330, 0x3330, 0x3331, 0x3330, 0x3331, 0x2B30, 
  0x3331, 0x3331, 0x3B51, 0x3331, 0x3B51, 0x3331, 0x3B52, 0x3B51, 
  0x4372, 0x4B71, 0x5372, 0x5B71, 0x5B92, 0x4B71, 0x5392, 0x5371, 
  0x5392, 0x4372, 0x4372, 0x3B72, 0x3B72, 0x3B72, 0x4392, 0x3B72, 
  0x3B93, 0x3B92, 0x3B93, 0x3B92, 0x3B93, 0x3B92, 0x4393, 0x4BB2, 
  0x63D2, 0x5BB2, 0x53B2, 0x4392, 0x43B3, 0x3B92, 0x43B3, 0x4392, 
  0x53B2, 0x5B91, 0x73B1, 0x7B90, 0x7B91, 0x8B90, 0x8BB1, 0x8390, 
  0x83B1, 0x83B1, 0x83D2, 0x63D2, 0x73F2, 0x8BD1, 0x63F2, 0x4BD2, 
  0x4BF3, 0x4BD2, 0x53F3, 0x53F2, 0x63F3, 0x63F2, 0x7412, 0x7BF1, 
  0x8BF2, 0x93F1, 0x9C12, 0x93F1, 0x8412, 0x6BF2, 0x7C12, 0x6BF2, 
  0x73F2, 0x7BD2, 0x8BF1, 0x83D1, 0x73D2, 0x73B1, 0x8BD1, 0xA3B0, 
  0xB3B0, 0xC3AF, 0xD3CF, 0xD3CE, 0xBBD0, 0x93B0, 0x93D1, 0x83B1, 
  0x8BD1, 0x93D1, 0x8BD1, 0x83B1, 0x93B1, 0x8B90, 0x7B91, 0x7350, 
  0x7B50, 0x7B2F, 0x832F, 0x8B0E, 0x932F, 0x7B0F, 0x6B2F, 0x6B0F, 
  0x6B30, 0x6B2F, 0x8B4F, 0x9B4E, 0xBB6E, 0xD36D, 0xDB8D, 0xBB4D, 
  0xBB6E, 0x8B6F, 0x5B71, 0x3331, 0x2B31, 0x2331, 0x2B52, 0x2B51, 
  0x4330, 0x4B50, 0x4330, 0x3B51, 0x3330, 0x3331, 0x3330, 0x3351, 
  0x2B31, 0x3B51, 0x3B51, 0x4351, 0x3B51, 0x3B51, 0x3B51, 0x4372, 
  0x3B51, 0x4B72, 0x5371, 0x5B92, 0x5371, 0x5B92, 0x4B71, 0x5B92, 
  0x5371, 0x4B92, 0x4372, 0x3B72, 0x3B72, 0x3B92, 0x3B72, 0x3B92, 
  0x3B72, 0x3B92, 0x3B92, 0x3BB3, 0x3B92, 0x43B2, 0x4392, 0x5BD2, 
  0x63D2, 0x63D2, 0x53B2, 0x4BB3, 0x4392, 0x43B3, 0x43B2, 0x4BB3, 
  0x43B2, 0x53B2, 0x5B91, 0x63B2, 0x5391, 0x73B1, 0x8390, 0x83D1, 
  0x73D1, 0x73F2, 0x7BD1, 0x6BF2, 0x6BF2, 0x8BF1, 0x63F2, 0x53F3, 
  0x4BF2, 0x53F3, 0x4BF2, 0x53F3, 0x63F2, 0x6412, 0x6BF2, 0x8412, 
  0x8BF1, 0x8C12, 0x93F1, 0x9412, 0x83F1, 0x6C13, 0x73F2, 0x7C12, 
  0x73F1, 0x8BF1, 0x8BD1, 0x7BF2, 0x6BD1, 0x7BD1, 0x9BB0, 0xBBD0, 
  0xC3AE, 0xC3CF, 0xD3CE, 0xD3CF, 0xA3B0, 0x93D1, 0x93B0, 0x8BD1, 
  0x93D1, 0x8BD1, 0x83D1, 0x9BD1, 0x9BB0, 0x9BB0, 0x8B70, 0x8B70, 
  0x8B4F, 0x934F, 0x932E, 0xAB2E, 0xA30D, 0x932E, 0x832F, 0x732F, 
  0x732F, 0x8B4F, 0xA32E, 0xC34D, 0xC34D, 0xDB6D, 0xD36C, 0xD38D, 
  0x8B6F, 0x4351, 0x3B31, 0x2B31, 0x2331, 0x2351, 0x2351, 0x2B72, 
  0x5371, 0x4B50, 0x5371, 0x3B51, 0x3B51, 0x3351, 0x3B52, 0x3351, 
  0x3B52, 0x4351, 0x4B72, 0x4371, 0x4B72, 0x4371, 0x4372, 0x4372, 
  0x3B72, 0x4371, 0x5B92, 0x5B92, 0x5BB2, 0x5B92, 0x5B92, 0x5B92, 
  0x5BB2, 0x4B92, 0x4B93, 0x3B72, 0x3B92, 0x3B92, 0x4393, 0x3B92, 
  0x43B3, 0x3BB2, 0x43B3, 0x3BB2, 0x43B3, 0x43B2, 0x4BB3, 0x63D2, 
  0x6BF2, 0x63D2, 0x53D3, 0x4BB3, 0x4BD3, 0x4BB2, 0x53D3, 0x4BD2, 
  0x53D3, 0x53B2, 0x5BD2, 0x5BB2, 0x53D2, 0x5BB2, 0x7BD2, 0x7BD1, 
  0x73F2, 0x6BF2, 0x7BF2, 0x73F2, 0x6C13, 0x73F2, 0x6C13, 0x53F3, 
  0x5413, 0x53F3, 0x5413, 0x5BF3, 0x6C13, 0x6412, 0x7413, 0x7C12, 
  0x8C12, 0x8C11, 0x9C12, 0x9C11, 0x9412, 0x6C12, 0x7413, 0x7BF2, 
  0x8C12, 0x8BF1, 0x83F2, 0x73F2, 0x73F2, 0x83D1, 0xB3D0, 0xCBCF, 
  0xCBCF, 0xD3CE, 0xDBEF, 0xBBD0, 0x9BD1, 0x9BD1, 0x93F1, 0x8BF1, 
  0x9BF1, 0x93D1, 0x9BF1, 0x9BD1, 0xA3F1, 0x9BD0, 0x9BB0, 0xA36F, 
  0xBB6E, 0xC34D, 0xBB4E, 0xB32D, 0xAB4E, 0x932E, 0x7B50, 0x6B4F, 
  0x8B4F, 0xAB4E, 0xCB4D, 0xCB4D, 0xCB6D, 0xCB6D, 0xC38E, 0x938F, 
  0x5371, 0x4B71, 0x3352, 0x2B51, 0x2B52, 0x2351, 0x2372, 0x2372, 
  0x4B50, 0x5371, 0x4B71, 0x4371, 0x3B51, 0x3B72, 0x3B51, 0x4371, 
  0x3B51, 0x4372, 0x4371, 0x4B72, 0x4371, 0x4372, 0x3B71, 0x4372, 
  0x3B72, 0x4392, 0x5391, 0x5B92, 0x5B91, 0x63B2, 0x5B91, 0x63B2, 
  0x5BB2, 0x53B2, 0x4B92, 0x4392, 0x3B92, 0x3B92, 0x3B92, 0x43B2, 
  0x3B92, 0x43B3, 0x43B2, 0x43B3, 0x43B2, 0x43D3, 0x4BB2, 0x5BF2, 
  0x63D2, 0x5BF3, 0x53D2, 0x53D3, 0x4BD2, 0x4BD3, 0x4BD2, 0x53F3, 
  0x53D2, 0x5BD2, 0x5BD2, 0x5BD2, 0x53B2, 0x63D2, 0x6BD1, 0x73F2, 
  0x6BF1, 0x73F2, 0x7BF1, 0x7BF2, 0x63F2, 0x6C13, 0x63F2, 0x6413, 
  0x5BF3, 0x5C13, 0x5BF2, 0x6413, 0x6412, 0x6C13, 0x6C12, 0x7C12, 
  0x8C11, 0x9C12, 0x9BF1, 0xA3F1, 0x8BF1, 0x6C13, 0x6412, 0x7412, 
  0x8BF1, 0x8BF2, 0x73F1, 0x73F2, 0x73D1, 0x93D1, 0xB3CF, 0xD3CF, 
  0xCBCE, 0xDBEF, 0xCBCE, 0xABD0, 0x9BD1, 0x93F1, 0x83D1, 0x93F1, 
  0x9BF1, 0xABF1, 0xABF0, 0xA3F1, 0xB3F0, 0xC3CF, 0xCBAE, 0xCB8E, 
  0xCB6D, 0xBB4E, 0xA34E, 0xA34E, 0x932F, 0x8B4F, 0x8B4E, 0x9B4F, 
  0xB32D, 0xD34D, 0xCB4C, 0xCB6D, 0xCB6D, 0xC38E, 0x8B6F, 0x6391, 
  0x5B71, 0x4372, 0x2B51, 0x2B52, 0x2B51, 0x2B72, 0x1B71, 0x2392, 
  0x5392, 0x5371, 0x5392, 0x4371, 0x4392, 0x4372, 0x4392, 0x3B72, 
  0x4372, 0x3B72, 0x4372, 0x4372, 0x4B92, 0x4372, 0x4392, 0x4372, 
  0x4B92, 0x4B92, 0x63B2, 0x5B92, 0x5BB2, 0x5BB2, 0x6BD2, 0x63B2, 
  0x63D2, 0x5BB2, 0x53B2, 0x4392, 0x43B3, 0x3BB2, 0x43B3, 0x3BB2, 
  0x43D3, 0x43B2, 0x4BD3, 0x43D2, 0x4BD3, 0x43D3, 0x53F3, 0x53D2, 
  0x63F3, 0x5BF2, 0x5BF3, 0x53F3, 0x53F3, 0x53F3, 0x53F3, 0x53F3, 
  0x5BF3, 0x63F2, 0x63F3, 0x5BD2, 0x63F3, 0x63D2, 0x73F2, 0x73F2, 
  0x7413, 0x73F2, 0x8412, 0x7412, 0x6C13, 0x6413, 0x6C13, 0x6413, 
  0x6C33, 0x6413, 0x6C33, 0x6413, 0x6C33, 0x7432, 0x7433, 0x7C12, 
  0x8412, 0x93F2, 0xA412, 0xA3F1, 0x8C12, 0x7412, 0x6C13, 0x6BF2, 
  0x8BF2, 0x83F1, 0x7BF2, 0x73F1, 0x8BF2, 0x93D1, 0xC3F0, 0xE3EE, 
  0xDBEF, 0xD3CF, 0xB3F1, 0x9BD1, 0x9BF2, 0x83F1, 0x9BF2, 0xA3F1, 
  0xB411, 0xB3F1, 0xAC11, 0xABF1, 0xE40F, 0xFC0D, 0xEBED, 0xC38E, 
  0xAB8F, 0x936F, 0x9B6F, 0xA34E, 0xAB4F, 0xAB4E, 0xC34E, 0xD34C, 
  0xE36C, 0xDB6C, 0xDB6D, 0xC36E, 0xAB90, 0x8B90, 0x7BB1, 0x6B91, 
  0x5392, 0x2B72, 0x3372, 0x3B72, 0x3B92, 0x2372, 0x2392, 0x1B92, 
  0x5371, 0x5B91, 0x5391, 0x4392, 0x4371, 0x4392, 0x3B72, 0x3B92, 
  0x3B72, 0x3B72, 0x3B72, 0x4372, 0x4372, 0x4392, 0x3B72, 0x4392, 
  0x4392, 0x53B2, 0x5B92, 0x63B2, 0x63B2, 0x6BD2, 0x63B2, 0x63D2, 
  0x5BB2, 0x5BD2, 0x4BB2, 0x43B3, 0x3BB2, 0x43B3, 0x43B2, 0x43D3, 
  0x43B2, 0x4BD2, 0x43D2, 0x4BD3, 0x4BD2, 0x4BF3, 0x53D2, 0x5BF3, 
  0x63F2, 0x6413, 0x5BF2, 0x5BF3, 0x53F2, 0x5413, 0x53F2, 0x5C13, 
  0x5BF2, 0x6413, 0x63F2, 0x63F3, 0x63F2, 0x63F2, 0x6BF2, 0x73F2, 
  0x6BF2, 0x7412, 0x7412, 0x7413, 0x6412, 0x6413, 0x6413, 0x6433, 
  0x6413, 0x6C33, 0x6C13, 0x6C33, 0x6C32, 0x7432, 0x7412, 0x7C32, 
  0x7C12, 0x8412, 0x83F1, 0x9412, 0x83F1, 0x6C12, 0x63F2, 0x6BF2, 
  0x7BD1, 0x7BF2, 0x73D1, 0x7BD2, 0x83D1, 0x9BD1, 0xCBCF, 0xDBCE, 
  0xD3CE, 0xC3F0, 0x9BD0, 0x93D1, 0x7BD1, 0x93F1, 0xABF0, 0xB3F1, 
  0xB3F0, 0xAC11, 0xA3F1, 0xCC10, 0xEBED, 0xEBEE, 0xBBAF, 0x9BB0, 
  0x936F, 0xAB6F, 0xB34E, 0xC36E, 0xD34C, 0xE36C, 0xEB6B, 0xF38C, 
  0xE38C, 0xD38D, 0xC38E, 0xA38F, 0x8390, 0x7391, 0x5B91, 0x5392, 
  0x3B71, 0x4B92, 0x4BB1, 0x53D2, 0x3B92, 0x3392, 0x2392, 0x2BB3, 
  0x6BB2, 0x5B91, 0x5BB2, 0x4B92, 0x4BB2, 0x4392, 0x43B2, 0x3B92, 
  0x3B92, 0x3B92, 0x4392, 0x3B92, 0x4392, 0x3B92, 0x4393, 0x4392, 
  0x4BB2, 0x5392, 0x5BB2, 0x5392, 0x53B2, 0x5BB2, 0x6BD2, 0x6BD2, 
  0x6BD2, 0x5BD2, 0x53D3, 0x43D2, 0x43D3, 0x43D2, 0x4BD3, 0x4BD2, 
  0x4BD3, 0x4BD2, 0x53F3, 0x53F3, 0x53F3, 0x53F3, 0x5C13, 0x5BF3, 
  0x6413, 0x5C12, 0x6413, 0x6413, 0x5C13, 0x5413, 0x5C33, 0x6413, 
  0x6C33, 0x6412, 0x6413, 0x63F2, 0x6C13, 0x63F2, 0x6C13, 0x73F2, 
  0x7412, 0x6C12, 0x6C13, 0x6C13, 0x6C33, 0x6433, 0x6C33, 0x6C33, 
  0x6C33, 0x6C33, 0x7433, 0x6C33, 0x7433, 0x7432, 0x7C33, 0x7412, 
  0x7C12, 0x83F2, 0x8412, 0x8BF1, 0x8412, 0x6BF2, 0x73F2, 0x73F2, 
  0x7BF2, 0x73D1, 0x73D2, 0x7BD1, 0x93D1, 0xB3AF, 0xDBCE, 0xCBAE, 
  0xB3D0, 0xA3D0, 0xA3D1, 0x8BD1, 0x9BF1, 0xB3F0, 0xBBF1, 0xB3F1, 
  0xAC11, 0xA411, 0xBC11, 0xD3EF, 0xDBEF, 0xB3F0, 0xA3D1, 0xB3AF, 
  0xC38F, 0xBB6E, 0xC36E, 0xD36D, 0xE36C, 0xEB6C, 0xE38D, 0xC38E, 
  0x9B90, 0x8390, 0x83B1, 0x6391, 0x4B92, 0x5391, 0x6BB2, 0x73B1, 
  0x73D2, 0x63D1, 0x53D2, 0x43B2, 0x33B3, 0x2BB2, 0x3BD3, 0x53F2, 
  0x6370, 0x63B2, 0x5391, 0x53B2, 0x4B91, 0x4BB2, 0x4392, 0x43B2, 
  0x4392, 0x43B2, 0x3B92, 0x4392, 0x3B92, 0x4392, 0x4392, 0x4392, 
  0x4392, 0x5BB2, 0x5BB2, 0x53B2, 0x4BB2, 0x53D2, 0x5BD2, 0x6BD2, 
  0x6BD2, 0x6BF2, 0x53D2, 0x4BD3, 0x43D2, 0x4BD3, 0x43D2, 0x4BD3, 
  0x4BD2, 0x53F3, 0x4BF2, 0x53F3, 0x4BF2, 0x5C13, 0x5BF2, 0x5C13, 
  0x5C13, 0x5C13, 0x5413, 0x5C33, 0x5C13, 0x6433, 0x5C13, 0x6433, 
  0x6412, 0x6413, 0x63F2, 0x6413, 0x63F2, 0x6C13, 0x63F2, 0x6C12, 
  0x6BF2, 0x7413, 0x6412, 0x6C33, 0x6C33, 0x6C33, 0x6433, 0x6C33, 
  0x6433, 0x6C33, 0x6C33, 0x7433, 0x6C33, 0x6C33, 0x6C32, 0x6C33, 
  0x7412, 0x8412, 0x7BF1, 0x83F2, 0x7BF1, 0x6BF2, 0x7BD1, 0x83D1, 
  0x73D1, 0x6BD2, 0x6BB1, 0x83B1, 0xA3AF, 0xC3AF, 0xC3AE, 0xB3B0, 
  0x9BB0, 0xABD0, 0x9BB0, 0x93D1, 0xB3D0, 0xC3D0, 0xBBF0, 0xAC11, 
  0x9BF1, 0xB411, 0xBC10, 0xC411, 0xABF1, 0x9BF1, 0xB3CF, 0xBBCF, 
  0xA38F, 0xB38F, 0xB36E, 0xC36E, 0xC36D, 0xBB8E, 0xA38F, 0x93B0, 
  0x6B91, 0x5B91, 0x5B91, 0x73B1, 0x7BB0, 0x9BD1, 0x93D0, 0x83F1, 
  0x6BD1, 0x63D2, 0x53D1, 0x5BD2, 0x63D1, 0x73F2, 0x7BF1, 0x8C12, 
  0x4A2A, 0x6B90, 0x63D2, 0x5BB1, 0x63D2, 0x53B2, 0x4BB3, 0x43B2, 
  0x4BD3, 0x43B2, 0x43B3, 0x43B2, 0x43B3, 0x4392, 0x4BB3, 0x4B92, 
  0x53B3, 0x5BB2, 0x5BD2, 0x53B2, 0x53D3, 0x53D2, 0x5BD2, 0x6BD2, 
  0x6BF2, 0x63D2, 0x5BF3, 0x43D2, 0x4BF3, 0x43D3, 0x4BF3, 0x4BD2, 
  0x53F3, 0x4BF3, 0x53F3, 0x4BF3, 0x5413, 0x5C13, 0x6413, 0x5C13, 
  0x5C33, 0x5413, 0x5C33, 0x5C33, 0x6433, 0x6433, 0x6433, 0x6433, 
  0x6433, 0x6413, 0x6C33, 0x6413, 0x6C13, 0x6C13, 0x6C13, 0x6412, 
  0x7413, 0x7412, 0x6C33, 0x6C33, 0x7453, 0x7453, 0x6C54, 0x6C33, 
  0x6C54, 0x6C33, 0x7453, 0x7C32, 0x7453, 0x6C33, 0x6C53, 0x6C33, 
  0x7433, 0x7C12, 0x7C12, 0x7BF2, 0x7C12, 0x7BF2, 0x93F2, 0x7BD1, 
  0x73F2, 0x73D1, 0x83D1, 0x9BB0, 0xC3AF, 0xC38E, 0xABB0, 0x9BB0, 
  0xB3D0, 0xB3AF, 0xA3D1, 0xA3D0, 0xB3D0, 0xB3D0, 0xA411, 0x93F1, 
  0xAC12, 0xA411, 0x9C32, 0x8C12, 0x8C12, 0x9BF1, 0xA3F1, 0x93D1, 
  0x9BD1, 0xAB8F, 0xABB0, 0xAB8F, 0xB3B0, 0x83B0, 0x73B1, 0x6391, 
  0x6BB2, 0x7BB1, 0xA3D1, 0xBBCF, 0xBBD0, 0xB3CF, 0xB3F0, 0xB3EF, 
  0xC410, 0xBBF0, 0xBC10, 0xBC0F, 0xB431, 0x9C11, 0x8C32, 0x7C12, 
  0x29A8, 0x4A4B, 0x73B1, 0x6BD2, 0x6BB1, 0x53D2, 0x43B2, 0x43D2, 
  0x43B2, 0x43D2, 0x43B2, 0x43B3, 0x43B2, 0x4BB2, 0x4BB2, 0x4BB3, 
  0x53B2, 0x5BD2, 0x5BB2, 0x63D2, 0x53B2, 0x53D2, 0x53D2, 0x63D2, 
  0x63D2, 0x63F2, 0x53D2, 0x4BD3, 0x43D2, 0x4BD3, 0x43D2, 0x4BD3, 
  0x4BD2, 0x53F3, 0x4BF2, 0x53F3, 0x4BF2, 0x5413, 0x5C13, 0x5C13, 
  0x5413, 0x5413, 0x5413, 0x6433, 0x5C33, 0x6433, 0x6433, 0x6433, 
  0x5C33, 0x6433, 0x6413, 0x6433, 0x6412, 0x6413, 0x6C12, 0x6C33, 
  0x6C12, 0x7C32, 0x6C33, 0x6C53, 0x6C53, 0x7453, 0x6C53, 0x6C54, 
  0x6C53, 0x7453, 0x7452, 0x7C53, 0x6C33, 0x6C53, 0x6C33, 0x6C33, 
  0x6412, 0x7412, 0x7BF2, 0x7C12, 0x73F2, 0x8BF2, 0x8BF1, 0x73F2, 
  0x6BD2, 0x8BD1, 0xA3B0, 0xBBAF, 0xC3AE, 0xB3AF, 0x9BB0, 0xABB0, 
  0xC38E, 0xCBAE, 0xB3AF, 0xABD0, 0xB3CF, 0xA3F1, 0x9BF1, 0x9C11, 
  0x8C11, 0x8C32, 0x7412, 0x7C32, 0x8C11, 0x8C12, 0x8BF1, 0x93D1, 
  0x9BB0, 0xA3B0, 0x93B0, 0x93D1, 0x83B0, 0x7BB1, 0x7BB1, 0x8BD1, 
  0x8BD1, 0x93D1, 0xA3D0, 0xD3EF, 0xDC0E, 0xE40E, 0xD40E, 0xC42F, 
  0x9C10, 0x8411, 0x63F1, 0x4BF2, 0x33D2, 0x43F3, 0x53F2, 0x5C13, 
  0x31A8, 0x31A8, 0x5ACD, 0x73D2, 0x73D2, 0x5BD2, 0x4BD3, 0x43D2, 
  0x4BD3, 0x4BD2, 0x4BD3, 0x43D2, 0x4BD3, 0x53D2, 0x53D3, 0x4BD2, 
  0x63D2, 0x63D2, 0x6BF2, 0x6BD2, 0x63D2, 0x53D2, 0x5BF3, 0x5BD2, 
  0x63F3, 0x6BF2, 0x5BF3, 0x4BD2, 0x4BF3, 0x4BD2, 0x4BF3, 0x4BD2, 
  0x53F3, 0x4BD2, 0x53F3, 0x4BF3, 0x53F3, 0x53F3, 0x5C13, 0x5413, 
  0x5433, 0x5413, 0x5C34, 0x5C33, 0x6453, 0x6433, 0x6454, 0x6433, 
  0x6454, 0x6433, 0x6C53, 0x6C33, 0x6C33, 0x6433, 0x7433, 0x7432, 
  0x7C33, 0x8432, 0x7C53, 0x7453, 0x7C73, 0x7473, 0x7C74, 0x6C54, 
  0x6C74, 0x7453, 0x7C73, 0x7453, 0x7473, 0x6C53, 0x6C54, 0x6C33, 
  0x6C33, 0x7412, 0x8432, 0x7412, 0x8C12, 0x8C11, 0x7C33, 0x7412, 
  0x9412, 0xABF1, 0xBBF0, 0xC3CF, 0xCBCF, 0xB3AF, 0xB3D0, 0xC3AF, 
  0xCBAF, 0xCBAE, 0xBBD0, 0xBBCF, 0xB3F0, 0x9BF1, 0x8C12, 0x7C12, 
  0x8432, 0x7432, 0x7433, 0x8412, 0x8C32, 0x8412, 0x9412, 0xA3D0, 
  0xB3D0, 0xA3D0, 0x93D1, 0x7BD1, 0x7BD1, 0x8BD1, 0x93F2, 0x83D1, 
  0x83F2, 0x7BF1, 0x83F2, 0x73F1, 0x63F2, 0x4BD2, 0x43F3, 0x3BD3, 
  0x3BF3, 0x43F2, 0x6413, 0x8411, 0xAC31, 0xCC4F, 0xE470, 0xDC6F, 
  0x424A, 0x31E9, 0x31C8, 0x6B6F, 0x73D1, 0x63D2, 0x4BD2, 0x4BD2, 
  0x4BD2, 0x4BD3, 0x4BD2, 0x4BD2, 0x4BD2, 0x5BD2, 0x53D2, 0x5BD2, 
  0x73D2, 0x6BF2, 0x5BD2, 0x6BD2, 0x53D2, 0x53D3, 0x5BD2, 0x6BF2, 
  0x5BD2, 0x63F2, 0x5BD2, 0x53D2, 0x4BD2, 0x4BD3, 0x43D2, 0x4BD2, 
  0x4BD2, 0x53D3, 0x4BD2, 0x4BF3, 0x4BF2, 0x5413, 0x5413, 0x5433, 
  0x5413, 0x5434, 0x5433, 0x5C54, 0x6433, 0x6454, 0x5C33, 0x6454, 
  0x6433, 0x6C53, 0x6C33, 0x6C53, 0x6C33, 0x7433, 0x7432, 0x8453, 
  0x8432, 0x8C53, 0x7C52, 0x7C73, 0x7C53, 0x7C74, 0x7473, 0x7474, 
  0x6C53, 0x7473, 0x7453, 0x7473, 0x6C53, 0x7473, 0x6C53, 0x6C53, 
  0x6C32, 0x7433, 0x7412, 0x8C32, 0x9411, 0x7C33, 0x7412, 0x8C32, 
  0xA411, 0xB411, 0xBBF0, 0xCBF0, 0xDBCE, 0xCBCF, 0xB3AF, 0xB3AF, 
  0xBBAF, 0xC3CF, 0xBBAF, 0xB3D0, 0x8BF1, 0x7412, 0x6BF2, 0x7C12, 
  0x7412, 0x7433, 0x7412, 0x7C32, 0x7412, 0x8C12, 0x9BF1, 0xBBF0, 
  0xB3D0, 0x93F1, 0x7BD1, 0x73F2, 0x7BD1, 0x83F2, 0x63D1, 0x53F2, 
  0x3BD2, 0x3BD3, 0x33D2, 0x3BD3, 0x3BD2, 0x4BF3, 0x53F2, 0x6C12, 
  0x7C12, 0x9C32, 0xB431, 0xBC51, 0xB450, 0xB471, 0xCC90, 0xECD0, 
  0x5B4F, 0x3A6B, 0x31E9, 0x422A, 0x73D2, 0x63F2, 0x53F3, 0x4BD2, 
  0x53F3, 0x53F2, 0x53F3, 0x4BF2, 0x5BF3, 0x63D2, 0x6BF3, 0x6BF2, 
  0x7BF2, 0x63F2, 0x63F3, 0x63F2, 0x5BF3, 0x5BF2, 0x63F3, 0x63F2, 
  0x63F3, 0x5BF2, 0x63F3, 0x53D2, 0x4BF3, 0x4BD2, 0x4BF3, 0x4BD2, 
  0x53F3, 0x4BD2, 0x4BF3, 0x4BF2, 0x4C13, 0x4BF3, 0x5413, 0x5413, 
  0x5434, 0x5433, 0x5454, 0x5C33, 0x6454, 0x6453, 0x6454, 0x6453, 
  0x6C54, 0x6C53, 0x7453, 0x7453, 0x7C53, 0x7C53, 0x8C53, 0x8C52, 
  0x9C73, 0x8C53, 0x8C73, 0x8473, 0x8C93, 0x8473, 0x7494, 0x7473, 
  0x7474, 0x7474, 0x7474, 0x6C74, 0x7474, 0x7473, 0x7474, 0x6C53, 
  0x7453, 0x7432, 0x8C32, 0x9432, 0x8453, 0x7C33, 0x8453, 0x9C32, 
  0xBC32, 0xC431, 0xCC31, 0xD40F, 0xDC0F, 0xB3F0, 0xA3F1, 0xABD0, 
  0xBBD0, 0xB3D0, 0x93F1, 0x73F2, 0x6C13, 0x6BF2, 0x6C13, 0x6C12, 
  0x6C33, 0x6413, 0x6C33, 0x6C32, 0x8C32, 0xA411, 0xB411, 0x9BF1, 
  0x7BF2, 0x63F2, 0x63F2, 0x5BF2, 0x5BF3, 0x43D2, 0x3BF3, 0x33D3, 
  0x3BF3, 0x3BF3, 0x4413, 0x4BF3, 0x5413, 0x5C13, 0x6C33, 0x6C32, 
  0x6C33, 0x6433, 0x6433, 0x4C33, 0x4434, 0x4433, 0x5454, 0x5433, 
  0x2166, 0x21A8, 0x29C8, 0x29A8, 0x4A8B, 0x63F2, 0x4BD2, 0x53F3, 
  0x53F2, 0x5BF2, 0x53F2, 0x5BF3, 0x63F2, 0x73F2, 0x6BF2, 0x73F2, 
  0x73F2, 0x63F2, 0x5BF2, 0x6413, 0x53F2, 0x5BF3, 0x63F2, 0x6413, 
  0x5BF2, 0x6412, 0x5BF2, 0x53F3, 0x4BF2, 0x4BF2, 0x4BD2, 0x4BF3, 
  0x4BD2, 0x53F2, 0x4BF2, 0x4BF3, 0x43F2, 0x4C13, 0x5413, 0x5C33, 
  0x5433, 0x5454, 0x5433, 0x5C54, 0x5C33, 0x6454, 0x6453, 0x6454, 
  0x6C53, 0x7473, 0x7453, 0x8473, 0x7C52, 0x8C73, 0x8C53, 0x9473, 
  0x9C52, 0x9473, 0x8C73, 0x8C93, 0x8C73, 0x8C93, 0x7493, 0x7494, 
  0x6C74, 0x6C74, 0x7473, 0x7474, 0x6C73, 0x7474, 0x6C53, 0x7453, 
  0x7C32, 0x8C32, 0x8C32, 0x8453, 0x7432, 0x8453, 0x9C52, 0xBC52, 
  0xB451, 0xBC52, 0xBC31, 0xAC32, 0x9411, 0xA3F1, 0xB3D0, 0xB3F0, 
  0x93F1, 0x73F2, 0x63F2, 0x5C13, 0x5BF2, 0x6413, 0x5C12, 0x5C13, 
  0x5C12, 0x5C33, 0x6C12, 0x8C32, 0xA411, 0x9C12, 0x7BF2, 0x5BF3, 
  0x4BD2, 0x4BF3, 0x43D2, 0x3BF3, 0x2BD2, 0x33F3, 0x33D3, 0x3BF3, 
  0x3BF3, 0x4413, 0x43F3, 0x4C13, 0x43F3, 0x4413, 0x3BF3, 0x4414, 
  0x3C13, 0x4414, 0x3413, 0x3414, 0x3413, 0x3434, 0x3414, 0x3434, 
  0x2987, 0x1946, 0x2988, 0x29A8, 0x31E9, 0x4B0E, 0x5C13, 0x53F2, 
  0x5BF3, 0x5BF2, 0x6413, 0x63F2, 0x7412, 0x6BF2, 0x6C13, 0x73F2, 
  0x7413, 0x5BF2, 0x6413, 0x5C13, 0x5C13, 0x5C13, 0x6413, 0x6C13, 
  0x6C13, 0x6BF2, 0x6413, 0x53F3, 0x5413, 0x53F2, 0x5413, 0x4BF3, 
  0x5413, 0x53F2, 0x5413, 0x4BF3, 0x5413, 0x4C13, 0x5434, 0x5C33, 
  0x5C54, 0x5454, 0x5454, 0x5C54, 0x6474, 0x6454, 0x6C74, 0x6474, 
  0x7474, 0x7C73, 0x8494, 0x8473, 0x8C93, 0x8C73, 0x9C93, 0x9C73, 
  0xAC93, 0x9473, 0x9C93, 0x8C93, 0x9493, 0x8C93, 0x7C94, 0x7494, 
  0x6C94, 0x6474, 0x7494, 0x7494, 0x7494, 0x6C73, 0x7474, 0x7C53, 
  0x9452, 0x8C32, 0x8453, 0x7453, 0x7C73, 0x9452, 0xAC72, 0xAC72, 
  0xAC72, 0xAC72, 0xA473, 0x9C52, 0xA432, 0xAC11, 0x9412, 0x6C12, 
  0x5C13, 0x4BF3, 0x5413, 0x5413, 0x5C13, 0x4C13, 0x4C13, 0x4C13, 
  0x5433, 0x6C32, 0x9432, 0x9C11, 0x8432, 0x5C13, 0x5413, 0x4BF3, 
  0x43F3, 0x3BF3, 0x33F3, 0x2BF3, 0x33F3, 0x33F3, 0x33F4, 0x33F3, 
  0x3414, 0x33F3, 0x3C14, 0x3414, 0x3414, 0x3413, 0x3414, 0x3414, 
  0x3C34, 0x3414, 0x3C34, 0x3434, 0x3C34, 0x3C34, 0x3C55, 0x3C34, 
  0x29A7, 0x2987, 0x2987, 0x29A8, 0x29A8, 0x424A, 0x534F, 0x6413, 
  0x5BF2, 0x63F3, 0x63F2, 0x7412, 0x73F2, 0x6C13, 0x6BF2, 0x7C12, 
  0x6C12, 0x6413, 0x5413, 0x5C13, 0x5C13, 0x5C13, 0x5C13, 0x6C13, 
  0x6C12, 0x6C13, 0x6412, 0x5C13, 0x5413, 0x5C13, 0x4BF2, 0x5413, 
  0x4BF2, 0x5413, 0x53F2, 0x5413, 0x4C13, 0x5413, 0x5413, 0x5C34, 
  0x5C33, 0x5C54, 0x5454, 0x5C74, 0x5C54, 0x6C74, 0x6C74, 0x7494, 
  0x7473, 0x8494, 0x7C93, 0x8494, 0x8473, 0x9493, 0x9C73, 0xA493, 
  0xAC72, 0x9C93, 0x9473, 0x9493, 0x9473, 0x8C93, 0x7494, 0x7494, 
  0x6C74, 0x6C94, 0x6C93, 0x7494, 0x7473, 0x7474, 0x7C52, 0x9452, 
  0x8C32, 0x8453, 0x8C32, 0x8C53, 0x8C52, 0x9C53, 0x9C52, 0xA473, 
  0xA472, 0x9C73, 0x8C52, 0x8C53, 0x8432, 0x6C33, 0x4C13, 0x4413, 
  0x43F3, 0x4C13, 0x4BF2, 0x5413, 0x43F3, 0x4413, 0x4413, 0x5433, 
  0x6C12, 0x8C32, 0x8412, 0x6433, 0x5413, 0x5413, 0x43F3, 0x3BF3, 
  0x2BF3, 0x33F3, 0x2BD3, 0x2BF3, 0x2BF3, 0x33F4, 0x2BF3, 0x3414, 
  0x2BF3, 0x3414, 0x3413, 0x3414, 0x3414, 0x3434, 0x3414, 0x3C34, 
  0x3434, 0x3C34, 0x3C34, 0x3C54, 0x3C34, 0x4455, 0x3C34, 0x4454, 
  0x4A8B, 0x2167, 0x31A7, 0x29A7, 0x2987, 0x29C8, 0x320A, 0x534F, 
  0x6413, 0x63F2, 0x7413, 0x73F2, 0x7412, 0x7412, 0x7C12, 0x6C12, 
  0x6433, 0x5C13, 0x5C34, 0x5C13, 0x6433, 0x5C13, 0x6433, 0x6C32, 
  0x7433, 0x6C33, 0x6C33, 0x6413, 0x6433, 0x5C13, 0x5C33, 0x5413, 
  0x5C13, 0x5C13, 0x5C33, 0x5413, 0x5C34, 0x5433, 0x5C54, 0x6453, 
  0x6454, 0x5C54, 0x5C75, 0x5C74, 0x6C95, 0x6C74, 0x7495, 0x7494, 
  0x7CB4, 0x7CB4, 0x7CB4, 0x7CB4, 0x8CB4, 0x9493, 0xA4B3, 0xA493, 
  0xACB3, 0xA493, 0xAC93, 0x9C93, 0x9C93, 0x8C93, 0x7494, 0x6C94, 
  0x7494, 0x7494, 0x8494, 0x7C73, 0x7C94, 0x8473, 0x9473, 0x8C73, 
  0x8C53, 0xAC31, 0xB452, 0xA452, 0x9C53, 0x9452, 0x9473, 0x8C73, 
  0x8494, 0x7473, 0x7474, 0x6C53, 0x6454, 0x4C13, 0x4414, 0x4413, 
  0x4C13, 0x4C13, 0x4C14, 0x3C13, 0x4414, 0x4413, 0x5C33, 0x7432, 
  0x8C32, 0x6C32, 0x6433, 0x5413, 0x4C14, 0x3BF3, 0x3414, 0x2BF3, 
  0x3414, 0x2BF3, 0x3414, 0x2BF3, 0x3414, 0x3414, 0x3414, 0x3414, 
  0x3C34, 0x3414, 0x3C34, 0x3C34, 0x3C35, 0x3C34, 0x3C55, 0x3C34, 
  0x4455, 0x3C54, 0x4455, 0x4454, 0x4455, 0x4455, 0x4475, 0x4474, 
  0x532D, 0x532E, 0x31E8, 0x31A7, 0x29E8, 0x2187, 0x29A8, 0x3A2A, 
  0x5B90, 0x6C12, 0x73F1, 0x7C12, 0x73F1, 0x7C12, 0x7412, 0x6C33, 
  0x5C12, 0x6433, 0x6413, 0x6433, 0x5C13, 0x6433, 0x6433, 0x7433, 
  0x6C32, 0x6C33, 0x6433, 0x6C33, 0x6432, 0x6433, 0x6433, 0x6433, 
  0x6412, 0x6433, 0x5C33, 0x5C33, 0x5433, 0x5C54, 0x6433, 0x6454, 
  0x6453, 0x6474, 0x5C74, 0x6475, 0x6474, 0x6C94, 0x6C94, 0x74B4, 
  0x74B4, 0x7CD4, 0x7CB4, 0x7CD4, 0x84B3, 0x9CB3, 0xA493, 0xA4B3, 
  0xA493, 0xAC93, 0xAC72, 0xAC93, 0xA472, 0x9493, 0x7493, 0x7494, 
  0x6C73, 0x8473, 0x8473, 0x7C73, 0x7473, 0x8473, 0x8452, 0x8C53, 
  0xA431, 0xBC31, 0xA431, 0x9453, 0x7C53, 0x7473, 0x6C53, 0x6C74, 
  0x6453, 0x6C74, 0x6453, 0x5C54, 0x4413, 0x4434, 0x4413, 0x4C14, 
  0x4413, 0x3C14, 0x3C13, 0x4414, 0x4C13, 0x6433, 0x8C32, 0x9432, 
  0x6C32, 0x5433, 0x4C13, 0x3C14, 0x33F3, 0x3414, 0x33F3, 0x3414, 
  0x2BF3, 0x3414, 0x3413, 0x3414, 0x3413, 0x3434, 0x3414, 0x3C34, 
  0x3C34, 0x3C34, 0x3C34, 0x4455, 0x3C34, 0x4455, 0x4454, 0x4455, 
  0x4454, 0x4455, 0x4454, 0x4C75, 0x4454, 0x4C75, 0x4474, 0x4C95, 
  0x1926, 0x2167, 0x42AC, 0x2187, 0x29A8, 0x29C8, 0x3A0A, 0x31E9, 
  0x3A0A, 0x6390, 0x7412, 0x73F2, 0x7C12, 0x7412, 0x7433, 0x6413, 
  0x6433, 0x6433, 0x6C33, 0x6433, 0x6C33, 0x6433, 0x7453, 0x7432, 
  0x7453, 0x6C33, 0x7453, 0x6C33, 0x6C53, 0x6C33, 0x6C54, 0x6433, 
  0x6C53, 0x6433, 0x6C54, 0x6433, 0x6454, 0x6453, 0x6C74, 0x6454, 
  0x6C74, 0x6474, 0x6495, 0x6494, 0x6C95, 0x6C94, 0x74D5, 0x7CD4, 
  0x7CF5, 0x74D4, 0x84D5, 0x7CD4, 0x84D4, 0x9CB3, 0xB4B3, 0xA4B3, 
  0xACB3, 0xB492, 0xC492, 0xBC72, 0xAC93, 0x8C93, 0x7C94, 0x7473, 
  0x7C94, 0x7C73, 0x7C74, 0x6C73, 0x7C73, 0x7C53, 0x8C53, 0x9C32, 
  0xAC32, 0x9432, 0x7C53, 0x6453, 0x6454, 0x5C54, 0x6474, 0x6454, 
  0x6474, 0x5C54, 0x5454, 0x4C34, 0x4C34, 0x4413, 0x4434, 0x3C13, 
  0x3C14, 0x3C13, 0x4C34, 0x5433, 0x7453, 0x8C32, 0x8C53, 0x6433, 
  0x4C34, 0x3C13, 0x3C14, 0x3414, 0x3C14, 0x3414, 0x3C34, 0x3414, 
  0x3C34, 0x3434, 0x3C34, 0x3C34, 0x3C34, 0x3C34, 0x4455, 0x3C34, 
  0x4455, 0x4454, 0x4455, 0x4455, 0x4C55, 0x4455, 0x4C75, 0x4C55, 
  0x4C75, 0x4C75, 0x4C75, 0x4C75, 0x4C95, 0x4C95, 0x5496, 0x4C95, 
  0x1905, 0x18C4, 0x2146, 0x1946, 0x10C4, 0x2966, 0x3A4A, 0x29E9, 
  0x1946, 0x29A8, 0x530E, 0x6BF2, 0x73F2, 0x7412, 0x6BF2, 0x6C12, 
  0x6412, 0x6C33, 0x6C32, 0x7453, 0x6C33, 0x7453, 0x6C52, 0x7453, 
  0x6C52, 0x7453, 0x6C52, 0x6C53, 0x6C53, 0x7453, 0x6C53, 0x6C53, 
  0x6C33, 0x6C53, 0x6433, 0x6453, 0x6453, 0x6C54, 0x6453, 0x6C74, 
  0x6474, 0x6C94, 0x6494, 0x6495, 0x6C94, 0x74B5, 0x74B4, 0x7CD4, 
  0x7CD4, 0x7CF5, 0x7CD4, 0x84F4, 0x84D4, 0x9CD4, 0xB492, 0xB4B3, 
  0xAC92, 0xC492, 0xBC71, 0xB492, 0x9473, 0x8C93, 0x7473, 0x7473, 
  0x7453, 0x6C74, 0x6453, 0x7473, 0x7C52, 0x8453, 0x8C32, 0x9452, 
  0x7C53, 0x6454, 0x5C33, 0x5C54, 0x5C33, 0x6454, 0x5C53, 0x5454, 
  0x4C34, 0x4C54, 0x4433, 0x4C34, 0x4413, 0x4434, 0x3C13, 0x3C34, 
  0x4413, 0x4C34, 0x5C33, 0x7C53, 0x8432, 0x6C53, 0x4C33, 0x3C34, 
  0x3413, 0x3C34, 0x3413, 0x3C34, 0x3414, 0x3C34, 0x3434, 0x3C34, 
  0x3C34, 0x3C34, 0x3C34, 0x3C54, 0x3C34, 0x4455, 0x3C54, 0x4455, 
  0x4454, 0x4C55, 0x4454, 0x4C75, 0x4454, 0x4C75, 0x4474, 0x4C75, 
  0x4C75, 0x4C95, 0x4C75, 0x4C95, 0x4C95, 0x54B6, 0x4C95, 0x54B5, 
  0x2146, 0x10A4, 0x2105, 0x1905, 0x1905, 0x2987, 0x31E9, 0x2167, 
  0x2988, 0x2146, 0x2967, 0x3A2A, 0x6BB1, 0x7412, 0x7412, 0x7BF1, 
  0x7C12, 0x7C12, 0x8432, 0x7C32, 0x7C53, 0x7453, 0x7473, 0x7453, 
  0x7473, 0x7453, 0x7473, 0x7453, 0x7473, 0x7453, 0x7473, 0x6C53, 
  0x7454, 0x6C53, 0x6C74, 0x6453, 0x6C74, 0x6C54, 0x6C74, 0x6C74, 
  0x6C94, 0x6C94, 0x6CB5, 0x64B5, 0x74D5, 0x74B4, 0x7CD5, 0x74F4, 
  0x84F5, 0x7CF5, 0x7D15, 0x84F4, 0x94F5, 0x94D4, 0xACB3, 0xAC92, 
  0x5B2E, 0x9C11, 0xBC93, 0x9C93, 0x9493, 0x9473, 0x8473, 0x6C73, 
  0x6C74, 0x7453, 0x7473, 0x7C52, 0x8C53, 0x8C52, 0x9473, 0x7C73, 
  0x6C74, 0x5C53, 0x6454, 0x5C53, 0x5C54, 0x5434, 0x5454, 0x4C54, 
  0x5454, 0x5454, 0x5C54, 0x4C33, 0x4454, 0x3C34, 0x4434, 0x4433, 
  0x5454, 0x6433, 0x7453, 0x6433, 0x5454, 0x3C34, 0x3C34, 0x3C34, 
  0x3C54, 0x3C34, 0x3C54, 0x3C34, 0x3C54, 0x3C34, 0x4455, 0x3C54, 
  0x4455, 0x4455, 0x4455, 0x4455, 0x4C75, 0x4455, 0x4C75, 0x4475, 
  0x4C75, 0x4C75, 0x4C95, 0x4C75, 0x5495, 0x4C95, 0x5496, 0x4C95, 
  0x5496, 0x5495, 0x54B6, 0x54B5, 0x54D6, 0x54B5, 0x5CD6, 0x54D5, 
  0x3186, 0x18E4, 0x18E4, 0x2925, 0x1905, 0x1905, 0x10C4, 0x2946, 
  0x2187, 0x29A8, 0x2987, 0x2147, 0x29A8, 0x5B4F, 0x7412, 0x7C12, 
  0x83F1, 0x8C12, 0x8432, 0x8452, 0x7C52, 0x7C73, 0x7473, 0x7473, 
  0x7473, 0x7473, 0x7473, 0x7473, 0x7472, 0x7473, 0x7453, 0x7473, 
  0x6C53, 0x6C73, 0x6C53, 0x6C74, 0x6453, 0x6C74, 0x6C53, 0x6C74, 
  0x6C74, 0x6C94, 0x6494, 0x6CB5, 0x64B4, 0x74D5, 0x7CD4, 0x7CF5, 
  0x7CF4, 0x8515, 0x7CF4, 0x84F5, 0x8CD4, 0x9CD4, 0xA4B3, 0x8BD0, 
  0x1189, 0x4ACD, 0xA472, 0x9C93, 0x9472, 0x9473, 0x8452, 0x6C73, 
  0x6C53, 0x9452, 0xA451, 0xA452, 0x8452, 0x8C72, 0x8472, 0x7473, 
  0x6C53, 0x6453, 0x5C53, 0x5C54, 0x5453, 0x5454, 0x5453, 0x6C74, 
  0x6453, 0x6474, 0x5C53, 0x4C54, 0x4433, 0x4434, 0x4C33, 0x5C54, 
  0x5C33, 0x5C53, 0x4C33, 0x4454, 0x3C34, 0x4454, 0x3C34, 0x4454, 
  0x3C34, 0x4454, 0x3C34, 0x4454, 0x3C34, 0x4454, 0x4454, 0x4C55, 
  0x4454, 0x4C55, 0x4454, 0x4C75, 0x4474, 0x4C75, 0x4C75, 0x4C95, 
  0x4C75, 0x4C95, 0x4C75, 0x5495, 0x4C95, 0x5495, 0x5495, 0x54B6, 
  0x5495, 0x54B6, 0x54B5, 0x5CD6, 0x54B5, 0x5CD6, 0x54D5, 0x5CF6, 
  0x39A7, 0x1905, 0x2946, 0x2946, 0x2967, 0x2125, 0x18C4, 0x2146, 
  0x29A8, 0x29C9, 0x320A, 0x2167, 0x2146, 0x31E9, 0x6BF2, 0x7432, 
  0x7C32, 0x7432, 0x7C53, 0x7453, 0x7C73, 0x7C73, 0x7C94, 0x7493, 
  0x7C94, 0x7493, 0x7C94, 0x7473, 0x7C93, 0x7473, 0x7C73, 0x7473, 
  0x7473, 0x6C73, 0x6C74, 0x6C74, 0x6C74, 0x6C74, 0x6C74, 0x6C74, 
  0x6C95, 0x6C94, 0x6CB5, 0x64B5, 0x6CD5, 0x74D4, 0x7CF5, 0x7CF4, 
  0x8515, 0x84F4, 0x8515, 0x84F4, 0x94F4, 0x9CD4, 0xACD4, 0x632E, 
  0x11AA, 0x19CA, 0x83F1, 0x9493, 0x8C93, 0x8C73, 0x8C73, 0x8C52, 
  0x9C72, 0x9C52, 0x9472, 0x8452, 0x7C73, 0x8472, 0x8473, 0x7473, 
  0x7473, 0x6453, 0x6474, 0x6453, 0x6474, 0x6473, 0x6C74, 0x7C73, 
  0x7493, 0x6C73, 0x6474, 0x5454, 0x5454, 0x5454, 0x5C54, 0x5454, 
  0x4C54, 0x3C54, 0x4455, 0x4454, 0x4454, 0x4454, 0x4455, 0x4454, 
  0x4454, 0x4454, 0x4C55, 0x4454, 0x4C75, 0x4454, 0x4C75, 0x4C75, 
  0x4C75, 0x4C75, 0x5495, 0x4C75, 0x5495, 0x4C95, 0x5496, 0x5495, 
  0x54B6, 0x5495, 0x5CB6, 0x5495, 0x5CB6, 0x54B5, 0x5CD6, 0x54B5, 
  0x5CD6, 0x54D5, 0x5CD6, 0x5CD6, 0x5CF6, 0x5CF6, 0x5D16, 0x5D16, 
  0x39A6, 0x2946, 0x1905, 0x2146, 0x3187, 0x39C8, 0x2125, 0x1926, 
  0x1967, 0x1947, 0x1946, 0x2166, 0x1967, 0x1946, 0x3A4A, 0x6C12, 
  0x6C32, 0x7453, 0x6C52, 0x7473, 0x7473, 0x7494, 0x7493, 0x7494, 
  0x7493, 0x7CB4, 0x7493, 0x7C94, 0x7C93, 0x7C93, 0x7473, 0x7C93, 
  0x7473, 0x7473, 0x6C73, 0x6C74, 0x6453, 0x6C74, 0x6473, 0x6C94, 
  0x6C94, 0x6CB5, 0x64B4, 0x6CD5, 0x6CD5, 0x74F5, 0x74F4, 0x7D15, 
  0x7CF4, 0x8D15, 0x8CF4, 0x8D14, 0x8CD4, 0xA4D4, 0xA4B3, 0x5B0E, 
  0x1A0C, 0x224D, 0x534F, 0x9473, 0x9472, 0x9C72, 0x9C51, 0x9C52, 
  0x7C52, 0x7453, 0x6C52, 0x7453, 0x7C52, 0x8473, 0x7452, 0x6C73, 
  0x6453, 0x6C73, 0x6473, 0x6C73, 0x6C73, 0x6C73, 0x7472, 0x8493, 
  0x8473, 0x7493, 0x6473, 0x6474, 0x5C53, 0x5474, 0x4C54, 0x4454, 
  0x4454, 0x4C54, 0x4454, 0x4C54, 0x4454, 0x4C75, 0x4454, 0x4C74, 
  0x4454, 0x4C75, 0x4454, 0x4C75, 0x4C74, 0x4C75, 0x4C75, 0x4C95, 
  0x4C75, 0x5495, 0x4C95, 0x5495, 0x5495, 0x54B6, 0x5495, 0x54B5, 
  0x54B5, 0x5CB6, 0x54B5, 0x5CD6, 0x54B5, 0x5CD6, 0x54D5, 0x5CD6, 
  0x5CD5, 0x5CF6, 0x5CF5, 0x5D16, 0x5CF6, 0x5D16, 0x5D15, 0x6536, 
  0x4209, 0x31A7, 0x1925, 0x18E4, 0x3187, 0x41E8, 0x3187, 0x1105, 
  0x1926, 0x1105, 0x1905, 0x2125, 0x2167, 0x1926, 0x2947, 0x3A2A, 
  0x6BD1, 0x7453, 0x7473, 0x7473, 0x7C94, 0x7493, 0x74B4, 0x74B4, 
  0x7CD4, 0x74B4, 0x7CD4, 0x7CB3, 0x84B4, 0x7C93, 0x7C94, 0x7C93, 
  0x7C94, 0x7493, 0x7494, 0x6C74, 0x6C94, 0x6474, 0x6C94, 0x6C94, 
  0x6CB5, 0x6CB4, 0x6CD5, 0x6CD5, 0x74F5, 0x74F5, 0x7D15, 0x7D14, 
  0x8535, 0x8D14, 0xA514, 0x9514, 0x9CF5, 0xA4D4, 0x9CB4, 0x4B2F, 
  0x32F0, 0x3351, 0x3B31, 0x73F1, 0x9C73, 0xA452, 0x9C72, 0x8C72, 
  0x7C73, 0x7453, 0x7C73, 0x7C52, 0x8473, 0x8472, 0x7C73, 0x6C73, 
  0x6C74, 0x7473, 0x7493, 0x7C73, 0x8493, 0x7C73, 0x8C93, 0x9492, 
  0xA493, 0x8C93, 0x7494, 0x6474, 0x5C74, 0x4C74, 0x4C75, 0x4C54, 
  0x4C75, 0x4C74, 0x4C75, 0x4C74, 0x4C75, 0x4C75, 0x4C75, 0x4C75, 
  0x4C95, 0x4C75, 0x5495, 0x4C75, 0x5495, 0x5495, 0x5495, 0x5495, 
  0x5CB6, 0x5495, 0x5CB6, 0x54B5, 0x5CD6, 0x54B5, 0x5CD6, 0x54D5, 
  0x5CD6, 0x5CD5, 0x5CF6, 0x5CD5, 0x5CF6, 0x5CF6, 0x6516, 0x5CF6, 
  0x6516, 0x5D16, 0x6536, 0x5D16, 0x6537, 0x5D36, 0x6536, 0x5D36, 
  0x2125, 0x2987, 0x1925, 0x18C4, 0x1904, 0x3187, 0x39C7, 0x2946, 
  0x1925, 0x1105, 0x10E4, 0x1905, 0x1905, 0x2146, 0x1926, 0x2146, 
  0x3A09, 0x6BF1, 0x7473, 0x7C73, 0x7C73, 0x7C93, 0x7493, 0x74B4, 
  0x74B3, 0x7CD4, 0x74D4, 0x84D4, 0x7CB3, 0x7CB4, 0x7493, 0x7C93, 
  0x7493, 0x74B4, 0x6C94, 0x6C94, 0x6473, 0x6C94, 0x6C93, 0x6CB4, 
  0x64B4, 0x6CD5, 0x6CD5, 0x74F5, 0x6CF4, 0x7515, 0x7D14, 0x8515, 
  0x7D14, 0x8D35, 0xA4F4, 0xA514, 0x9CF4, 0x94F4, 0x5B90, 0x3310, 
  0x3392, 0x43D3, 0x3BB3, 0x4BB2, 0x8431, 0x9472, 0x9472, 0x8C72, 
  0x8452, 0x7C52, 0x8452, 0x8C72, 0x8452, 0x7C72, 0x7472, 0x7C73, 
  0x7472, 0x8473, 0x8472, 0x8C73, 0x8C72, 0x9492, 0x9C72, 0xAC92, 
  0xA492, 0x9CB3, 0x7C93, 0x6C94, 0x5474, 0x5474, 0x4C74, 0x5475, 
  0x4C74, 0x5495, 0x4C74, 0x4C95, 0x4C74, 0x4C95, 0x4C75, 0x5495, 
  0x4C74, 0x5495, 0x5495, 0x5495, 0x5495, 0x5CB5, 0x5495, 0x5CB5, 
  0x54B5, 0x5CD5, 0x54B5, 0x5CD6, 0x54D5, 0x5CF6, 0x5CD5, 0x5CF6, 
  0x5CF5, 0x5D16, 0x5CF6, 0x6516, 0x5D15, 0x6516, 0x5D16, 0x6536, 
  0x5D16, 0x6536, 0x5D36, 0x6536, 0x5D36, 0x6556, 0x6556, 0x6556, 
  0x18C4, 0x2104, 0x2967, 0x1925, 0x2125, 0x2105, 0x31A8, 0x2146, 
  0x1905, 0x10E5, 0x10C4, 0x1905, 0x2125, 0x2146, 0x2188, 0x2987, 
  0x31A8, 0x424A, 0x8432, 0x8473, 0x8493, 0x7C93, 0x7CB4, 0x74B4, 
  0x7CD4, 0x74D4, 0x7CF5, 0x7CD4, 0x84F4, 0x74D4, 0x7CD4, 0x7CB4, 
  0x74B4, 0x6CB4, 0x6CB5, 0x6C94, 0x6C94, 0x6C93, 0x6CB4, 0x6CB4, 
  0x6CD5, 0x6CD5, 0x74F5, 0x74F5, 0x7D15, 0x8D14, 0xA4F4, 0x9534, 
  0x9555, 0x9D34, 0xB514, 0xAD14, 0x9535, 0x7CD4, 0x32CE, 0x2AF0, 
  0x3B92, 0x3B92, 0x3B92, 0x330F, 0x73D0, 0x8C93, 0x9C93, 0x8C72, 
  0x8473, 0x8452, 0x8C73, 0x8472, 0x8473, 0x8472, 0x8473, 0x8472, 
  0x8C73, 0x9472, 0xA472, 0xA472, 0xA492, 0xA472, 0xB492, 0xB492, 
  0xBCB2, 0xAC92, 0x94B3, 0x74B3, 0x64B4, 0x5C94, 0x6495, 0x5C94, 
  0x5CB5, 0x5494, 0x5495, 0x5495, 0x5495, 0x5495, 0x5CB5, 0x5495, 
  0x5CB5, 0x54B5, 0x5CB6, 0x5CB5, 0x5CD6, 0x5CD5, 0x5CD6, 0x5CD5, 
  0x5CF6, 0x5CD5, 0x64F6, 0x5CF6, 0x6516, 0x5CF6, 0x6516, 0x5D16, 
  0x6536, 0x5D16, 0x6537, 0x6536, 0x6536, 0x6536, 0x6557, 0x6536, 
  0x6557, 0x6556, 0x6D57, 0x6556, 0x6D77, 0x6556, 0x6D77, 0x6576, 
  0x10A3, 0x20E4, 0x3145, 0x2986, 0x2166, 0x2126, 0x2125, 0x1925, 
  0x10C4, 0x1926, 0x08A4, 0x2146, 0x1925, 0x1926, 0x2146, 0x2987, 
  0x2987, 0x2967, 0x426A, 0x73D0, 0x8493, 0x84B4, 0x7CD3, 0x7CF4, 
  0x74D4, 0x74F5, 0x74F4, 0x7CF4, 0x74F4, 0x74F5, 0x74D4, 0x74D4, 
  0x6CD4, 0x6CD5, 0x6CB4, 0x6CB4, 0x6C93, 0x74B4, 0x64B4, 0x6CB5, 
  0x6CD4, 0x74F5, 0x74F4, 0x7D15, 0x8514, 0xACF3, 0xB4D2, 0x9D54, 
  0x9554, 0xA555, 0xA534, 0x9D55, 0x8535, 0x4BD1, 0x09AA, 0x1A4D, 
  0x2B31, 0x3B92, 0x3BD3, 0x3351, 0x4B2E, 0x8C93, 0x9C72, 0x9472, 
  0x8C52, 0x8472, 0x7C52, 0x7C72, 0x7C52, 0x8C72, 0x8C52, 0x9C72, 
  0x9C51, 0xA472, 0xA451, 0xAC72, 0xB471, 0xBC71, 0xB471, 0xC491, 
  0xCC91, 0xC492, 0xA492, 0x7CB3, 0x6C94, 0x6CB4, 0x6CB3, 0x5CB5, 
  0x5494, 0x5CB5, 0x5495, 0x5CB5, 0x5495, 0x5CB5, 0x54B5, 0x5CD5, 
  0x5CB5, 0x5CD5, 0x5CD5, 0x5CF5, 0x5CD5, 0x64F6, 0x5CF5, 0x5CF6, 
  0x5CF5, 0x6516, 0x5D15, 0x6516, 0x5D16, 0x6536, 0x5D16, 0x6536, 
  0x6536, 0x6536, 0x6536, 0x6556, 0x6536, 0x6556, 0x6556, 0x6556, 
  0x6556, 0x6D77, 0x6556, 0x6D76, 0x6576, 0x6D76, 0x6D76, 0x7596, 
  0x18C4, 0x2104, 0x2945, 0x2946, 0x2967, 0x2987, 0x3146, 0x2125, 
  0x18E5, 0x1905, 0x10E5, 0x2126, 0x3187, 0x1926, 0x2947, 0x29A8, 
  0x39E9, 0x2966, 0x2987, 0x31E9, 0x7BF1, 0x8CB4, 0x7452, 0x6411, 
  0x7CF5, 0x74F5, 0x7D15, 0x7CF4, 0x7D15, 0x7515, 0x7D15, 0x74F4, 
  0x74F5, 0x74F4, 0x74F5, 0x74D4, 0x74D4, 0x6CD4, 0x6CD5, 0x6CD5, 
  0x74F5, 0x7D14, 0x8535, 0x8D34, 0xA534, 0xC4D2, 0xBD14, 0x9D75, 
  0x9D75, 0x9575, 0x9575, 0x8575, 0x6CB4, 0x22CE, 0x09AA, 0x228E, 
  0x43B4, 0x43F4, 0x4415, 0x3BD3, 0x4330, 0x7C11, 0x9CB3, 0x8C92, 
  0x8C93, 0x8472, 0x8473, 0x8472, 0x9472, 0x9C51, 0xAC72, 0xB451, 
  0xC451, 0xCC50, 0xD470, 0xCC50, 0xCC71, 0xCC71, 0xD491, 0xD470, 
  0xE491, 0xD491, 0xC4B2, 0x94B3, 0x94D3, 0x74B4, 0x64D5, 0x5CB5, 
  0x5CD5, 0x5CB5, 0x5CD5, 0x5CD5, 0x64D6, 0x5CD5, 0x64F6, 0x5CF5, 
  0x64F6, 0x5CF5, 0x6516, 0x5CF5, 0x6516, 0x6516, 0x6536, 0x5D16, 
  0x6536, 0x6536, 0x6536, 0x6536, 0x6536, 0x6536, 0x6556, 0x6536, 
  0x6D57, 0x6556, 0x6D77, 0x6556, 0x6D77, 0x6D76, 0x6D77, 0x6D76, 
  0x6D77, 0x6D76, 0x7597, 0x6D76, 0x7597, 0x7596, 0x7D96, 0x7D96, 
  0x10A3, 0x18E4, 0x1904, 0x3166, 0x2965, 0x31A7, 0x2987, 0x2946, 
  0x1905, 0x2125, 0x18E4, 0x2946, 0x2125, 0x1905, 0x3187, 0x3166, 
  0x2167, 0x31C8, 0x31C8, 0x2167, 0x31E8, 0x7C11, 0x31E8, 0x2167, 
  0x6C11, 0x7D15, 0x7CF4, 0x8515, 0x7D14, 0x7D15, 0x7515, 0x7D15, 
  0x6D14, 0x7515, 0x6CF4, 0x74F5, 0x6CF4, 0x6CF5, 0x6CF4, 0x7514, 
  0x7D14, 0x8D34, 0x8D34, 0xA534, 0xC4F2, 0xCCF3, 0x9D75, 0x8D96, 
  0x7D75, 0x7D96, 0x7D76, 0x7D96, 0x3B90, 0x120C, 0x09CA, 0x2B31, 
  0x3BB3, 0x4C35, 0x4C55, 0x4C35, 0x3B30, 0x6390, 0x8493, 0x8C93, 
  0x7C72, 0x8472, 0x8C72, 0xA472, 0xAC51, 0xB451, 0xBC30, 0xC430, 
  0xCC0F, 0xD430, 0xDC4F, 0xDC70, 0xCC70, 0xDC70, 0xE46F, 0xDC70, 
  0xDC6F, 0xDC91, 0xC491, 0x94B3, 0x6CB4, 0x5CD5, 0x5CB5, 0x5CD5, 
  0x5CD5, 0x5CD5, 0x5CD5, 0x64F5, 0x5CD5, 0x64F6, 0x5CF5, 0x6516, 
  0x5D15, 0x6516, 0x5D15, 0x6536, 0x5D15, 0x6536, 0x6535, 0x6536, 
  0x6535, 0x6536, 0x6536, 0x6D56, 0x6556, 0x6D56, 0x6556, 0x6D77, 
  0x6556, 0x6D76, 0x6D76, 0x6D77, 0x6D76, 0x7596, 0x6D76, 0x7597, 
  0x6D76, 0x7596, 0x7576, 0x7596, 0x7596, 0x7D96, 0x7595, 0x7DB6, 
  0x10C4, 0x10C3, 0x2905, 0x41C6, 0x3986, 0x31A7, 0x428B, 0x4A6B, 
  0x2987, 0x2166, 0x2166, 0x2146, 0x2146, 0x2146, 0x4209, 0x4A49, 
  0x4A09, 0x3A2A, 0x3A0A, 0x29A8, 0x2188, 0x31E8, 0x2167, 0x10C4, 
  0x52CC, 0x84B3, 0x94F4, 0x94D4, 0x8D14, 0x8515, 0x8535, 0x7D14, 
  0x7D35, 0x7D14, 0x8515, 0x7CF4, 0x7D14, 0x7CF4, 0x8D14, 0x8514, 
  0x9D14, 0xA514, 0xBD14, 0xCCF3, 0xCD13, 0xA575, 0x85B6, 0x7DB6, 
  0x7DB7, 0x7DB6, 0x85B7, 0x6CD3, 0x226D, 0x0969, 0x1189, 0x2B31, 
  0x43F4, 0x3BD3, 0x4C35, 0x5476, 0x3351, 0x5B6F, 0x94B3, 0x8C93, 
  0x9C92, 0x9C72, 0xA472, 0xBC50, 0xCC50, 0xC430, 0xD430, 0xD40F, 
  0xDC2F, 0xD42F, 0xDC50, 0xDC50, 0xE470, 0xDC6F, 0xEC70, 0xEC6F, 
  0xE490, 0xCC91, 0xA4D3, 0x64D4, 0x64F5, 0x5CD5, 0x64F5, 0x5CF5, 
  0x64F5, 0x5CF5, 0x6516, 0x6515, 0x6516, 0x6515, 0x6536, 0x6536, 
  0x6536, 0x6535, 0x6D36, 0x6536, 0x6D56, 0x6556, 0x6D56, 0x6556, 
  0x6D76, 0x6556, 0x6D77, 0x6D76, 0x6D77, 0x6D76, 0x7597, 0x6D76, 
  0x7597, 0x6D96, 0x7597, 0x7596, 0x7597, 0x7596, 0x7D97, 0x7596, 
  0x7DB7, 0x7596, 0x7DB7, 0x7596, 0x7DB6, 0x7596, 0x7DB6, 0x7DB6, 
  0x08A3, 0x10A3, 0x20E3, 0x49C6, 0x3965, 0x3166, 0x31E8, 0x4AED, 
  0x39E8, 0x1925, 0x1125, 0x1105, 0x2167, 0x31A8, 0x31E8, 0x4A4A, 
  0x39E8, 0x31C8, 0x2187, 0x29A8, 0x21A8, 0x1946, 0x1946, 0x1926, 
  0x10E4, 0x4229, 0x8C72, 0x94F4, 0x8CF4, 0x9514, 0x8514, 0x8534, 
  0x8D14, 0x94F4, 0x94B2, 0x94D3, 0x94D3, 0x9CF3, 0xA4D3, 0xB4F3, 
  0xB4F3, 0xCCF3, 0xC4F2, 0xBD54, 0xA574, 0x95B6, 0x7DB6, 0x7DD7, 
  0x7DB6, 0x85B7, 0x7D54, 0x2AAD, 0x0169, 0x0969, 0x0989, 0x3BB3, 
  0x5476, 0x5476, 0x5496, 0x4C76, 0x2331, 0x4B0F, 0x9471, 0x9CB2, 
  0xAC71, 0xB471, 0xAC51, 0xCC2F, 0xD40E, 0xD42F, 0xD40E, 0xE40E, 
  0xDC0E, 0xE42F, 0xE44E, 0xEC4F, 0xE44F, 0xE44F, 0xE44F, 0xDC90, 
  0xCCB1, 0xB4D2, 0x7CF3, 0x6515, 0x5CF5, 0x6515, 0x5CF5, 0x6515, 
  0x6515, 0x6515, 0x5D15, 0x6535, 0x6535, 0x6536, 0x6535, 0x6556, 
  0x6535, 0x6D56, 0x6555, 0x6D56, 0x6556, 0x6D76, 0x6556, 0x6D76, 
  0x6D76, 0x6D76, 0x6D76, 0x6D96, 0x6D76, 0x7596, 0x7596, 0x7596, 
  0x7D96, 0x7D96, 0x7596, 0x7DB6, 0x7596, 0x7DB7, 0x7596, 0x7DB6, 
  0x7D96, 0x7DB6, 0x7DB6, 0x7DB6, 0x7DB6, 0x85B6, 0x85B5, 0x8DD5, 
  0x1905, 0x10A3, 0x10A3, 0x1904, 0x2946, 0x2966, 0x2987, 0x2187, 
  0x3209, 0x2187, 0x1905, 0x1926, 0x2987, 0x29A8, 0x2126, 0x1967, 
  0x2988, 0x31A7, 0x2105, 0x29A8, 0x2988, 0x2187, 0x21A8, 0x2167, 
  0x2167, 0x2967, 0x8472, 0x8D14, 0x9514, 0x8D14, 0x8D34, 0x8D14, 
  0x9CF4, 0x9CB3, 0xAC92, 0x9CD2, 0xA4F3, 0xBCB2, 0xC4D3, 0xBCF3, 
  0xC4F3, 0xC4F3, 0xBD54, 0xAD74, 0x9DB6, 0x8DB6, 0x8DD7, 0x85D6, 
  0x8DD7, 0x95D6, 0x5C11, 0x09CB, 0x09AB, 0x0989, 0x226D, 0x4414, 
  0x5CB7, 0x5CD7, 0x5CB7, 0x4435, 0x2B52, 0x2ACF, 0x9C52, 0xAC92, 
  0xBC71, 0xBC50, 0xC451, 0xDBEE, 0xEC0E, 0xDC0E, 0xE40E, 0xE3ED, 
  0xEC2E, 0xEC2E, 0xEC4F, 0xE44F, 0xD470, 0xCC71, 0xCCB1, 0xC4B1, 
  0xB4F3, 0x8CF3, 0x7D14, 0x7514, 0x6D35, 0x6515, 0x6D35, 0x6535, 
  0x6D36, 0x6535, 0x6D56, 0x6535, 0x6D56, 0x6D56, 0x6D76, 0x6D55, 
  0x6D76, 0x6D76, 0x6D76, 0x6D76, 0x7576, 0x6D76, 0x7596, 0x6D76, 
  0x7596, 0x7596, 0x7DB6, 0x7596, 0x7DB6, 0x7D96, 0x85B6, 0x7DB6, 
  0x7DB7, 0x7DB6, 0x7DB7, 0x7DB6, 0x85D7, 0x7DB6, 0x85D7, 0x7DB6, 
  0x85D7, 0x85D6, 0x8DD6, 0x95D6, 0xA5F6, 0xADF5, 0xB616, 0xBE15, 
  0x1925, 0x10E4, 0x0883, 0x10A3, 0x1925, 0x2146, 0x2146, 0x29A8, 
  0x2167, 0x2167, 0x1905, 0x2966, 0x29A7, 0x2987, 0x10E4, 0x2146, 
  0x2987, 0x4A29, 0x2945, 0x2126, 0x29A8, 0x31E9, 0x29E9, 0x31E9, 
  0x29E9, 0x39E8, 0x6BAF, 0x9535, 0x8CF4, 0x8D14, 0x8D13, 0x94F3, 
  0x94B2, 0xA492, 0xAC71, 0xB492, 0xBC71, 0xC4B2, 0xAD13, 0xB534, 
  0xB513, 0xAD74, 0x9D94, 0xA5B5, 0x9D94, 0xA5B5, 0xA595, 0xA5B6, 
  0x95B5, 0x95B6, 0x3B0E, 0x11EC, 0x0989, 0x1A2C, 0x2B52, 0x4C36, 
  0x54B7, 0x54B7, 0x5476, 0x3BD4, 0x2331, 0x1AF0, 0x638F, 0xB451, 
  0xC42F, 0xCC2F, 0xCC0F, 0xE3ED, 0xE3ED, 0xEC0D, 0xEBEC, 0xF3ED, 
  0xEC0D, 0xEC2E, 0xD44F, 0xC491, 0xB491, 0xA4D2, 0xA4D2, 0xA4F3, 
  0x8513, 0x8D13, 0x8D13, 0x7D34, 0x6D34, 0x6D35, 0x6535, 0x6D56, 
  0x6535, 0x6D55, 0x6555, 0x6D76, 0x6555, 0x6D76, 0x6D55, 0x6D76, 
  0x6D75, 0x7576, 0x6D75, 0x7596, 0x6D75, 0x7596, 0x7595, 0x7D96, 
  0x7D95, 0x85B6, 0x7D95, 0x7DB6, 0x7DB5, 0x7DB6, 0x7DB6, 0x7DB6, 
  0x7DB6, 0x85D6, 0x85B6, 0x85D6, 0x85B6, 0x85D6, 0x85D6, 0x85D6, 
  0x85D5, 0x95D6, 0xA5B5, 0xB5D5, 0xB5D4, 0xCE15, 0xBDB4, 0x8C92, 
  0x1905, 0x1905, 0x10C4, 0x10A3, 0x18E4, 0x1925, 0x2125, 0x2125, 
  0x2966, 0x2145, 0x29A8, 0x2987, 0x31C8, 0x2187, 0x10E5, 0x1105, 
  0x2146, 0x39A7, 0x39A7, 0x2146, 0x31C8, 0x326B, 0x3A8C, 0x29E9, 
  0x3A6C, 0x29C8, 0x31C8, 0x6BAF, 0x8CF3, 0x8D14, 0x94F4, 0x94D3, 
  0x9CD3, 0xB491, 0xBC92, 0xB492, 0xACD2, 0x9D13, 0xA554, 0x9D74, 
  0x9D95, 0x9595, 0xA595, 0xB574, 0xB595, 0xAD95, 0xB5D6, 0xA5F6, 
  0x9DF7, 0x8534, 0x2A8D, 0x09EB, 0x1A0C, 0x3392, 0x3BF4, 0x4C76, 
  0x5CD8, 0x5CD7, 0x54B7, 0x4415, 0x3BD4, 0x1AF0, 0x1A8E, 0x4AAC, 
  0xC40F, 0xDBEE, 0xDC0E, 0xEBCC, 0xF3EC, 0xFBCA, 0xFC0D, 0xE42E, 
  0xD470, 0xB491, 0x9CD3, 0x84F3, 0x8514, 0x8513, 0x9514, 0x9D13, 
  0xA533, 0xAD13, 0x9534, 0x7D34, 0x7555, 0x6D55, 0x7576, 0x6D55, 
  0x6D76, 0x6D75, 0x7576, 0x6D75, 0x7576, 0x6D75, 0x7596, 0x7596, 
  0x7596, 0x7596, 0x7D96, 0x7D96, 0x7DB6, 0x7D95, 0x8DB6, 0x85B5, 
  0x8DD6, 0x85B6, 0x85D6, 0x85B6, 0x85D6, 0x85D6, 0x8DD7, 0x85D6, 
  0x8DD6, 0x8DD6, 0x8DF7, 0x85D6, 0x85F6, 0x85D6, 0x9DF6, 0xA5D5, 
  0xADD5, 0xB5D5, 0xC5F6, 0xC5F5, 0xD636, 0xBD73, 0x6BB0, 0x2ACE, 
  0x1905, 0x1905, 0x10A3, 0x18E4, 0x10C3, 0x2104, 0x2146, 0x3986, 
  0x2945, 0x2967, 0x29C8, 0x2166, 0x21A7, 0x21A8, 0x1125, 0x1926, 
  0x2166, 0x49E8, 0x3186, 0x2987, 0x31A7, 0x42AC, 0x324A, 0x2A2A, 
  0x2A09, 0x3A4A, 0x1926, 0x2946, 0x4229, 0x7C51, 0x9514, 0x9CF4, 
  0xACB2, 0xB4B2, 0x9CD2, 0x9CF3, 0x94F3, 0x9D33, 0x9554, 0x9574, 
  0x9574, 0xA575, 0xAD54, 0xBD54, 0xB574, 0xB595, 0xADB5, 0xADF6, 
  0xADD5, 0x7431, 0x09AA, 0x1A2D, 0x33B3, 0x3BD4, 0x3BD3, 0x5476, 
  0x54B7, 0x5CD8, 0x4C76, 0x4415, 0x2B72, 0x128F, 0x0A0C, 0x124D, 
  0x734E, 0xE40D, 0xEBAC, 0xFBCB, 0xF3CB, 0xEC2E, 0xBC90, 0x9CF3, 
  0x84F3, 0x8513, 0x7513, 0x7514, 0x8D13, 0xA513, 0xB4F2, 0xBD13, 
  0xB513, 0xAD33, 0x8D53, 0x9574, 0x7554, 0x7575, 0x8574, 0xA594, 
  0x8D74, 0x7D95, 0x7575, 0x7595, 0x7575, 0x7596, 0x7595, 0x7D96, 
  0x7595, 0x7DB6, 0x7D95, 0x7DB6, 0x7DB5, 0x85B6, 0x85B5, 0x8DD5, 
  0x85B5, 0x8DD6, 0x85B5, 0x8DD6, 0x8DD5, 0x8DF6, 0x85D6, 0x8DF6, 
  0x85D6, 0x8DF6, 0x85D6, 0x95F6, 0xADF6, 0xBE16, 0xBE15, 0xBE16, 
  0xADF5, 0xB616, 0xBE15, 0xC616, 0x9C71, 0x42AD, 0x1A8E, 0x22CF, 
  0x3A29, 0x2125, 0x10C3, 0x18E4, 0x18E4, 0x18E4, 0x31A7, 0x31A7, 
  0x3145, 0x2967, 0x3A4B, 0x29C9, 0x2188, 0x29A8, 0x2987, 0x2146, 
  0x2967, 0x41C7, 0x49E7, 0x2967, 0x3187, 0x7411, 0x42CC, 0x21A8, 
  0x324B, 0x3A8B, 0x530D, 0x3A09, 0x3167, 0x39C8, 0x8410, 0xACB2, 
  0xACF3, 0x9CF3, 0x9D13, 0x94F3, 0x9D34, 0x9D33, 0xA554, 0xA554, 
  0xAD75, 0xAD74, 0xAD95, 0xB594, 0xC595, 0xC595, 0xBDD6, 0xB5D5, 
  0xBDD6, 0x5B6F, 0x11CB, 0x22CF, 0x4435, 0x2B72, 0x3BD4, 0x4C55, 
  0x5CD8, 0x4435, 0x3BF4, 0x33F4, 0x2352, 0x12AF, 0x124D, 0x1A8E, 
  0x2A8D, 0xABEF, 0xE42E, 0xCC4F, 0xB4B2, 0x8CF3, 0x7D14, 0x7513, 
  0x8513, 0x8D13, 0x8D33, 0x8D13, 0xAD13, 0xBCF2, 0xCD12, 0xB533, 
  0xA554, 0x9554, 0x8D74, 0x9574, 0x8575, 0x7D75, 0xB594, 0xED92, 
  0xBDB5, 0x8595, 0x7DB6, 0x7D95, 0x7DB6, 0x7D95, 0x85B6, 0x7DB5, 
  0x85B6, 0x85B5, 0x85D6, 0x85D5, 0x8DD6, 0x8DD5, 0x8DD6, 0x9DF5, 
  0xB616, 0x9DF5, 0xA616, 0xA615, 0xAE36, 0x9E16, 0x9616, 0x8DF6, 
  0x8DF6, 0x8DD6, 0x9E16, 0xB636, 0xBE36, 0xB616, 0xAE16, 0xA616, 
  0xA616, 0xA616, 0xADF6, 0x6BF0, 0x220B, 0x122C, 0x1A6D, 0x1AAE, 
  0x5B8F, 0x42AC, 0x10C4, 0x2945, 0x18C3, 0x18E4, 0x2105, 0x2966, 
  0x2966, 0x2966, 0x2987, 0x322B, 0x21A8, 0x3209, 0x31E8, 0x31C8, 
  0x2166, 0x4208, 0x4A08, 0x39A8, 0x2987, 0x3209, 0x534E, 0x2A09, 
  0x29E8, 0x5B6F, 0x7CB4, 0x7C94, 0x4AEC, 0x3A09, 0x2966, 0x524A, 
  0x8C50, 0xA4F3, 0xA4D2, 0xA4F3, 0xA4F2, 0xB4F3, 0xB4F2, 0xB534, 
  0xAD54, 0xB574, 0xB574, 0xBD95, 0xC594, 0xD594, 0xCD94, 0xC5B5, 
  0xAD75, 0x32AE, 0x09EC, 0x3BF4, 0x54B7, 0x4C76, 0x4435, 0x54B7, 
  0x54D7, 0x4C76, 0x4455, 0x3C15, 0x2372, 0x1B31, 0x0AAF, 0x2B10, 
  0x122C, 0x4B4F, 0x84D3, 0x7514, 0x6514, 0x6D34, 0x7513, 0x8D13, 
  0x9512, 0x9513, 0x8D13, 0x9D33, 0xA513, 0xB533, 0xB533, 0x8D74, 
  0x7574, 0x7D75, 0x9574, 0xB574, 0xAD74, 0xB594, 0xBD73, 0x9D95, 
  0x7D95, 0x7DB5, 0x7D95, 0x85B5, 0x85B5, 0x8DB5, 0x8DB5, 0x8DD6, 
  0x8DD5, 0x95D5, 0x8DD5, 0x95F5, 0x8DD5, 0x95F5, 0x95F5, 0xAE15, 
  0xB615, 0x9E15, 0xAE15, 0xB636, 0xAE35, 0x9E16, 0x9615, 0xA636, 
  0xAE35, 0xB636, 0x95F5, 0x95F6, 0x95F5, 0x9616, 0x95F5, 0x95F6, 
  0x9616, 0x9DB5, 0x5B8F, 0x1A6D, 0x124D, 0x1A4C, 0x1A8D, 0x2310, 
  0x7473, 0x5B4F, 0x31E9, 0x2966, 0x2105, 0x18C3, 0x18C4, 0x2125, 
  0x3187, 0x2966, 0x31C9, 0x42AC, 0x29C9, 0x29C8, 0x3A4B, 0x3A4B, 
  0x31A8, 0x31A8, 0x4A08, 0x41C7, 0x39C8, 0x2105, 0x39E8, 0x4AED, 
  0x3A6B, 0x3209, 0x7473, 0x7CB4, 0x84B4, 0x7432, 0x422A, 0x2946, 
  0x6B0C, 0xACF2, 0xAD13, 0xAD33, 0xB533, 0xBD13, 0xC534, 0xB554, 
  0xBD95, 0xBD95, 0xCDB6, 0xCDB5, 0xD5D6, 0xDDB5, 0xDDD6, 0xC5D6, 
  0xAD34, 0x2AAE, 0x122D, 0x3BF4, 0x54B7, 0x4456, 0x5497, 0x5CD7, 
  0x54B7, 0x4C96, 0x4436, 0x33B3, 0x2BB3, 0x2373, 0x128F, 0x1A4C, 
  0x22AE, 0x1A6D, 0x5BF2, 0x6CD3, 0x7D13, 0x7D13, 0x8D13, 0x9513, 
  0xA513, 0x9D13, 0x9533, 0x9D33, 0xAD54, 0x9D53, 0x8D75, 0x8574, 
  0x9595, 0xA574, 0xAD94, 0x9D94, 0x9595, 0x8D94, 0x85B5, 0x7DB5, 
  0x85B5, 0x85B5, 0x8DD6, 0x8DD5, 0x95D5, 0x95D5, 0x9DF6, 0x9DF5, 
  0x9DF6, 0x95F5, 0x9DF6, 0x95F5, 0x9E15, 0x9E15, 0x9E16, 0xA615, 
  0xCE56, 0xB635, 0xAE56, 0xB635, 0xC656, 0xAE35, 0xA636, 0xC656, 
  0xEED5, 0xDE95, 0xCE56, 0xB636, 0xAE36, 0xA615, 0xBE36, 0xBE56, 
  0xC655, 0x73AF, 0x1A2C, 0x1ACF, 0x22F0, 0x2B30, 0x3BB3, 0x3392, 
  0x9598, 0x84F5, 0x4AEC, 0x29C8, 0x2966, 0x18E4, 0x2125, 0x3146, 
  0x3187, 0x31A7, 0x2987, 0x3A2A, 0x29E9, 0x29C8, 0x322A, 0x4ACC, 
  0x3209, 0x3A09, 0x3A09, 0x4A08, 0x2966, 0x2126, 0x10A3, 0x2966, 
  0x3209, 0x2187, 0x21C8, 0x1966, 0x29E8, 0x532D, 0x4AEC, 0x31C8, 
  0x31A7, 0x8BCF, 0xACB2, 0xB4F3, 0xBD12, 0xC533, 0xBD54, 0xC595, 
  0xC595, 0xCDD6, 0xCDD5, 0xD5F6, 0xD5F6, 0xDE16, 0xD5F6, 0xDDF6, 
  0x8411, 0x22AF, 0x120C, 0x3BD3, 0x4CB7, 0x54B7, 0x5CF8, 0x5496, 
  0x3BF4, 0x3BB3, 0x3392, 0x2B51, 0x2352, 0x1B11, 0x0A0C, 0x122C, 
  0x22AE, 0x1A6D, 0x226C, 0x53D2, 0x7C71, 0x8CF2, 0x8CF2, 0x9CF2, 
  0xACB1, 0xACF2, 0x9D12, 0x9D53, 0x8D53, 0x8D74, 0x8574, 0x9594, 
  0xAD94, 0xADB4, 0x8D94, 0x85B5, 0x8594, 0x8DB5, 0x85B4, 0x8DD5, 
  0x8DB5, 0x95D5, 0x8DD4, 0x95D5, 0x95D5, 0x95F5, 0x95F5, 0x9E15, 
  0x95F5, 0x9E15, 0x9E15, 0x9E15, 0x9E15, 0xA635, 0xA635, 0xD655, 
  0xEE54, 0xDE55, 0xD655, 0xDE75, 0xBE55, 0xB676, 0xB655, 0xBE76, 
  0xBE55, 0xB656, 0xB635, 0xCE56, 0xCE55, 0xDE95, 0xDE95, 0xC593, 
  0x7BAE, 0x3B10, 0x3372, 0x2310, 0x1AEF, 0x2B72, 0x2B92, 0x33D3, 
  0x95B9, 0x95B9, 0x8D77, 0x4AED, 0x31C8, 0x18E4, 0x3987, 0x3186, 
  0x39A7, 0x39A7, 0x39A7, 0x2166, 0x2987, 0x3229, 0x4AAC, 0x31E8, 
  0x31C8, 0x2987, 0x426B, 0x4A4A, 0x39C8, 0x3966, 0x2105, 0x1905, 
  0x2967, 0x2187, 0x2187, 0x2166, 0x1905, 0x18E4, 0x31E9, 0x3208, 
  0x2967, 0x39C8, 0xA410, 0xBCB1, 0xC513, 0xC533, 0xCD74, 0xC595, 
  0xCDD6, 0xCDF6, 0xDE17, 0xD616, 0xDE37, 0xDE16, 0xDE16, 0xA4B2, 
  0x3B10, 0x3392, 0x1A2C, 0x3351, 0x4C56, 0x3BD3, 0x3BD3, 0x4415, 
  0x5CF8, 0x4C35, 0x4C76, 0x22CF, 0x11CB, 0x11EB, 0x09AA, 0x0989, 
  0x228E, 0x2B30, 0x1A8E, 0x2B0F, 0x5C13, 0x8C92, 0xA4B2, 0x9CB1, 
  0x9CF2, 0x8D12, 0x8D53, 0x7D53, 0x8594, 0x8574, 0x9594, 0xAD94, 
  0xC594, 0xBD94, 0xADD4, 0x95B4, 0x95D5, 0x95D4, 0x95F5, 0x95D4, 
  0x9DF5, 0x9DF5, 0x9DF5, 0x9DF5, 0x9E15, 0x9E15, 0xA615, 0x9E15, 
  0xA635, 0xA615, 0xA635, 0xA635, 0xB656, 0xC655, 0xDE75, 0xEE74, 
  0xEE95, 0xE675, 0xD695, 0xBE75, 0xBE96, 0xB675, 0xB676, 0xB675, 
  0xBE76, 0xBE76, 0xC676, 0xB655, 0xBE76, 0xBDF5, 0x94D3, 0x3ACE, 
  0x2AF0, 0x2311, 0x22F0, 0x22AF, 0x1A2C, 0x09EB, 0x1A8E, 0x1A6D, 
  0x9598, 0x9DD9, 0x9DD9, 0x8D77, 0x42CC, 0x2146, 0x41C7, 0x4228, 
  0x39E8, 0x39C8, 0x39A7, 0x2167, 0x1946, 0x29C8, 0x31C7, 0x2966, 
  0x2166, 0x31E9, 0x29C7, 0x3A2A, 0x29C8, 0x3166, 0x2945, 0x1905, 
  0x2945, 0x2987, 0x29A7, 0x31C8, 0x2145, 0x1905, 0x1905, 0x2125, 
  0x2125, 0x2166, 0x628A, 0xC491, 0xC4F2, 0xC553, 0xCD74, 0xD595, 
  0xD5D5, 0xDE37, 0xDE16, 0xDE17, 0xD616, 0xDE16, 0x94B3, 0x4351, 
  0x22AF, 0x22CF, 0x09AA, 0x11EB, 0x2B31, 0x22AF, 0x11EB, 0x3331, 
  0x5D59, 0x657A, 0x5D59, 0x43F4, 0x11CA, 0x0969, 0x0969, 0x0969, 
  0x1A6D, 0x3351, 0x2B72, 0x2331, 0x3BB2, 0x6C53, 0x8CB1, 0x9512, 
  0x8512, 0x8D32, 0x8552, 0x8D74, 0x8D73, 0x9D93, 0x9D93, 0xA594, 
  0xA593, 0xA5B4, 0x9DB4, 0xA5D4, 0xA5D4, 0xA5F4, 0xA5D4, 0xADF5, 
  0xA5F4, 0xA614, 0x9DF4, 0xA615, 0xA614, 0xAE15, 0xA614, 0xAE35, 
  0xA634, 0xAE55, 0xB635, 0xCE55, 0xD655, 0xE675, 0xDE74, 0xE675, 
  0xD675, 0xCE95, 0xBE95, 0xC695, 0xC695, 0xC6B5, 0xC695, 0xC696, 
  0xC695, 0xB5F5, 0x7C91, 0x4B2E, 0x5BF0, 0x3AEE, 0x1A8E, 0x22F0, 
  0x2310, 0x1AAF, 0x122D, 0x2AF0, 0x120B, 0x120B, 0x1AAF, 0x3372, 
  0x9598, 0x9DD9, 0xA5FA, 0x9DFA, 0x9598, 0x4B2E, 0x31A8, 0x4249, 
  0x4A6A, 0x4A29, 0x524A, 0x3187, 0x2967, 0x2187, 0x2166, 0x2186, 
  0x2966, 0x3229, 0x426B, 0x2187, 0x2187, 0x3A09, 0x3A29, 0x2166, 
  0x3186, 0x2966, 0x31C8, 0x29C8, 0x4209, 0x2146, 0x2105, 0x18C4, 
  0x2945, 0x2945, 0x39A8, 0x832C, 0xBCF2, 0xCD53, 0xB4D3, 0x9C72, 
  0x8C32, 0x7C12, 0xC534, 0xDDB5, 0xDDD6, 0xB534, 0x4371, 0x22CF, 
  0x226E, 0x1A2D, 0x118A, 0x0127, 0x122C, 0x124D, 0x1A4D, 0x4C76, 
  0x5D19, 0x5D39, 0x655A, 0x5D19, 0x3BD3, 0x1A4D, 0x122D, 0x120C, 
  0x2331, 0x3330, 0x43F3, 0x3C15, 0x3C14, 0x4C14, 0x6C52, 0x9491, 
  0x9C50, 0x8C4F, 0x9430, 0x940E, 0xA40F, 0xA470, 0xA573, 0x9D93, 
  0x9DB4, 0xA593, 0xC572, 0xD551, 0xD5B3, 0xD572, 0xED51, 0xDD92, 
  0xD5F4, 0xBDF4, 0xBE35, 0xB634, 0xB635, 0xAE34, 0xBE55, 0xC634, 
  0xD654, 0xDE33, 0xF633, 0xF633, 0xFE53, 0xF673, 0xEE95, 0xDE75, 
  0xD695, 0xD695, 0xD6B5, 0xCEB5, 0xD6D5, 0xCEB5, 0xD6D6, 0xD6D5, 
  0xB573, 0x430E, 0x226E, 0x124D, 0x126E, 0x0A2D, 0x126E, 0x128E, 
  0x22CF, 0x126D, 0x22AF, 0x1A8E, 0x122C, 0x2B51, 0x2310, 0x2B72, 
  0x8D36, 0x95B8, 0x9DF9, 0x9DFA, 0x9DD9, 0x95B9, 0x63D1, 0x4AAC, 
  0x424A, 0x4209, 0x526A, 0x4209, 0x3187, 0x2987, 0x1966, 0x2166, 
  0x2987, 0x2146, 0x3A29, 0x31E9, 0x31E8, 0x4A6B, 0x4ACC, 0x29C8, 
  0x31A7, 0x31A8, 0x2966, 0x2146, 0x2987, 0x2966, 0x2125, 0x2105, 
  0x3166, 0x41C7, 0x2104, 0x3146, 0x6ACB, 0x6BB1, 0x1A4D, 0x1A6E, 
  0x122D, 0x1A6E, 0x42EE, 0xA472, 0x7432, 0x4330, 0x22AF, 0x2B31, 
  0x1A4D, 0x11CB, 0x0148, 0x0127, 0x0948, 0x2ACF, 0x4C96, 0x6539, 
  0x5CF8, 0x6539, 0x5D18, 0x54D7, 0x4C96, 0x3393, 0x1ACF, 0x122D, 
  0x120B, 0x2ACE, 0x5454, 0x54B6, 0x3C35, 0x4435, 0x4C13, 0x8BF0, 
  0xA38D, 0x92EB, 0x9289, 0xA2CA, 0xAB4B, 0xB470, 0xAD11, 0xB572, 
  0xB572, 0xC573, 0xD551, 0xE531, 0xDD31, 0xFC8D, 0xFC6A, 0xFD2C, 
  0xF590, 0xE5B3, 0xCDF3, 0xC634, 0xC614, 0xCE34, 0xD5D3, 0xF5D1, 
  0xFDF1, 0xFE12, 0xFE51, 0xFE52, 0xFE52, 0xFE92, 0xF6B2, 0xEE94, 
  0xDE94, 0xE6D5, 0xD6D5, 0xDEF5, 0xDED5, 0xE6F5, 0xDED5, 0xB594, 
  0x4BB2, 0x3B93, 0x122C, 0x126E, 0x0A0C, 0x09EC, 0x0A2C, 0x2310, 
  0x22EF, 0x124D, 0x126E, 0x1AAF, 0x1A8E, 0x2310, 0x2BB2, 0x4455, 
  0x7412, 0x8D77, 0x9598, 0x9598, 0xA61A, 0x9DFA, 0x9DFA, 0x6C32, 
  0x4AAC, 0x6BF1, 0x636F, 0x5B0D, 0x422A, 0x31A7, 0x29A8, 0x2987, 
  0x39E9, 0x2125, 0x31A7, 0x31C7, 0x31E9, 0x426A, 0x5B0D, 0x3A4A, 
  0x424B, 0x3A29, 0x31E9, 0x2186, 0x3167, 0x31A7, 0x2987, 0x2125, 
  0x2946, 0x4209, 0x2946, 0x2104, 0x2946, 0x220B, 0x2AF0, 0x2B31, 
  0x3351, 0x3392, 0x3351, 0x4414, 0x5D18, 0x4C96, 0x3372, 0x2B10, 
  0x2AF0, 0x22CF, 0x11EB, 0x0989, 0x3310, 0x5D18, 0x6539, 0x4C75, 
  0x5475, 0x3330, 0x3392, 0x4476, 0x4C76, 0x4435, 0x3351, 0x0969, 
  0x22AF, 0x3393, 0x4C34, 0x64F6, 0x64F7, 0x4C76, 0x5496, 0x63F2, 
  0xB3CE, 0xBB2A, 0xB3CD, 0xB490, 0xBCD1, 0xB511, 0xBD72, 0xC552, 
  0xCD52, 0xC572, 0xCD73, 0xD530, 0xEC8B, 0xFCC9, 0xFD6D, 0xED90, 
  0xED71, 0xE571, 0xE592, 0xEDF2, 0xFDF2, 0xF5D1, 0xFDF1, 0xFDB1, 
  0xFDF1, 0xFE30, 0xFE31, 0xFE30, 0xFEB0, 0xFED0, 0xFF11, 0xFEF2, 
  0xE633, 0x9CB0, 0xAD32, 0x9D52, 0xA574, 0x94F2, 0x6C52, 0x3B92, 
  0x3393, 0x2B11, 0x126E, 0x126E, 0x120D, 0x124D, 0x2310, 0x22F0, 
  0x1A4D, 0x2B51, 0x3393, 0x2311, 0x2B73, 0x1ACF, 0x2B51, 0x2B30, 
  0x3A29, 0x8D37, 0x8D57, 0x84D5, 0x74B4, 0x8D57, 0x9DFA, 0x9DFA, 
  0x7473, 0x7432, 0x9557, 0x9577, 0x5B6E, 0x424A, 0x31E8, 0x29C8, 
  0x3209, 0x2987, 0x31A6, 0x31C8, 0x29E9, 0x3A09, 0x3209, 0x428B, 
  0x324A, 0x3229, 0x2187, 0x31A8, 0x3A09, 0x424A, 0x3209, 0x2166, 
  0x2125, 0x39E8, 0x31A7, 0x1905, 0x2125, 0x2945, 0x1946, 0x2A6D, 
  0x4C76, 0x54D8, 0x4CD7, 0x54D7, 0x54F8, 0x54D7, 0x5D39, 0x3371, 
  0x3371, 0x4C76, 0x33D3, 0x4415, 0x4CB7, 0x5D39, 0x5539, 0x3351, 
  0x120B, 0x1A2C, 0x2AEF, 0x54D7, 0x5519, 0x5D19, 0x3BF4, 0x3392, 
  0x2BB3, 0x3C56, 0x33D4, 0x4C34, 0x5CF6, 0x6D37, 0x64F7, 0x64B6, 
  0x93CE, 0xD42D, 0xBCD0, 0xB532, 0xB551, 0xC572, 0xCD31, 0xE530, 
  0xE510, 0xED0E, 0xF4CB, 0xFCEA, 0xF50B, 0xE570, 0xCD51, 0xD4F0, 
  0xEC6C, 0xFCAD, 0xFD2E, 0xFE11, 0xFE0F, 0xFE2E, 0xFE2D, 0xFDCF, 
  0xFDEF, 0xFE4F, 0xFE8F, 0xFEEF, 0xFF0E, 0xFF30, 0xFF30, 0xF6D0, 
  0x632C, 0x11CB, 0x122C, 0x1A8E, 0x2B30, 0x228E, 0x124D, 0x2311, 
  0x22EF, 0x11EC, 0x09EB, 0x09EB, 0x124D, 0x3C15, 0x4CB7, 0x1A2D, 
  0x0189, 0x1AAF, 0x124D, 0x124D, 0x1B31, 0x3372, 0x09AA, 0x0169, 
  0x2166, 0x530D, 0x9578, 0x9DFA, 0x74B5, 0x42ED, 0x84D5, 0x9E1A, 
  0xA61B, 0x8516, 0x63D1, 0x4AED, 0x4AED, 0x428B, 0x428C, 0x322A, 
  0x3A2A, 0x31E8, 0x39A7, 0x39E7, 0x3A2A, 0x3A29, 0x31E8, 0x3A2A, 
  0x52ED, 0x322A, 0x2167, 0x3187, 0x31A7, 0x322A, 0x3A4A, 0x29C8, 
  0x31C8, 0x4A28, 0x41E8, 0x18E5, 0x39A7, 0x2966, 0x2105, 0x2904, 
  0x3A6B, 0x4C35, 0x4C97, 0x4496, 0x4435, 0x3C14, 0x5539, 0x4CB7, 
  0x54D8, 0x54F8, 0x54F9, 0x54F9, 0x5D39, 0x5D59, 0x5D7A, 0x5519, 
  0x4C76, 0x54D8, 0x6559, 0x5D7A, 0x5D5A, 0x5539, 0x3B92, 0x228E, 
  0x3393, 0x4477, 0x3C15, 0x3392, 0x43F3, 0x4413, 0x64D6, 0x5CB6, 
  0x6C95, 0xA471, 0xDC4D, 0xDC4D, 0xDC8E, 0xE4CE, 0xF530, 0xECED, 
  0xF4AB, 0xECCB, 0xE52E, 0xD530, 0xD4AF, 0xDC8D, 0xF4EE, 0xEC4B, 
  0xC38A, 0xE409, 0xFCEC, 0xFD8D, 0xFE2C, 0xFE0C, 0xFE6D, 0xFECD, 
  0xFF2E, 0xFF4F, 0xFF4F, 0xF6EF, 0xF6AF, 0xF6AF, 0xFF6F, 0xB4ED, 
  0x220C, 0x3392, 0x3331, 0x120C, 0x09CB, 0x0189, 0x09AB, 0x2B51, 
  0x228F, 0x122C, 0x09CB, 0x018A, 0x122D, 0x33D3, 0x3352, 0x120C, 
  0x09CB, 0x09CB, 0x09AB, 0x09CB, 0x120C, 0x09CB, 0x098A, 0x0169, 
  0x1925, 0x2187, 0x5B6E, 0xA5FA, 0x9DFA, 0x7CB5, 0x428B, 0x7432, 
  0x9598, 0x9DFA, 0x95D9, 0x7C94, 0x4B0D, 0x428C, 0x42AC, 0x3A6A, 
  0x39E8, 0x422A, 0x39E8, 0x4208, 0x31E8, 0x31C8, 0x29C8, 0x426B, 
  0x52CC, 0x4A8B, 0x21A7, 0x31C8, 0x3A09, 0x29A8, 0x2187, 0x31C8, 
  0x2166, 0x39C8, 0x4A8A, 0x2166, 0x2966, 0x31A7, 0x2145, 0x2966, 
  0x2124, 0x3AEE, 0x4C97, 0x4497, 0x3C35, 0x22EF, 0x44D7, 0x555A, 
  0x5539, 0x54F9, 0x54F8, 0x54F8, 0x5519, 0x5D7A, 0x5559, 0x54F8, 
  0x3BB3, 0x4C76, 0x5D59, 0x659A, 0x5D59, 0x3BF4, 0x09AA, 0x120C, 
  0x2BB3, 0x3BF5, 0x2310, 0x2B30, 0x3371, 0x3330, 0x3350, 0x43D3, 
  0x5475, 0x74B5, 0xB44F, 0xBC0D, 0xBC2D, 0xD44D, 0xD38A, 0xC349, 
  0xC3CB, 0xD42C, 0xDC0B, 0xEC2B, 0xF429, 0xFC49, 0xE449, 0x8B0A, 
  0x1A0B, 0x42AC, 0xABEB, 0xF50A, 0xFE29, 0xFEAA, 0xF6AB, 0xEE8C, 
  0xCDAC, 0x9C8E, 0x6B8D, 0x52EC, 0x4AAC, 0x6B4C, 0xD5EF, 0x530D, 
  0x1A8E, 0x3393, 0x09CA, 0x018A, 0x01AA, 0x2AF0, 0x22CF, 0x22F0, 
  0x33B3, 0x1AAF, 0x01AA, 0x0169, 0x0149, 0x09AB, 0x01AA, 0x33B3, 
  0x4415, 0x1A6E, 0x0169, 0x018A, 0x01AA, 0x098A, 0x018A, 0x09CB, 
  0x31E8, 0x2187, 0x3209, 0x7C73, 0x8D57, 0x9DFA, 0x9598, 0x532E, 
  0x428C, 0x6BD1, 0x9598, 0xA61A, 0x9578, 0x5B6F, 0x3A4A, 0x3A4A, 
  0x3A4A, 0x3A09, 0x3A09, 0x426A, 0x39C8, 0x2945, 0x2966, 0x3A09, 
  0x4A6B, 0x422A, 0x424A, 0x3A2A, 0x426B, 0x2987, 0x2966, 0x3187, 
  0x2966, 0x2105, 0x4209, 0x3209, 0x2146, 0x2966, 0x31A8, 0x2146, 
  0x2946, 0x2987, 0x2AAE, 0x3C35, 0x4456, 0x3C15, 0x4CF9, 0x4CF9, 
  0x5D39, 0x4CD7, 0x5D39, 0x5539, 0x5D5A, 0x5D7A, 0x5D7A, 0x5519, 
  0x4456, 0x4C96, 0x659A, 0x65BB, 0x5D7A, 0x4435, 0x3393, 0x1ACF, 
  0x1B11, 0x122D, 0x09AB, 0x09AA, 0x3351, 0x3BB2, 0x228E, 0x1A2C, 
  0x43B2, 0x5475, 0x6495, 0x6495, 0x7474, 0x7B6E, 0xAB2B, 0xC36A, 
  0xCB29, 0xB287, 0xC2E8, 0xDB68, 0xFC09, 0xB349, 0x3A2B, 0x11AA, 
  0x09CC, 0x01AB, 0x222D, 0x4A6A, 0x734B, 0x732B, 0x5AAB, 0x4AAD, 
  0x322D, 0x11CC, 0x11ED, 0x09CC, 0x122D, 0x1A2D, 0x3ACF, 0x1A2D, 
  0x120D, 0x120C, 0x122D, 0x018A, 0x09AB, 0x2B51, 0x3351, 0x120C, 
  0x2B10, 0x2B72, 0x2311, 0x1A6E, 0x122D, 0x01AB, 0x2B93, 0x4456, 
  0x1A2D, 0x0169, 0x098A, 0x09CB, 0x1A4E, 0x098A, 0x096A, 0x1ACF, 
  0x3229, 0x1987, 0x1966, 0x29C8, 0x21A7, 0x6BF1, 0x95B9, 0xA61A, 
  0x7473, 0x3209, 0x31E9, 0x5B6F, 0x9577, 0x9557, 0x6BF1, 0x5B6F, 
  0x534E, 0x4B0D, 0x3A4A, 0x532E, 0x4269, 0x39E8, 0x2125, 0x4209, 
  0x530D, 0x5B4E, 0x4A6A, 0x3A6B, 0x3A2A, 0x31C8, 0x39E8, 0x3966, 
  0x39A7, 0x2925, 0x2925, 0x3187, 0x2187, 0x2946, 0x3187, 0x39C8, 
  0x2966, 0x3187, 0x2987, 0x324B, 0x3351, 0x2B31, 0x2310, 0x33D3, 
  0x4CF8, 0x5519, 0x5518, 0x4C76, 0x5539, 0x5D9B, 0x5D5A, 0x5D7A, 
  0x5D7A, 0x5D39, 0x5518, 0x5D5A, 0x4C96, 0x3BF4, 0x22F0, 0x120D, 
  0x01EC, 0x01AB, 0x018A, 0x098A, 0x120B, 0x43F3, 0x3B92, 0x4392, 
  0x3B91, 0x3BD3, 0x4414, 0x64B6, 0x5C96, 0x3B72, 0x3B91, 0x5350, 
  0x326D, 0x1A4E, 0x11EC, 0x2A2C, 0x4A6B, 0x2A0B, 0x09AB, 0x09AB, 
  0x01AB, 0x09CB, 0x09EC, 0x09EC, 0x120D, 0x120D, 0x11EC, 0x1A8F, 
  0x0A0C, 0x09ED, 0x01EC, 0x09EC, 0x0A2D, 0x124E, 0x0A4E, 0x09EC, 
  0x09EC, 0x124D, 0x1ACF, 0x2B32, 0x09EC, 0x018A, 0x018A, 0x122D, 
  0x0A0C, 0x33D4, 0x4CD9, 0x4CB9, 0x4456, 0x3C15, 0x5519, 0x3311, 
  0x0149, 0x0149, 0x016A, 0x120C, 0x120C, 0x122D, 0x098A, 0x1A8F, 
  0x1925, 0x29A7, 0x2966, 0x1966, 0x2187, 0x29C8, 0x42CD, 0x6C12, 
  0x8D57, 0x7473, 0x42AC, 0x2166, 0x3A4A, 0x7432, 0x84D5, 0x7C94, 
  0x84F6, 0x8D37, 0x42AC, 0x42CC, 0x7C52, 0x4AAB, 0x2126, 0x3187, 
  0x428B, 0x7473, 0x84B4, 0x7453, 0x52ED, 0x530D, 0x6BF1, 0x7C52, 
  0x632E, 0x426A, 0x39C8, 0x3166, 0x4229, 0x31A7, 0x39A7, 0x4229, 
  0x31C8, 0x31C8, 0x4A4A, 0x31A7, 0x31E9, 0x3BB2, 0x4477, 0x4456, 
  0x54F9, 0x4476, 0x3BD4, 0x3351, 0x4435, 0x3BD3, 0x4415, 0x4CB7, 
  0x54D7, 0x3BF3, 0x3371, 0x3BD3, 0x2AF0, 0x09AB, 0x098B, 0x09AB, 
  0x09AB, 0x018A, 0x09AB, 0x018A, 0x09AB, 0x226D, 0x4BF3, 0x3B91, 
  0x6D16, 0x6517, 0x54B7, 0x64D7, 0x64D6, 0x64D7, 0x64F8, 0x3BD3, 
  0x0A2E, 0x0A2D, 0x122D, 0x0A0D, 0x09ED, 0x01CC, 0x09CC, 0x01AB, 
  0x09CC, 0x018A, 0x09AB, 0x0A0C, 0x120D, 0x0A0C, 0x09EC, 0x124E, 
  0x0A0D, 0x01CC, 0x124E, 0x0A2E, 0x09ED, 0x0A0D, 0x120D, 0x09EC, 
  0x126E, 0x22F0, 0x22CF, 0x4456, 0x3BD4, 0x09AB, 0x122D, 0x3C15, 
  0x54B8, 0x4CD8, 0x54D9, 0x4CB8, 0x54D9, 0x5D19, 0x43F5, 0x098A, 
  0x098A, 0x098A, 0x098A, 0x0169, 0x098A, 0x09EB, 0x09AB, 0x1AAF, 
  0x08C3, 0x426A, 0x31E8, 0x3209, 0x3A29, 0x21A8, 0x1967, 0x1946, 
  0x42CC, 0x324A, 0x4AED, 0x63D0, 0x29A7, 0x2987, 0x3A4A, 0x7473, 
  0x8516, 0x9DD9, 0x8536, 0x42EC, 0x42AB, 0x638F, 0x3A4A, 0x39A7, 
  0x4A29, 0x532E, 0x7CB4, 0x8D77, 0x7473, 0x7474, 0x7CB4, 0x6C32, 
  0x8515, 0x84D5, 0x5B6F, 0x39E8, 0x4208, 0x52CC, 0x426A, 0x3209, 
  0x3A4B, 0x422A, 0x3A6A, 0x3209, 0x31C8, 0x2188, 0x22AF, 0x2B31, 
  0x1A8D, 0x11AA, 0x0168, 0x0989, 0x0989, 0x0969, 0x0168, 0x09AA, 
  0x11CA, 0x11CA, 0x0969, 0x098A, 0x018A, 0x11EC, 0x01AB, 0x09AB, 
  0x018A, 0x098A, 0x0169, 0x018A, 0x018A, 0x098A, 0x330F, 0x3330, 
  0x2ACE, 0x5C95, 0x5495, 0x6517, 0x6D38, 0x7538, 0x6517, 0x4476, 
  0x2BB4, 0x2B93, 0x3C35, 0x4436, 0x0A4E, 0x020D, 0x01EC, 0x01CC, 
  0x01AB, 0x09AB, 0x018A, 0x09CC, 0x01CB, 0x09CC, 0x01AB, 0x09EC, 
  0x01EC, 0x09ED, 0x01EC, 0x09ED, 0x01AB, 0x09CB, 0x018A, 0x09CB, 
  0x09CC, 0x09EC, 0x01CB, 0x124D, 0x1AAF, 0x3393, 0x33F4, 0x3C16, 
  0x4456, 0x4477, 0x3C16, 0x3C36, 0x4457, 0x4C57, 0x1A6D, 0x016A, 
  0x1A6E, 0x11EC, 0x016A, 0x018A, 0x018A, 0x09AB, 0x01AA, 0x122C, 
  0x10E5, 0x29A7, 0x1925, 0x4249, 0x2966, 0x31C8, 0x21E9, 0x1A0A, 
  0x21E9, 0x1987, 0x2A09, 0x7432, 0x6C12, 0x3229, 0x2166, 0x2987, 
  0x4ACD, 0x7473, 0x9DD9, 0x8D78, 0x5BB0, 0x42AB, 0x7C94, 0x7452, 
  0x62EC, 0x426A, 0x6C12, 0x63F1, 0x6390, 0x7473, 0x84F6, 0x3A8B, 
  0x532E, 0x7CD4, 0x7CB4, 0x63D0, 0x5B0E, 0x5B4E, 0x8D16, 0x63D0, 
  0x428B, 0x424A, 0x426B, 0x3A4A, 0x3A09, 0x29E8, 0x322B, 0x2A8D, 
  0x220B, 0x11AA, 0x0968, 0x0148, 0x0969, 0x0989, 0x098A, 0x0969, 
  0x0969, 0x0989, 0x1A2C, 0x122C, 0x2AF0, 0x22CF, 0x11EC, 0x01AB, 
  0x098B, 0x096A, 0x098A, 0x018A, 0x098A, 0x096A, 0x11CB, 0x11CB, 
  0x098A, 0x118A, 0x19EB, 0x2AAE, 0x4391, 0x53F2, 0x4330, 0x32AE, 
  0x4C14, 0x6539, 0x75FD, 0x5D19, 0x1291, 0x0A4F, 0x0A2E, 0x01ED, 
  0x09EC, 0x09CC, 0x018B, 0x01CB, 0x09CC, 0x01AB, 0x09CC, 0x01CC, 
  0x0A0D, 0x01EC, 0x0A0D, 0x01CC, 0x09AB, 0x09CB, 0x09CC, 0x018A, 
  0x098B, 0x018A, 0x098B, 0x016A, 0x09CC, 0x2311, 0x2332, 0x33F5, 
  0x3C16, 0x33D5, 0x33D5, 0x33F5, 0x2B32, 0x1A4D, 0x098A, 0x018A, 
  0x1A4E, 0x09CB, 0x09CC, 0x122D, 0x3B72, 0x1A8F, 0x1A6E, 0x09CB, 
  0x0905, 0x10E4, 0x10C3, 0x31A7, 0x1104, 0x1946, 0x1166, 0x224B, 
  0x430D, 0x324A, 0x21E9, 0x326B, 0x42AB, 0x6BF1, 0x5B6F, 0x2987, 
  0x10E4, 0x2967, 0x4AAC, 0x84F6, 0x8D77, 0x6C73, 0x5B8F, 0x8D16, 
  0x8CF4, 0x5B0D, 0x7411, 0x9577, 0x6C52, 0x63D0, 0x8516, 0x84F5, 
  0x536E, 0x6BF1, 0x8D56, 0x63F1, 0x4B0D, 0x6BF1, 0x7CD4, 0x9577, 
  0x63D0, 0x4ACC, 0x4ACC, 0x7432, 0x426A, 0x3A09, 0x3A09, 0x4AED, 
  0x4B90, 0x434F, 0x434F, 0x32CE, 0x1A0B, 0x228D, 0x2B51, 0x2ACF, 
  0x226D, 0x11EB, 0x09A9, 0x098A, 0x09A9, 0x09AA, 0x0169, 0x0969, 
  0x0149, 0x0169, 0x0169, 0x0949, 0x0128, 0x0948, 0x0128, 0x0949, 
  0x0928, 0x0969, 0x0128, 0x0948, 0x0148, 0x0949, 0x1148, 0x1128, 
  0x1147, 0x220B, 0x330F, 0x3B51, 0x0A0C, 0x09AB, 0x098A, 0x0A0E, 
  0x020D, 0x0A2E, 0x01AB, 0x01AB, 0x01AB, 0x01AB, 0x01AB, 0x0A0D, 
  0x01EC, 0x01ED, 0x01EC, 0x018B, 0x018A, 0x09CC, 0x09EC, 0x09AB, 
  0x016A, 0x016A, 0x018A, 0x11EC, 0x1A8F, 0x2311, 0x12AF, 0x2BB4, 
  0x33F6, 0x2B53, 0x1AF0, 0x3393, 0x2B31, 0x11EC, 0x018A, 0x09CB, 
  0x01CB, 0x122D, 0x3B92, 0x3352, 0x22D0, 0x22AF, 0x22AE, 0x09CB, 
  0x10E4, 0x1125, 0x1926, 0x2187, 0x29E9, 0x29E9, 0x21E9, 0x1987, 
  0x3A6B, 0x3209, 0x3A6B, 0x21A8, 0x2187, 0x2A09, 0x534F, 0x5B4E, 
  0x530E, 0x29A7, 0x2105, 0x2187, 0x5B2E, 0x8516, 0x8516, 0x84F5, 
  0x9DB9, 0x8D56, 0x8CF5, 0x9DD9, 0x9DD9, 0x8D77, 0x9598, 0x95B8, 
  0x8D77, 0x7493, 0x9578, 0x8D57, 0x63F1, 0x4B2E, 0x42AC, 0x53B0, 
  0x8516, 0x536E, 0x42AC, 0x638F, 0x52CC, 0x4229, 0x41E9, 0x31C8, 
  0x4B2E, 0x432E, 0x326C, 0x3AAC, 0x3AAD, 0x3B50, 0x4415, 0x1A2C, 
  0x0949, 0x0128, 0x0949, 0x0148, 0x0949, 0x0128, 0x0949, 0x0148, 
  0x0949, 0x0169, 0x1189, 0x0928, 0x0928, 0x0108, 0x0928, 0x0928, 
  0x0948, 0x0148, 0x0949, 0x0948, 0x0949, 0x0948, 0x1169, 0x1128, 
  0x1128, 0x0948, 0x1149, 0x0949, 0x0969, 0x0949, 0x1169, 0x098A, 
  0x09ED, 0x126F, 0x1A6F, 0x09CC, 0x09AC, 0x124E, 0x09ED, 0x01EC, 
  0x124E, 0x01CC, 0x09AC, 0x01AB, 0x09AB, 0x01AB, 0x09EC, 0x09EC, 
  0x122D, 0x1A4E, 0x1A6E, 0x3B93, 0x1A6E, 0x09CB, 0x120D, 0x2332, 
  0x2B53, 0x120D, 0x11EC, 0x122D, 0x1A4E, 0x01AB, 0x09CC, 0x22D0, 
  0x1A8F, 0x22F1, 0x22F1, 0x1AB0, 0x0A0D, 0x122D, 0x120C, 0x09CB, 
  0x1104, 0x4ACC, 0x08C3, 0x29A7, 0x432E, 0x328C, 0x21E9, 0x29E9, 
  0x19A8, 0x1125, 0x1966, 0x1925, 0x1105, 0x1987, 0x1987, 0x322A, 
  0x4B0D, 0x530E, 0x2166, 0x1946, 0x1945, 0x2987, 0x52EC, 0x6BD1, 
  0x4ACC, 0x5B4E, 0x63AF, 0x84B4, 0x9577, 0x9DB8, 0x9597, 0x9DB9, 
  0x95B8, 0x4B0D, 0x3AAC, 0x8D37, 0x8515, 0x42ED, 0x324A, 0x3AAC, 
  0x4B6F, 0x6C12, 0x42ED, 0x3AAC, 0x4B0D, 0x5B6E, 0x42AB, 0x31E8, 
  0x3A6A, 0x3A4A, 0x1904, 0x2167, 0x3ACC, 0x5390, 0x5433, 0x4C14, 
  0x226C, 0x1189, 0x222B, 0x19EB, 0x0148, 0x0949, 0x0128, 0x0969, 
  0x09CA, 0x1A4D, 0x3B71, 0x1A0B, 0x0107, 0x0907, 0x0107, 0x0907, 
  0x0127, 0x0948, 0x0128, 0x0948, 0x0148, 0x0949, 0x0149, 0x0948, 
  0x0928, 0x1128, 0x0907, 0x0948, 0x0948, 0x0949, 0x0948, 0x0948, 
  0x0948, 0x120D, 0x01EC, 0x01AC, 0x018B, 0x09CC, 0x01EC, 0x0A0D, 
  0x01CC, 0x09AB, 0x01AA, 0x01AB, 0x01AB, 0x09AB, 0x018A, 0x09CB, 
  0x09EC, 0x22F0, 0x126E, 0x1AAF, 0x0A0D, 0x09EB, 0x126E, 0x2352, 
  0x09EC, 0x016A, 0x0169, 0x0A0D, 0x0A0C, 0x09EC, 0x0A2D, 0x0A4E, 
  0x020D, 0x0A2E, 0x020D, 0x0A0C, 0x120C, 0x11CA, 0x0926, 0x1905, 
  0x2166, 0x3A29, 0x1105, 0x10E4, 0x4B2E, 0x432E, 0x326B, 0x21A7, 
  0x2167, 0x1946, 0x1946, 0x21A8, 0x3A2A, 0x3A2A, 0x29C9, 0x324A, 
  0x3209, 0x322A, 0x29A8, 0x1925, 0x1946, 0x1925, 0x2146, 0x3A08, 
  0x2946, 0x2105, 0x31A8, 0x3A08, 0x4AAC, 0x63D0, 0x84F5, 0x95B8, 
  0x9DFA, 0x6BD0, 0x31E9, 0x6432, 0x9DD9, 0x7494, 0x536F, 0x3ACC, 
  0x5BB0, 0x74B4, 0x7453, 0x430E, 0x7CD5, 0x9577, 0x6C32, 0x324A, 
  0x324A, 0x534E, 0x5B2E, 0x2145, 0x3209, 0x5BF1, 0x6412, 0x3AED, 
  0x328C, 0x19EA, 0x19A9, 0x0947, 0x1169, 0x19CA, 0x0969, 0x0148, 
  0x0989, 0x09AA, 0x1A4D, 0x09AA, 0x0928, 0x0107, 0x0907, 0x00E7, 
  0x0928, 0x0128, 0x0948, 0x0148, 0x0949, 0x0969, 0x0969, 0x0148, 
  0x0948, 0x0927, 0x0927, 0x0927, 0x0927, 0x0907, 0x0928, 0x0927, 
  0x1148, 0x1168, 0x11CB, 0x01AC, 0x09CC, 0x122E, 0x126E, 0x01CC, 
  0x09AB, 0x01AA, 0x01AB, 0x018A, 0x09AB, 0x01AB, 0x09AB, 0x09AB, 
  0x122D, 0x124E, 0x09EC, 0x01CB, 0x09CC, 0x0A0C, 0x124E, 0x128E, 
  0x124E, 0x122E, 0x09EC, 0x120D, 0x09AC, 0x01EC, 0x0A0D, 0x020D, 
  0x0A0D, 0x0A0C, 0x0A0C, 0x09CA, 0x1988, 0x1904, 0x20C3, 0x1882, 
  0x1125, 0x1105, 0x1925, 0x2187, 0x1987, 0x3A8C, 0x326B, 0x1987, 
  0x1146, 0x10C4, 0x18E4, 0x21A8, 0x29E9, 0x4A6B, 0x424A, 0x328C, 
  0x3A8B, 0x1966, 0x1146, 0x1105, 0x1966, 0x2167, 0x1946, 0x2124, 
  0x1924, 0x29A7, 0x2987, 0x2987, 0x3209, 0x3A6B, 0x4B0D, 0x6390, 
  0x8536, 0x9DD9, 0x7452, 0x84F6, 0x95F9, 0x9E1A, 0x95D9, 0x84F5, 
  0x8515, 0xA61A, 0x95B8, 0x8D78, 0x95B8, 0x9DB9, 0x8D77, 0x426B, 
  0x324A, 0x326B, 0x63F0, 0x3A6A, 0x1946, 0x3209, 0x326C, 0x2A0A, 
  0x19A8, 0x1988, 0x42ED, 0x324B, 0x19A8, 0x0948, 0x0107, 0x0907, 
  0x0106, 0x0107, 0x0107, 0x0948, 0x0127, 0x0107, 0x00E6, 0x0107, 
  0x0107, 0x0927, 0x0127, 0x0948, 0x0148, 0x11CA, 0x11CA, 0x0989, 
  0x0968, 0x0968, 0x0147, 0x0948, 0x0147, 0x0948, 0x1189, 0x11AA, 
  0x0947, 0x0948, 0x00E6, 0x096A, 0x0A2D, 0x2B72, 0x09EC, 0x018A, 
  0x018A, 0x018A, 0x018A, 0x018A, 0x018A, 0x018A, 0x09CB, 0x1A4D, 
  0x1AAE, 0x122D, 0x01AB, 0x01AB, 0x01AA, 0x01EC, 0x01EC, 0x09EC, 
  0x01CC, 0x0A2D, 0x1A8F, 0x124E, 0x01AB, 0x01EC, 0x01CC, 0x09EC, 
  0x09EB, 0x11C9, 0x1946, 0x2124, 0x20E3, 0x20E3, 0x10A2, 0x18A3, 
  0x21C8, 0x1987, 0x1905, 0x31E8, 0x2987, 0x21C8, 0x1188, 0x1146, 
  0x29E9, 0x29E9, 0x1905, 0x2146, 0x3187, 0x4A4A, 0x526A, 0x2167, 
  0x1946, 0x1126, 0x1106, 0x1966, 0x29A8, 0x21A7, 0x2187, 0x2187, 
  0x2146, 0x1925, 0x2987, 0x2986, 0x29C8, 0x31E8, 0x4A8B, 0x4AED, 
  0x7474, 0x95FA, 0xA63B, 0xA61B, 0xA63B, 0x9E1A, 0x8D16, 0x4AAB, 
  0x4AAC, 0x7C93, 0x9DD9, 0x8D77, 0x7CB4, 0x7473, 0x8D16, 0x6BF1, 
  0x4AED, 0x326B, 0x3A6B, 0x5B4E, 0x52EC, 0x31E8, 0x29C9, 0x328D, 
  0x430F, 0x536F, 0x63F1, 0x63D1, 0x5BD1, 0x42ED, 0x1988, 0x0927, 
  0x0907, 0x00E6, 0x0907, 0x0928, 0x1A0C, 0x1189, 0x0928, 0x0928, 
  0x0927, 0x0127, 0x0927, 0x0906, 0x0947, 0x11A9, 0x2A6D, 0x4BF2, 
  0x224D, 0x0928, 0x0948, 0x0107, 0x0927, 0x0927, 0x19EA, 0x32CE, 
  0x19CA, 0x0948, 0x0927, 0x0907, 0x09AB, 0x09CB, 0x098B, 0x018A, 
  0x01AB, 0x018A, 0x09AB, 0x018A, 0x018A, 0x018A, 0x09AB, 0x09CB, 
  0x09EC, 0x09EC, 0x09AC, 0x018B, 0x09EC, 0x01EC, 0x0A2E, 0x01ED, 
  0x09ED, 0x01CC, 0x0A2D, 0x09EC, 0x09EC, 0x09EC, 0x11EB, 0x1188, 
  0x2146, 0x2124, 0x2924, 0x2124, 0x2945, 0x2124, 0x2945, 0x2945, 
  0x1946, 0x1988, 0x2166, 0x4A29, 0x4A29, 0x29C8, 0x08C4, 0x10E4, 
  0x29C8, 0x2A2A, 0x1126, 0x21C8, 0x2187, 0x2945, 0x2125, 0x2126, 
  0x2166, 0x1987, 0x2166, 0x2987, 0x21C8, 0x29C9, 0x29C8, 0x2187, 
  0x1925, 0x1925, 0x1946, 0x2187, 0x1946, 0x29C8, 0x29C8, 0x426B, 
  0x8537, 0x95B9, 0x95D9, 0x9E1B, 0x95B9, 0x7473, 0x2A09, 0x2187, 
  0x29A6, 0x31C7, 0x5B8F, 0x8D57, 0x5BB0, 0x42CC, 0x5BD0, 0x6C11, 
  0x534E, 0x4ACC, 0x3209, 0x31A7, 0x424A, 0x52ED, 0x3A09, 0x21A8, 
  0x3AAC, 0x536F, 0x5BB0, 0x5BD1, 0x4B2E, 0x5B90, 0x3AAC, 0x4B70, 
  0x19C9, 0x0107, 0x0106, 0x0127, 0x0969, 0x19EB, 0x0169, 0x0948, 
  0x0106, 0x0927, 0x0106, 0x08E6, 0x0906, 0x11CA, 0x0168, 0x2AAE, 
  0x4C14, 0x11EB, 0x0168, 0x0948, 0x0106, 0x0906, 0x0106, 0x0947, 
  0x11A9, 0x1168, 0x1188, 0x220B, 0x0927, 0x018A, 0x018A, 0x018B, 
  0x018A, 0x01AB, 0x018A, 0x018B, 0x018A, 0x018A, 0x018A, 0x09AB, 
  0x01AB, 0x01CC, 0x01CC, 0x020D, 0x020D, 0x020D, 0x01ED, 0x01EC, 
  0x01CB, 0x01CC, 0x01CB, 0x09CA, 0x11A8, 0x2166, 0x2124, 0x2945, 
  0x2103, 0x2124, 0x2144, 0x2985, 0x2985, 0x29A5, 0x2965, 0x2966, 
  0x1146, 0x08E5, 0x3A2A, 0x5B6D, 0x52CB, 0x4249, 0x29C8, 0x08C3, 
  0x1946, 0x08E4, 0x1126, 0x2A8C, 0x3AEE, 0x29A8, 0x31A7, 0x1925, 
  0x1926, 0x1105, 0x1905, 0x2166, 0x29C8, 0x2187, 0x3209, 0x21A7, 
  0x2167, 0x1987, 0x21A8, 0x2187, 0x2166, 0x2187, 0x3209, 0x31E9, 
  0x534F, 0x7D17, 0x8538, 0x7D18, 0x42AD, 0x1946, 0x2987, 0x31A7, 
  0x31C8, 0x31C7, 0x3A28, 0x5B6F, 0x8D57, 0x8D98, 0x8D98, 0x8537, 
  0x7432, 0x39E8, 0x2987, 0x31A7, 0x31A7, 0x31E8, 0x3A29, 0x31C8, 
  0x2987, 0x29A7, 0x31A8, 0x29A7, 0x3A2A, 0x52EC, 0x428B, 0x3A6A, 
  0x42AD, 0x21C9, 0x0948, 0x0108, 0x0949, 0x11CB, 0x19CB, 0x0127, 
  0x0948, 0x0927, 0x0968, 0x0947, 0x0927, 0x0968, 0x0989, 0x0189, 
  0x330F, 0x2ACE, 0x09AA, 0x09A9, 0x0948, 0x0127, 0x0948, 0x0127, 
  0x2A4B, 0x3B0E, 0x328D, 0x222B, 0x2A4C, 0x1189, 0x098A, 0x018A, 
  0x09AB, 0x018A, 0x01AB, 0x018A, 0x09AB, 0x018B, 0x01AB, 0x01CC, 
  0x09ED, 0x09CC, 0x0A0D, 0x01ED, 0x09ED, 0x01EC, 0x01EC, 0x01CB, 
  0x09CB, 0x11A9, 0x2166, 0x2124, 0x2923, 0x2103, 0x2945, 0x29A6, 
  0x2986, 0x2986, 0x29C7, 0x29C5, 0x31A5, 0x31C5, 0x39C5, 0x2984, 
  0x0905, 0x08E5, 0x2166, 0x73F0, 0x5B8E, 0x322A, 0x3A29, 0x1925, 
  0x08A3, 0x0883, 0x08C3, 0x1946, 0x1966, 0x1905, 0x31A7, 0x2987, 
  0x1904, 0x18E4, 0x1905, 0x2146, 0x1945, 0x2187, 0x1945, 0x1926, 
  0x2166, 0x2187, 0x1946, 0x320A, 0x322A, 0x31E9, 0x4B0D, 0x6C53, 
  0x31C8, 0x3A2B, 0x4B50, 0x5BD3, 0x29C8, 0x10E4, 0x2966, 0x39C7, 
  0x31C7, 0x29A7, 0x29A7, 0x29C8, 0x534E, 0x9DD9, 0x95D9, 0x8537, 
  0x42CC, 0x2966, 0x2125, 0x2966, 0x2186, 0x2166, 0x2987, 0x29A7, 
  0x2125, 0x2946, 0x2986, 0x4ACC, 0x31E8, 0x1905, 0x10E4, 0x1905, 
  0x1925, 0x2987, 0x1947, 0x1106, 0x0927, 0x0948, 0x0928, 0x0927, 
  0x0127, 0x0927, 0x0147, 0x1168, 0x0968, 0x1A2B, 0x1189, 0x0968, 
  0x0947, 0x21EA, 0x11CA, 0x11CA, 0x0127, 0x0947, 0x0947, 0x0927, 
  0x0947, 0x1147, 0x1147, 0x1126, 0x1988, 0x21EA, 0x1188, 0x098A, 
  0x018A, 0x018A, 0x018A, 0x018B, 0x018A, 0x01AB, 0x01AC, 0x01ED, 
  0x01EC, 0x198A, 0x09AA, 0x01ED, 0x020C, 0x09CC, 0x09AA, 0x1168, 
  0x1925, 0x2124, 0x2123, 0x2924, 0x2124, 0x2964, 0x2164, 0x29A6, 
  0x2985, 0x31C6, 0x29C4, 0x31E5, 0x31E3, 0x3A05, 0x31C4, 0x31A3, 
  0x08E5, 0x08E4, 0x2166, 0x4AAB, 0x5B2D, 0x42AB, 0x4AAA, 0x3229, 
  0x322A, 0x1967, 0x1926, 0x1125, 0x1105, 0x1945, 0x2167, 0x1946, 
  0x2987, 0x2125, 0x2125, 0x29A7, 0x3209, 0x2187, 0x31C8, 0x29C8, 
  0x2166, 0x2166, 0x1946, 0x1188, 0x5390, 0x7CD5, 0x6BF1, 0x63F1, 
  0x6C33, 0x1904, 0x18E5, 0x2145, 0x18C4, 0x10E4, 0x2166, 0x2186, 
  0x29C7, 0x2165, 0x2966, 0x29C7, 0x3A08, 0x638F, 0x9DDA, 0x95D9, 
  0x7CD5, 0x428B, 0x2987, 0x2187, 0x29A8, 0x29A7, 0x29C8, 0x2166, 
  0x2187, 0x2166, 0x2987, 0x536F, 0x8537, 0x5BD1, 0x42AC, 0x2166, 
  0x2187, 0x1966, 0x3A4A, 0x424A, 0x29A7, 0x1925, 0x2146, 0x1926, 
  0x1127, 0x0906, 0x1106, 0x0906, 0x0947, 0x1168, 0x1168, 0x0927, 
  0x1127, 0x0906, 0x0927, 0x0927, 0x1127, 0x0926, 0x1127, 0x1127, 
  0x1147, 0x0926, 0x1127, 0x0906, 0x08E6, 0x0906, 0x1147, 0x0927, 
  0x098A, 0x01AA, 0x09CC, 0x01AB, 0x01AB, 0x01AB, 0x09CD, 0x01CC, 
  0x09EC, 0x09EB, 0x0A0C, 0x09EB, 0x19C9, 0x2145, 0x2944, 0x2924, 
  0x3186, 0x2945, 0x2965, 0x2944, 0x2945, 0x2945, 0x2985, 0x31C7, 
  0x31A6, 0x29A5, 0x31A5, 0x31C4, 0x3A04, 0x3A03, 0x3A04, 0x39E4, 
  0x08A3, 0x08A4, 0x2187, 0x3A4A, 0x3A4A, 0x4ACC, 0x7431, 0x7D16, 
  0x7D38, 0x74B6, 0x2A09, 0x1125, 0x10E4, 0x2125, 0x2186, 0x1925, 
  0x21A7, 0x2187, 0x1904, 0x2986, 0x2987, 0x1905, 0x2166, 0x29A8, 
  0x2187, 0x1967, 0x0904, 0x0905, 0x29C8, 0x7CB4, 0x9DD9, 0x9598, 
  0x8D78, 0x63B0, 0x3229, 0x31C8, 0x18E4, 0x18E4, 0x1925, 0x2145, 
  0x2186, 0x31C7, 0x29A7, 0x29A7, 0x322A, 0x3A8B, 0x534E, 0x84F5, 
  0x7432, 0x4A6B, 0x29A7, 0x2146, 0x2166, 0x2187, 0x29C8, 0x2166, 
  0x1925, 0x2187, 0x29C8, 0x42AC, 0x7494, 0x8537, 0x7D16, 0x4B0D, 
  0x2187, 0x2166, 0x29C8, 0x534E, 0x638F, 0x31E9, 0x1925, 0x2146, 
  0x2104, 0x2104, 0x18E4, 0x1904, 0x10E4, 0x1127, 0x0927, 0x0947, 
  0x0927, 0x1168, 0x222A, 0x42EC, 0x3A8B, 0x2A4A, 0x21E9, 0x19A8, 
  0x1106, 0x1106, 0x0906, 0x1147, 0x1167, 0x0906, 0x0906, 0x1127, 
  0x1189, 0x09AA, 0x01AB, 0x01AB, 0x01AB, 0x09CC, 0x01EC, 0x01EC, 
  0x020C, 0x120B, 0x1187, 0x2165, 0x2943, 0x2943, 0x2943, 0x2963, 
  0x2963, 0x2964, 0x2184, 0x2984, 0x2984, 0x2985, 0x2964, 0x31C6, 
  0x3A06, 0x39E6, 0x31C5, 0x39E5, 0x39E5, 0x3A04, 0x3203, 0x3A04, 
  0x08A4, 0x0883, 0x18E4, 0x2965, 0x31A6, 0x2965, 0x5ACB, 0x84D5, 
  0x8558, 0x6C75, 0x222A, 0x0926, 0x1987, 0x2187, 0x1946, 0x2166, 
  0x426B, 0x29C8, 0x2987, 0x21A7, 0x31E9, 0x2166, 0x2125, 0x18E4, 
  0x1905, 0x1105, 0x1126, 0x1125, 0x426A, 0x4AAB, 0x7C74, 0x9DD9, 
  0x9DFA, 0x9DFA, 0x9599, 0x7CF6, 0x4B0E, 0x10E4, 0x10E4, 0x1946, 
  0x2966, 0x2966, 0x31A7, 0x3186, 0x31E9, 0x2A4B, 0x536F, 0x9598, 
  0x8D37, 0x52AB, 0x3987, 0x29A7, 0x29E9, 0x3A4A, 0x29A8, 0x21A7, 
  0x2987, 0x2166, 0x29C8, 0x29E8, 0x322A, 0x3229, 0x4B2D, 0x42ED, 
  0x29C8, 0x29C8, 0x29E9, 0x1987, 0x29C8, 0x21A8, 0x2146, 0x2125, 
  0x2945, 0x2146, 0x29A7, 0x2145, 0x2125, 0x1925, 0x1968, 0x0968, 
  0x1168, 0x1147, 0x3A6A, 0x3AED, 0x53B0, 0x4B2E, 0x3229, 0x1987, 
  0x21A8, 0x1147, 0x1147, 0x1147, 0x21CA, 0x1168, 0x1127, 0x0906, 
  0x21CA, 0x21EB, 0x11EC, 0x01AA, 0x09EC, 0x0A0C, 0x11CB, 0x11A9, 
  0x29A7, 0x3984, 0x3183, 0x3183, 0x3184, 0x2943, 0x3164, 0x2944, 
  0x2186, 0x2985, 0x29A6, 0x29A4, 0x31E5, 0x31C5, 0x39C5, 0x31C6, 
  0x39E7, 0x39E7, 0x4226, 0x4265, 0x4A65, 0x4224, 0x4224, 0x3A03, 
  0x1987, 0x1126, 0x2103, 0x2944, 0x2986, 0x2165, 0x2945, 0x634E, 
  0x63D1, 0x42EE, 0x5370, 0x328C, 0x08E4, 0x08A3, 0x10E4, 0x1987, 
  0x2A4B, 0x3A6B, 0x3229, 0x530E, 0x29E8, 0x1987, 0x21A7, 0x2987, 
  0x1104, 0x10A3, 0x10A3, 0x10C4, 0x1945, 0x29A7, 0x2186, 0x7432, 
  0x95B8, 0x95B8, 0x8D98, 0x63D0, 0x4B0D, 0x42CD, 0x1125, 0x2187, 
  0x31A6, 0x2966, 0x29A7, 0x39C7, 0x21A7, 0x21E9, 0x532D, 0x4ACC, 
  0x63EF, 0x6C10, 0x4A69, 0x4228, 0x3207, 0x3228, 0x29E7, 0x3207, 
  0x29C5, 0x29C5, 0x29E8, 0x3208, 0x324A, 0x3228, 0x29C7, 0x29A7, 
  0x29E8, 0x21C8, 0x21C8, 0x21E9, 0x1986, 0x1966, 0x1966, 0x1966, 
  0x1945, 0x2986, 0x29A6, 0x3186, 0x2985, 0x31C6, 0x31C6, 0x31C6, 
  0x2185, 0x1925, 0x1925, 0x19E9, 0x226B, 0x2A8C, 0x1987, 0x1946, 
  0x21E8, 0x21E9, 0x1167, 0x1189, 0x1168, 0x1188, 0x1988, 0x1988, 
  0x11A9, 0x21EA, 0x326C, 0x21EA, 0x11A8, 0x21A7, 0x2965, 0x3984, 
  0x3984, 0x3984, 0x2964, 0x2964, 0x2144, 0x2164, 0x2944, 0x2924, 
  0x18E4, 0x2985, 0x31C4, 0x39E5, 0x29C4, 0x3A26, 0x5B2D, 0x426A, 
  0x2944, 0x31C5, 0x29E6, 0x31C6, 0x29A5, 0x3185, 0x2143, 0x2984, 
  0x3A6B, 0x3ACC, 0x39E8, 0x2944, 0x3186, 0x2125, 0x2125, 0x39E8, 
  0x322A, 0x322A, 0x5B70, 0x5C13, 0x326C, 0x1167, 0x1967, 0x10E4, 
  0x1905, 0x3186, 0x39E8, 0x5B2E, 0x5B4F, 0x324A, 0x21C9, 0x2A0A, 
  0x3209, 0x29C8, 0x1946, 0x1926, 0x1904, 0x2187, 0x1946, 0x29A7, 
  0x63F1, 0x9598, 0x9DFA, 0x8D77, 0x638F, 0x3A6B, 0x320A, 0x1904, 
  0x2965, 0x31A6, 0x3A6A, 0x3229, 0x2986, 0x2966, 0x3A08, 0x31C5, 
  0x31C5, 0x3A05, 0x4226, 0x39E5, 0x3205, 0x29E4, 0x2A05, 0x29E5, 
  0x29A5, 0x29A5, 0x29A6, 0x2987, 0x29C8, 0x21E9, 0x2187, 0x2145, 
  0x2187, 0x2166, 0x29C8, 0x21C8, 0x21E9, 0x2166, 0x2167, 0x2166, 
  0x2187, 0x2166, 0x3187, 0x3186, 0x39A6, 0x39C6, 0x41C6, 0x41C5, 
  0x41C5, 0x2145, 0x1946, 0x1987, 0x330F, 0x3B71, 0x2ACE, 0x19A8, 
  0x2A09, 0x2A09, 0x29A7, 0x31E8, 0x29C8, 0x3209, 0x3A09, 0x31E8, 
  0x3A09, 0x39E8, 0x39C7, 0x3166, 0x39C7, 0x39A6, 0x3985, 0x39A5, 
  0x4208, 0x41E8, 0x41C8, 0x3166, 0x2945, 0x2965, 0x3166, 0x2985, 
  0x31A5, 0x31A4, 0x31A4, 0x29A4, 0x29C4, 0x29C3, 0x4288, 0x4289, 
  0x39E6, 0x2963, 0x2984, 0x21A5, 0x3A6A, 0x530D, 0x3A09, 0x2124, 
  0x1987, 0x328C, 0x428B, 0x2104, 0x1904, 0x18E4, 0x0861, 0x18E4, 
  0x1946, 0x1905, 0x29A7, 0x3A4A, 0x21C8, 0x19C9, 0x11EA, 0x1126, 
  0x08C4, 0x10A3, 0x1105, 0x3A6B, 0x5B90, 0x5B6F, 0x326A, 0x4B2D, 
  0x532D, 0x5B4E, 0x2A29, 0x21A7, 0x2166, 0x31E8, 0x1925, 0x1946, 
  0x19A7, 0x4B2F, 0x7CD4, 0x8D77, 0x6C52, 0x29E8, 0x1924, 0x2186, 
  0x2145, 0x2986, 0x29E7, 0x29C7, 0x2185, 0x29A6, 0x31C6, 0x39E7, 
  0x2986, 0x31A6, 0x29A6, 0x31A5, 0x29A4, 0x31C5, 0x29A6, 0x3A08, 
  0x31C7, 0x29A7, 0x21A7, 0x2187, 0x1987, 0x11E9, 0x0967, 0x1926, 
  0x1925, 0x2125, 0x2166, 0x29A7, 0x2166, 0x31C8, 0x3A09, 0x31A7, 
  0x3187, 0x4229, 0x3A08, 0x3A29, 0x31C8, 0x3166, 0x3145, 0x4186, 
  0x3965, 0x2924, 0x1904, 0x2145, 0x29C7, 0x322A, 0x3229, 0x3208, 
  0x29A7, 0x31A7, 0x39C5, 0x4A26, 0x4205, 0x630A, 0x5B0C, 0x39E6, 
  0x4206, 0x4A47, 0x2984, 0x31C6, 0x3A06, 0x3A06, 0x29C4, 0x31C5, 
  0x3A26, 0x4248, 0x4267, 0x4247, 0x2986, 0x39E7, 0x39E5, 0x39C5, 
  0x29A6, 0x2985, 0x2983, 0x29C3, 0x29E3, 0x3A44, 0x3223, 0x4243, 
  0x3A23, 0x29E3, 0x19C3, 0x21A3, 0x21C4, 0x3A68, 0x42A8, 0x3227, 
  0x19A8, 0x2A0A, 0x636F, 0x29C8, 0x3209, 0x10A3, 0x0882, 0x1105, 
  0x1967, 0x1946, 0x2166, 0x29E8, 0x3AAD, 0x1988, 0x21E9, 0x1125, 
  0x1905, 0x08A3, 0x1105, 0x1105, 0x2167, 0x2125, 0x424A, 0x4AAB, 
  0x428B, 0x428B, 0x428B, 0x2A09, 0x21E9, 0x2166, 0x2986, 0x2A08, 
  0x21E8, 0x2186, 0x29E7, 0x3248, 0x3208, 0x2185, 0x2144, 0x2144, 
  0x2965, 0x2145, 0x2986, 0x29A6, 0x3208, 0x31E8, 0x31C7, 0x31C6, 
  0x3186, 0x31C8, 0x2987, 0x2945, 0x3166, 0x2965, 0x3166, 0x3166, 
  0x39E8, 0x3209, 0x29A8, 0x2146, 0x19C9, 0x11C9, 0x1167, 0x1105, 
  0x1905, 0x2125, 0x2987, 0x31C7, 0x39A7, 0x5BB1, 0x63F2, 0x42AC, 
  0x5B2E, 0x6C52, 0x5BD0, 0x53B0, 0x63D0, 0x4A49, 0x4165, 0x4164, 
  0x3925, 0x3124, 0x3145, 0x3165, 0x3986, 0x3986, 0x39A7, 0x39C6, 
  0x41A6, 0x3986, 0x41A5, 0x3964, 0x3985, 0x4A26, 0x630C, 0x39C5, 
  0x39C7, 0x39C6, 0x39C6, 0x39C6, 0x3A07, 0x42A9, 0x4247, 0x3A06, 
  0x4206, 0x31C5, 0x3A05, 0x31C5, 0x39C6, 0x39C6, 0x39C7, 0x29A6, 
  0x3A28, 0x31E4, 0x31E4, 0x3204, 0x3A24, 0x3A23, 0x3203, 0x29E3, 
  0x29C4, 0x29A3, 0x29C3, 0x3203, 0x31C3, 0x31E3, 0x3203, 0x29C2, 
  0x1166, 0x322A, 0x8493, 0x430D, 0x2209, 0x1966, 0x1966, 0x19A8, 
  0x19E9, 0x1A4B, 0x1A4B, 0x222A, 0x19C8, 0x21C8, 0x2166, 0x3A4A, 
  0x322A, 0x10E4, 0x1125, 0x10A3, 0x08C4, 0x10E4, 0x2166, 0x29E8, 
  0x1946, 0x2987, 0x3209, 0x322A, 0x324A, 0x29C7, 0x2165, 0x2165, 
  0x1943, 0x1943, 0x1903, 0x18E3, 0x10E3, 0x21A7, 0x29A7, 0x2104, 
  0x1903, 0x1903, 0x1904, 0x2146, 0x1145, 0x21A7, 0x19C8, 0x29C8, 
  0x2187, 0x29A8, 0x2966, 0x3166, 0x2945, 0x3146, 0x3166, 0x3987, 
  0x2945, 0x2125, 0x2145, 0x29A8, 0x2A09, 0x29A8, 0x2187, 0x29A8, 
  0x1925, 0x2125, 0x2946, 0x3186, 0x2945, 0x3A2A, 0x3209, 0x3187, 
  0x3A09, 0x532E, 0x4B2E, 0x3A8B, 0x4AEC, 0x528A, 0xBB66, 0xE3E7, 
  0xB3A7, 0x51A5, 0x2104, 0x2946, 0x31E8, 0x3A4A, 0x3A2A, 0x39E8, 
  0x3186, 0x39A6, 0x4184, 0x59A4, 0x4163, 0x4983, 0x4984, 0x4184, 
  0x3944, 0x39A4, 0x41C5, 0x41E5, 0x4206, 0x4247, 0x4246, 0x4226, 
  0x3A25, 0x3A05, 0x31C4, 0x4205, 0x31C6, 0x39E7, 0x3A27, 0x39E5, 
  0x31E3, 0x3203, 0x31E4, 0x31A4, 0x2182, 0x21A3, 0x21A3, 0x29A3, 
  0x2182, 0x29A3, 0x29A3, 0x31E4, 0x3204, 0x31E3, 0x2182, 0x2182, 
  0x222A, 0x2A09, 0x6BB0, 0x6C32, 0x29C8, 0x10A3, 0x18E4, 0x08A3, 
  0x1925, 0x1126, 0x1988, 0x1146, 0x1946, 0x1945, 0x2166, 0x3A29, 
  0x426A, 0x29A7, 0x3187, 0x2125, 0x18E4, 0x10C3, 0x18E4, 0x1945, 
  0x2166, 0x1925, 0x2146, 0x1925, 0x2167, 0x2166, 0x2144, 0x18E3, 
  0x18E4, 0x1125, 0x10E4, 0x10C3, 0x1925, 0x1966, 0x29A7, 0x2103, 
  0x31E8, 0x31E7, 0x2104, 0x1946, 0x1967, 0x2166, 0x2146, 0x3229, 
  0x2A09, 0x2A09, 0x2966, 0x3186, 0x3166, 0x3165, 0x3966, 0x3145, 
  0x3145, 0x2104, 0x2945, 0x2966, 0x29C8, 0x1966, 0x2146, 0x2125, 
  0x2104, 0x2104, 0x2945, 0x2925, 0x2945, 0x2945, 0x3166, 0x2924, 
  0x3125, 0x3124, 0x3145, 0x2945, 0x2987, 0x4185, 0xDC69, 0xFD28, 
  0xFD08, 0x6A45, 0x2945, 0x29A6, 0x3229, 0x324A, 0x31C8, 0x2966, 
  0x31A7, 0x49C6, 0xABA5, 0xED64, 0xDD04, 0xB3A3, 0x8244, 0xBCC5, 
  0x9365, 0x6225, 0x51A5, 0x4184, 0x49E4, 0x4204, 0x4245, 0x4244, 
  0x4A86, 0x31E5, 0x3185, 0x31A5, 0x39E8, 0x39C7, 0x39C5, 0x31C4, 
  0x31E4, 0x31C3, 0x29A3, 0x29A3, 0x29A3, 0x29A3, 0x31E5, 0x3183, 
  0x29A3, 0x29A3, 0x2983, 0x2984, 0x31E6, 0x2984, 0x29A3, 0x2982, 
  0x29C8, 0x324B, 0x426A, 0x8492, 0x3A6A, 0x10E4, 0x08A3, 0x10E4, 
  0x29A8, 0x29E9, 0x29A7, 0x29A7, 0x2166, 0x1926, 0x42AB, 0x63B0, 
  0x638E, 0x4A4A, 0x2986, 0x31A6, 0x2924, 0x2924, 0x1904, 0x1904, 
  0x2145, 0x1925, 0x1946, 0x2166, 0x1146, 0x1105, 0x1925, 0x2124, 
  0x1945, 0x1966, 0x08C3, 0x10C3, 0x21C8, 0x29C8, 0x2145, 0x2103, 
  0x31A6, 0x31C7, 0x18E3, 0x2125, 0x1924, 0x2124, 0x1903, 0x29A6, 
  0x2965, 0x2945, 0x2103, 0x2103, 0x20E2, 0x20E3, 0x20E3, 0x2903, 
  0x2903, 0x2924, 0x2103, 0x2104, 0x1903, 0x1945, 0x1104, 0x18E3, 
  0x18C3, 0x20E3, 0x2124, 0x31E8, 0x42ED, 0x63F1, 0x534E, 0x39E8, 
  0x6227, 0x6206, 0x49C5, 0x3165, 0x39A6, 0xA3CA, 0xF58B, 0xFD8B, 
  0xFD69, 0x9306, 0x2124, 0x2986, 0x31E8, 0x31E8, 0x3185, 0x4185, 
  0x5A05, 0xCC06, 0xFDA7, 0xFE68, 0xFEA6, 0xE565, 0xB423, 0xD545, 
  0xBC85, 0xB3E6, 0x61E5, 0x3964, 0x41A3, 0x39E4, 0x3206, 0x42CA, 
  0x3A68, 0x39C6, 0x29C6, 0x3A29, 0x31A5, 0x3185, 0x2103, 0x2963, 
  0x2963, 0x31A4, 0x31C3, 0x29C3, 0x21A3, 0x2983, 0x2963, 0x2143, 
  0x2163, 0x29A4, 0x1902, 0x1903, 0x1902, 0x2143, 0x1962, 0x2162, 
  0x1083, 0x31E9, 0x630B, 0x6B8D, 0x2146, 0x1904, 0x1925, 0x10A3, 
  0x10A3, 0x3209, 0x3A4A, 0x29A7, 0x2987, 0x1905, 0x3187, 0x6BAF, 
  0x8431, 0x632C, 0x3166, 0x2104, 0x2924, 0x2104, 0x1904, 0x1904, 
  0x2146, 0x1925, 0x2166, 0x1946, 0x1925, 0x10C4, 0x1905, 0x2986, 
  0x2987, 0x1925, 0x18E4, 0x1904, 0x29A7, 0x29A7, 0x3A28, 0x1902, 
  0x2123, 0x2103, 0x2103, 0x18E3, 0x2104, 0x2124, 0x2124, 0x2944, 
  0x2965, 0x2145, 0x2145, 0x2125, 0x3209, 0x3AAC, 0x3ACC, 0x328B, 
  0x3A6B, 0x21A7, 0x29C8, 0x326B, 0x3AAD, 0x3ACD, 0x2A2B, 0x1946, 
  0x2A4B, 0x2A2A, 0x3ACD, 0x53F1, 0x6C74, 0x6433, 0x5390, 0x5ACB, 
  0xD3A9, 0xF408, 0xE46B, 0xC42B, 0xCC8C, 0xED6E, 0xFDAF, 0xFD8D, 
  0xFDAD, 0xD48B, 0x7AE8, 0x6AA8, 0x8AE6, 0xAB44, 0xD489, 0xDCEA, 
  0xF52A, 0xFD8A, 0xFDCB, 0xFE4B, 0xFE49, 0xFE48, 0xFE88, 0xE568, 
  0xD4E8, 0xE5C9, 0xDDCC, 0x6A87, 0x41A4, 0x2985, 0x1946, 0x29A6, 
  0x31A6, 0x2965, 0x31C7, 0x2165, 0x2925, 0x3164, 0x2984, 0x2183, 
  0x2983, 0x3184, 0x2984, 0x2143, 0x2963, 0x2963, 0x2943, 0x2123, 
  0x2144, 0x2143, 0x1923, 0x1922, 0x31A4, 0x31A3, 0x29A3, 0x2162, 
  0x0020, 0x18C3, 0x5AEB, 0x4229, 0x10A3, 0x18E4, 0x18C3, 0x2105, 
  0x1924, 0x2105, 0x2966, 0x2966, 0x18E4, 0x0862, 0x0841, 0x2925, 
  0x39C7, 0x2945, 0x18C4, 0x2105, 0x31A7, 0x2104, 0x18A2, 0x18A3, 
  0x1905, 0x2125, 0x1925, 0x2166, 0x1104, 0x10C4, 0x10E4, 0x31E8, 
  0x2124, 0x18C3, 0x18A3, 0x2925, 0x2145, 0x2125, 0x39E7, 0x2944, 
  0x1902, 0x2144, 0x3186, 0x71E7, 0x49A5, 0x20E3, 0x29A7, 0x3B30, 
  0x22CE, 0x1A2B, 0x11C9, 0x1168, 0x1A0A, 0x3B92, 0x5455, 0x5455, 
  0x4C75, 0x3BF3, 0x4414, 0x4456, 0x3C14, 0x3BB3, 0x2B31, 0x11CA, 
  0x1A2B, 0x330F, 0x53F2, 0x6454, 0x4BB1, 0x3B0F, 0x3A4A, 0x92A8, 
  0xE3A8, 0xEB47, 0xE346, 0xEBE9, 0xEC49, 0xECEC, 0xED4D, 0xF56E, 
  0xF58E, 0xFD8E, 0xFD6D, 0xFD2C, 0xFCE9, 0xFC85, 0xFCA4, 0xFD27, 
  0xFD6A, 0xFDAC, 0xFDCD, 0xFE2F, 0xFE0D, 0xFE0D, 0xFDEC, 0xFE2B, 
  0xFE4A, 0xF62B, 0xCD2A, 0x6246, 0x29A5, 0x2166, 0x1944, 0x29E8, 
  0x2A4A, 0x29C8, 0x1965, 0x21A7, 0x2164, 0x2943, 0x29A3, 0x31E3, 
  0x2983, 0x2144, 0x1923, 0x2143, 0x2142, 0x2163, 0x1922, 0x1923, 
  0x1923, 0x1943, 0x1962, 0x29A3, 0x3183, 0x2923, 0x18E2, 0x18E2, 
  0x0862, 0x1082, 0x29A7, 0x29E7, 0x3208, 0x2125, 0x18A4, 0x18A3, 
  0x18C4, 0x1062, 0x18A3, 0x18A3, 0x1083, 0x0861, 0x1082, 0x2925, 
  0x39A7, 0x10A3, 0x18C3, 0x4209, 0x5AEC, 0x2945, 0x1082, 0x0841, 
  0x18C4, 0x1904, 0x1905, 0x1925, 0x1904, 0x10A3, 0x18E4, 0x2144, 
  0x2965, 0x1904, 0x2945, 0x2104, 0x2104, 0x18C3, 0x2945, 0x2124, 
  0x2124, 0x51E7, 0xA2C9, 0xE307, 0x9A46, 0x20E3, 0x322A, 0x1AAE, 
  0x1A8D, 0x122B, 0x0989, 0x0127, 0x0989, 0x11EA, 0x2ACE, 0x4C34, 
  0x4435, 0x4475, 0x4C97, 0x4CB7, 0x4C96, 0x2B51, 0x1AAE, 0x124C, 
  0x2ACE, 0x32ED, 0x53B1, 0x4BB1, 0x3B0E, 0x324A, 0x5A69, 0xCBEA, 
  0xDC0A, 0xD3A9, 0xDB89, 0xDB88, 0xE3C9, 0xDC6B, 0xDD4F, 0xDD90, 
  0xE5B0, 0xED6F, 0xFD2D, 0xFD0B, 0xFD4D, 0xFCC9, 0xFCA8, 0xFD09, 
  0xFD8D, 0xF5CE, 0xF610, 0xEE10, 0xEE31, 0xE630, 0xF630, 0xDD4C, 
  0xE56B, 0xA3C9, 0x4964, 0x2104, 0x2166, 0x2144, 0x2145, 0x2145, 
  0x21A7, 0x21C8, 0x2209, 0x2985, 0x2944, 0x2963, 0x3A05, 0x21A3, 
  0x2163, 0x1964, 0x29A6, 0x2143, 0x2123, 0x1944, 0x2183, 0x2162, 
  0x2183, 0x2183, 0x2163, 0x2123, 0x2102, 0x18C2, 0x18E2, 0x18E2, 
  0x10A3, 0x18A3, 0x10A3, 0x10A3, 0x20E4, 0x18E4, 0x2146, 0x18C3, 
  0x1062, 0x1082, 0x10A3, 0x18C3, 0x10A3, 0x10A3, 0x1904, 0x39C7, 
  0x39C7, 0x2105, 0x18C3, 0x39E8, 0x39C7, 0x2945, 0x10A2, 0x10A2, 
  0x18C3, 0x18E4, 0x10E4, 0x1905, 0x10E3, 0x10C3, 0x10C3, 0x2145, 
  0x1924, 0x2125, 0x31A6, 0x2124, 0x1903, 0x2124, 0x2104, 0x2103, 
  0x4985, 0xC38A, 0xDB48, 0xE328, 0xC2C7, 0x7206, 0x5207, 0x220A, 
  0x19EA, 0x1A0B, 0x0967, 0x0947, 0x126D, 0x120B, 0x0947, 0x2ACE, 
  0x4455, 0x4476, 0x4C96, 0x4435, 0x1A4C, 0x1168, 0x11A9, 0x11C9, 
  0x2AAD, 0x430E, 0x3B0E, 0x32CD, 0x324A, 0x4229, 0xA3EB, 0xCCEE, 
  0xCCCD, 0xCCEE, 0xC4EE, 0xCD0E, 0xCCEE, 0xD50E, 0xD54F, 0xD590, 
  0xD570, 0xDD90, 0xDD6F, 0xE56F, 0xE56F, 0xE56F, 0xE54E, 0xE58F, 
  0xDD8F, 0xDDD0, 0xD5D0, 0xDDF0, 0xD5F0, 0xDE10, 0xDE10, 0xBD4E, 
  0xCD6F, 0xDDD0, 0x5A47, 0x2924, 0x20E3, 0x18A3, 0x10E4, 0x1904, 
  0x1904, 0x2145, 0x1945, 0x2144, 0x18E2, 0x20E3, 0x2123, 0x2163, 
  0x2162, 0x1923, 0x1944, 0x2143, 0x1942, 0x2162, 0x2162, 0x2943, 
  0x2123, 0x2123, 0x1102, 0x1923, 0x1902, 0x2123, 0x1922, 0x1922, 
  0x1062, 0x1061, 0x1082, 0x0841, 0x18C3, 0x10C4, 0x2125, 0x2104, 
  0x10A3, 0x1904, 0x2125, 0x1904, 0x2105, 0x2105, 0x2945, 0x3186, 
  0x41E8, 0x2945, 0x2945, 0x3166, 0x2925, 0x20E4, 0x18E4, 0x10C3, 
  0x2104, 0x18E4, 0x2125, 0x1925, 0x1925, 0x10E4, 0x2145, 0x2145, 
  0x2945, 0x3165, 0x3165, 0x18C3, 0x2104, 0x2103, 0x2904, 0x51C5, 
  0x9B09, 0xCBAA, 0xD369, 0xD349, 0xE369, 0xE369, 0xD369, 0x7228, 
  0x29CA, 0x2A8D, 0x19A8, 0x1A2B, 0x2B51, 0x1A4C, 0x11EA, 0x1AAD, 
  0x4C55, 0x4414, 0x4C56, 0x2ACE, 0x1168, 0x1168, 0x1188, 0x1147, 
  0x328C, 0x3ACD, 0x326C, 0x2A09, 0x3A09, 0x8B2A, 0xD48D, 0xCCAD, 
  0xCCEF, 0xC50F, 0xC54F, 0xC54F, 0xC570, 0xCD4F, 0xD54F, 0xDD2E, 
  0xED2E, 0xE52E, 0xD570, 0xCD70, 0xD590, 0xCD90, 0xD590, 0xCD8F, 
  0xD5B0, 0xCD90, 0xD5B0, 0xCDB0, 0xD5D0, 0xD5D0, 0xD5F0, 0xD610, 
  0xE651, 0x9C2C, 0x41A6, 0x2986, 0x31A8, 0x1904, 0x18C3, 0x1903, 
  0x2123, 0x1903, 0x2166, 0x2144, 0x20E2, 0x2123, 0x18E3, 0x18E2, 
  0x2123, 0x1942, 0x1943, 0x1902, 0x2103, 0x2122, 0x2123, 0x2102, 
  0x2123, 0x18E2, 0x1903, 0x1902, 0x2103, 0x2143, 0x3AAB, 0x2A29, 
  0x0840, 0x18A2, 0x3185, 0x39E7, 0x2165, 0x18C3, 0x2144, 0x2945, 
  0x1904, 0x2966, 0x18E4, 0x2105, 0x2104, 0x3166, 0x2945, 0x3146, 
  0x2925, 0x2925, 0x2104, 0x2925, 0x2925, 0x2945, 0x2104, 0x18E4, 
  0x18E3, 0x1904, 0x29A7, 0x31E8, 0x31E8, 0x3A08, 0x31C8, 0x29A7, 
  0x2166, 0x2965, 0x2124, 0x18A3, 0x18C2, 0x49A6, 0x82A8, 0xAB8B, 
  0xB38B, 0xBB8B, 0xC34A, 0xCB6A, 0xCB49, 0xD36A, 0xD38A, 0xD36A, 
  0x5A28, 0x1A0B, 0x1167, 0x2AEF, 0x33D3, 0x3371, 0x2B30, 0x230F, 
  0x22EF, 0x228D, 0x230F, 0x1A6D, 0x122B, 0x1A4C, 0x11A9, 0x21EA, 
  0x226B, 0x2A6B, 0x21A8, 0x31E8, 0x72C9, 0xC46D, 0xCC8D, 0xD46C, 
  0xD44B, 0xD48D, 0xC4CE, 0xC50F, 0xBD0E, 0xBD4F, 0xBD2F, 0xD52F, 
  0xDCED, 0xDD0E, 0xC52F, 0xC56F, 0xBD4F, 0xC56F, 0xBD4F, 0xC56F, 
  0xBD6F, 0xC56F, 0xC56F, 0xC590, 0xC58F, 0xCD90, 0xCD90, 0xD5D1, 
  0xCDD0, 0x9C2C, 0x3165, 0x2146, 0x31E7, 0x428A, 0x29A6, 0x20E3, 
  0x18E2, 0x2143, 0x2123, 0x2103, 0x18C2, 0x2103, 0x10C2, 0x20E3, 
  0x2143, 0x1923, 0x1902, 0x1922, 0x2143, 0x2143, 0x1903, 0x2103, 
  0x10C2, 0x18E2, 0x1902, 0x1903, 0x18E2, 0x2144, 0x2209, 0x2165, 
  0x1061, 0x2125, 0x4A08, 0x5ACB, 0x2986, 0x2104, 0x41E8, 0x18E4, 
  0x18E4, 0x1082, 0x18A3, 0x18E4, 0x2925, 0x2925, 0x3987, 0x2945, 
  0x2925, 0x2904, 0x2904, 0x2924, 0x3146, 0x2945, 0x2946, 0x2945, 
  0x2125, 0x2125, 0x39C8, 0x3A08, 0x3A09, 0x3A08, 0x3A09, 0x3A08, 
  0x3208, 0x31C7, 0x2125, 0x18A2, 0x4185, 0x9B2A, 0xB38B, 0xAB6B, 
  0xAB8C, 0xAB6B, 0xBB6B, 0xBB4B, 0xC34A, 0xCB4A, 0xCB8B, 0xC3AB, 
  0x9B4B, 0x21C9, 0x1968, 0x22EF, 0x33B3, 0x2B72, 0x3392, 0x2B30, 
  0x22AE, 0x22EF, 0x2331, 0x2310, 0x2B51, 0x2B30, 0x1A4C, 0x220A, 
  0x32AD, 0x2209, 0x39E9, 0x6AEA, 0xB46E, 0xBCAE, 0xC4AE, 0xCC6D, 
  0xDC6C, 0xD46C, 0xCCAE, 0xCC8D, 0xD4CE, 0xC4EE, 0xC50F, 0xC50F, 
  0xD4EE, 0xD4EE, 0xCD0F, 0xBD2F, 0xBD2F, 0xB52F, 0xBD4F, 0xB52F, 
  0xBD4F, 0xBD4F, 0xBD6F, 0xBD4F, 0xC570, 0xC56F, 0xCD90, 0xCDB0, 
  0xCD90, 0x9C4D, 0x39A6, 0x29A7, 0x3A29, 0x3A8A, 0x4ACC, 0x31C7, 
  0x2923, 0x2142, 0x2103, 0x18C2, 0x2103, 0x2123, 0x2124, 0x2123, 
  0x2143, 0x1922, 0x2984, 0x2163, 0x2964, 0x2163, 0x2164, 0x1943, 
  0x1964, 0x1922, 0x1923, 0x1903, 0x2123, 0x1903, 0x1903, 0x10A2, 
  0x10E3, 0x2166, 0x31C7, 0x3A09, 0x2145, 0x3187, 0x31C7, 0x2104, 
  0x18E4, 0x3187, 0x3186, 0x3166, 0x3186, 0x3146, 0x2925, 0x2905, 
  0x2904, 0x2104, 0x20E3, 0x2904, 0x2925, 0x3146, 0x3165, 0x3187, 
  0x4A49, 0x4A4A, 0x2966, 0x3187, 0x39E8, 0x4229, 0x31C7, 0x3A08, 
  0x31E8, 0x31C7, 0x31C7, 0x5228, 0x8B2B, 0xA36C, 0xA32A, 0xA34B, 
  0x9B4B, 0xA36C, 0xA36B, 0xAB6C, 0xB34B, 0xC34A, 0xB34A, 0xB3AC, 
  0x9BAC, 0x31C8, 0x0967, 0x2B30, 0x3C14, 0x33B3, 0x2310, 0x2B51, 
  0x230F, 0x2B72, 0x2B92, 0x2330, 0x1AEF, 0x2330, 0x126C, 0x2A8B, 
  0x2A2A, 0x3209, 0x6AEA, 0xA4AE, 0xA4CE, 0xACCE, 0xB48D, 0xBC6D, 
  0xC44D, 0xCC6D, 0xBC6D, 0xCC6D, 0xD46C, 0xDC6D, 0xCC8D, 0xB4EE, 
  0xB4EE, 0xC4CE, 0xD4AD, 0xD4AE, 0xD4AD, 0xD4CE, 0xC4CE, 0xBD2F, 
  0xA4AE, 0xA4AE, 0xB52F, 0xACCE, 0xA4AE, 0xACCE, 0xBD4F, 0xBD30, 
  0x5A68, 0x3165, 0x31E7, 0x3229, 0x3208, 0x426A, 0x3A6A, 0x4AEC, 
  0x2965, 0x20E2, 0x20E2, 0x2123, 0x20E2, 0x2943, 0x18E2, 0x18C2, 
  0x18E2, 0x2943, 0x2943, 0x2143, 0x2123, 0x2123, 0x1923, 0x2164, 
  0x1943, 0x2163, 0x1902, 0x1903, 0x2143, 0x2123, 0x10E2, 0x18E2, 
  0x2166, 0x2966, 0x52AB, 0x31A7, 0x39A7, 0x2946, 0x2925, 0x2104, 
  0x5AEC, 0x8451, 0x8C51, 0x8451, 0x5A8B, 0x2925, 0x2905, 0x20E4, 
  0x2925, 0x18C3, 0x2904, 0x2904, 0x2925, 0x3146, 0x3166, 0x2946, 
  0x526A, 0x630D, 0x528B, 0x39C7, 0x4A29, 0x39E8, 0x4229, 0x4249, 
  0x4A29, 0x3187, 0x39A7, 0x5A49, 0x93AD, 0x938C, 0x938D, 0x938C, 
  0x9BAD, 0x9B8D, 0x9BAD, 0xA3AD, 0xABAD, 0xB3AC, 0xB3CD, 0xABED, 
  0xAC0E, 0x4A28, 0x1147, 0x1A6C, 0x2B72, 0x1B0F, 0x2310, 0x2330, 
  0x2B72, 0x2310, 0x2331, 0x2330, 0x22CE, 0x1A8D, 0x1A4C, 0x32AD, 
  0x29EA, 0x8227, 0xDB89, 0xCC0B, 0xBC4D, 0xAC6D, 0xAC8E, 0xAC6D, 
  0xBC6E, 0xBC4D, 0xBC6E, 0xC44D, 0xD44C, 0xE42B, 0xE44B, 0xCC6D, 
  0xBCAE, 0xB4CF, 0xBCCF, 0xB46E, 0xBCCF, 0xC4CF, 0xDC8D, 0xBC0C, 
  0x5A48, 0x41C6, 0x62EA, 0x41E7, 0x41C7, 0x3985, 0x62C9, 0x5268, 
  0x3186, 0x2966, 0x3A49, 0x3A6A, 0x428A, 0x428A, 0x4ACC, 0x4B2D, 
  0x4AAB, 0x1905, 0x20A3, 0x2103, 0x2923, 0x2123, 0x2144, 0x2143, 
  0x2123, 0x2123, 0x20E3, 0x2943, 0x3184, 0x2163, 0x2123, 0x2143, 
  0x2984, 0x2164, 0x2143, 0x1923, 0x2103, 0x1923, 0x2164, 0x1103, 
  0x10E4, 0x2966, 0x4209, 0x41E8, 0x39E8, 0x2925, 0x4209, 0x634D, 
  0x73CF, 0x73AF, 0x6B2D, 0x5249, 0x2925, 0x20E4, 0x18C3, 0x20C4, 
  0x20E4, 0x18C3, 0x2925, 0x3987, 0x41C7, 0x41C8, 0x41E8, 0x5249, 
  0x4A29, 0x62CC, 0x6B0D, 0x524A, 0x3186, 0x41E9, 0x41E8, 0x422A, 
  0x4A6A, 0x424A, 0x2125, 0x3966, 0x834C, 0x8B8D, 0x8BAD, 0x8BCE, 
  0x8BCD, 0x9BCE, 0x9BAD, 0xA3AD, 0xA3AD, 0xA3CE, 0xA40E, 0xA44F, 
  0xA42E, 0x6ACA, 0x1106, 0x19C9, 0x2310, 0x22EF, 0x1B0F, 0x2B51, 
  0x2330, 0x2B51, 0x1AEF, 0x22AE, 0x1A6C, 0x1A2B, 0x11C9, 0x222B, 
  0x5A07, 0xEAC5, 0xFAA4, 0xFAC5, 0xF2E6, 0xE369, 0xC3EB, 0xB42D, 
  0xAC2D, 0xB44E, 0xAC6D, 0xB46E, 0xC44C, 0xDC2C, 0xDC2B, 0xDC4C, 
  0xCC4C, 0xABED, 0x6289, 0x4A28, 0x5289, 0x6AEA, 0x5A28, 0x49C7, 
  0x3186, 0x39E7, 0x4248, 0x3A29, 0x31A6, 0x31A6, 0x3A08, 0x39E8, 
  0x31C7, 0x31E8, 0x3208, 0x3A29, 0x3A69, 0x530C, 0x538F, 0x534E, 
  0x430D, 0x3B0E, 0x29C8, 0x18A3, 0x1986, 0x2A4A, 0x2964, 0x2944, 
  0x1902, 0x18C2, 0x18E2, 0x2923, 0x2184, 0x2A28, 0x2A07, 0x3249, 
  0x2A07, 0x3229, 0x3269, 0x42CB, 0x3AA9, 0x432D, 0x436E, 0x4B4D, 
  0x1905, 0x2145, 0x31A7, 0x4209, 0x3987, 0x526A, 0x94B3, 0x7BCF, 
  0x39A7, 0x3166, 0x3146, 0x2904, 0x20E4, 0x20E4, 0x20E4, 0x18C3, 
  0x20E4, 0x2104, 0x28E4, 0x41A7, 0x5229, 0x41C8, 0x41C8, 0x734E, 
  0x736E, 0x62EC, 0x526B, 0x4209, 0x2946, 0x3187, 0x3187, 0x39A8, 
  0x39E8, 0x2987, 0x3987, 0x7A89, 0x9B6D, 0x936D, 0x93CE, 0x93CE, 
  0x93EE, 0x93EE, 0x9BEE, 0xA3AD, 0xABEE, 0xA3EE, 0xA42F, 0xA46F, 
  0xA490, 0x7B8C, 0x2987, 0x1147, 0x1A0B, 0x1B10, 0x2351, 0x2B71, 
  0x2B51, 0x2350, 0x2B10, 0x1ACE, 0x22EF, 0x1A2B, 0x19EA, 0x31E8, 
  0xC2A7, 0xFB06, 0xFAC6, 0xFA84, 0xFA84, 0xFA83, 0xFB06, 0xE348, 
  0xD3CA, 0xC3EB, 0xBC4E, 0xB46E, 0xBC8E, 0xC46D, 0xD46D, 0xC40C, 
  0x7AA9, 0x41A6, 0x39C7, 0x39E7, 0x3187, 0x31A7, 0x39E8, 0x3208, 
  0x3208, 0x3229, 0x4B0C, 0x532D, 0x3A8A, 0x3A49, 0x52EC, 0x52CC, 
  0x426A, 0x3A49, 0x426A, 0x428B, 0x428B, 0x4B4D, 0x7431, 0x5BD0, 
  0x532D, 0x432D, 0x42ED, 0x2987, 0x31C8, 0x2188, 0x2926, 0x2104, 
  0x2944, 0x18E3, 0x2166, 0x2985, 0x3A6A, 0x432D, 0x4B0C, 0x432E, 
  0x42CB, 0x42AA, 0x536D, 0x536E, 0x538E, 0x53D0, 0x5C11, 0x4B8E, 
  0x1925, 0x2946, 0x2124, 0x3145, 0x526A, 0x9493, 0x6B4D, 0x3966, 
  0x2925, 0x2924, 0x2924, 0x20E4, 0x18C3, 0x20E4, 0x18C3, 0x20E3, 
  0x18C3, 0x20E4, 0x18C3, 0x3166, 0x2104, 0x20E4, 0x18C3, 0x4A29, 
  0x5ACC, 0x4A4A, 0x31A7, 0x3186, 0x3166, 0x3186, 0x3186, 0x3186, 
  0x3986, 0x49C7, 0x7269, 0xA32C, 0xAB0B, 0xAB4C, 0x9B8D, 0xA3AD, 
  0xA38D, 0x9BEE, 0x940E, 0x9C0F, 0x9C0E, 0xA42F, 0x9C2F, 0x9C6F, 
  0x946F, 0x942F, 0x3A08, 0x1147, 0x0905, 0x122B, 0x1AEE, 0x2B51, 
  0x2330, 0x230F, 0x1AAD, 0x1A6D, 0x1A8D, 0x1A4C, 0x4A69, 0xB308, 
  0xEB47, 0xEB27, 0xE2C6, 0xF285, 0xF264, 0xEA64, 0xC245, 0x9246, 
  0xC2A6, 0xF367, 0xDBA9, 0xD40B, 0xCC2C, 0xCC6D, 0xBC2D, 0x6A68, 
  0x3165, 0x39E8, 0x3208, 0x3208, 0x29A6, 0x3208, 0x3208, 0x3A6A, 
  0x2A29, 0x326A, 0x328B, 0x42EC, 0x3A8A, 0x3A8A, 0x532D, 0x5B6E, 
  0x4B2D, 0x4AED, 0x42CC, 0x4AEC, 0x3A8B, 0x42ED, 0x538E, 0x6C10, 
  0x4B0C, 0x530C, 0x4AEC, 0x430E, 0x3A09, 0x2967, 0x18E4, 0x18A3, 
  0x2145, 0x3AED, 0x436F, 0x42AA, 0x430C, 0x4B0E, 0x42CC, 0x4ACB, 
  0x42AA, 0x4A8A, 0x4289, 0x4AAB, 0x430C, 0x4B4D, 0x432D, 0x4B8E, 
  0x18C3, 0x31C7, 0x5B0D, 0x52AB, 0x8C52, 0x62CC, 0x2925, 0x2904, 
  0x2925, 0x2104, 0x2904, 0x18C3, 0x20C4, 0x2904, 0x3146, 0x2904, 
  0x2104, 0x2104, 0x3145, 0x3145, 0x2925, 0x20E4, 0x20E4, 0x2946, 
  0x39A7, 0x3166, 0x3186, 0x31A6, 0x39C8, 0x39C7, 0x39A7, 0x39C7, 
  0x7B0C, 0x936D, 0x9B6D, 0x936D, 0xA36D, 0xAB4C, 0xB36D, 0xAB6C, 
  0xB36D, 0xB38D, 0xABCE, 0xA3EE, 0x9C30, 0x944F, 0x9470, 0x9470, 
  0x9470, 0x9C4F, 0x52CA, 0x1126, 0x1126, 0x0926, 0x1A4C, 0x230F, 
  0x2B51, 0x230F, 0x22CE, 0x1A6C, 0x1A2B, 0x29E9, 0xB36B, 0xDBEB, 
  0xE3AA, 0xE348, 0xE308, 0xEA85, 0xA226, 0x59E7, 0x41E8, 0x4208, 
  0x6228, 0xAA86, 0xEB47, 0xF3A8, 0xEBEA, 0xCB8A, 0x6A48, 0x31A6, 
  0x3A08, 0x3A29, 0x3A29, 0x3228, 0x31E8, 0x3208, 0x31E8, 0x2A08, 
  0x324A, 0x3209, 0x3A4A, 0x3229, 0x3229, 0x3249, 0x4AEC, 0x5B8F, 
  0x5B6F, 0x530D, 0x530D, 0x426A, 0x428B, 0x42AB, 0x4AEC, 0x63AE, 
  0x5B0D, 0x4B0C, 0x532D, 0x4B6F, 0x5BF2, 0x39C6, 0x2903, 0x2103, 
  0x3229, 0x430E, 0x432E, 0x4AEB, 0x536E, 0x4B2E, 0x424A, 0x4248, 
  0x4AAA, 0x4A49, 0x4A49, 0x4248, 0x3A69, 0x3AAB, 0x42EC, 0x432D, 
  0x18C3, 0x6B6E, 0x94D4, 0x8C93, 0x528A, 0x18C3, 0x18E3, 0x20E4, 
  0x20E3, 0x20E4, 0x20E3, 0x20E4, 0x20E4, 0x2904, 0x2925, 0x3166, 
  0x2124, 0x2924, 0x2945, 0x3165, 0x2944, 0x2925, 0x39C8, 0x41E9, 
  0x31A7, 0x4A29, 0x6B6E, 0x738F, 0x4208, 0x39C7, 0x5AAB, 0x7B6D, 
  0x83CE, 0x93AE, 0x936D, 0x938E, 0x938E, 0x9B8E, 0xA36D, 0xAB6D, 
  0xAB6D, 0xB36C, 0xB36C, 0xABCE, 0x9BEE, 0x9450, 0x8450, 0x8471, 
  0x8470, 0x8C70, 0x7BAD, 0x2987, 0x08E5, 0x08E5, 0x1146, 0x22EF, 
  0x2310, 0x22EF, 0x1A8D, 0x228D, 0x120A, 0x4229, 0xBBCC, 0xD40C, 
  0xD3CA, 0xDB8A, 0xD328, 0x9226, 0x39C7, 0x39E8, 0x4A28, 0x4A49, 
  0x4A29, 0x5249, 0x7248, 0xC2C6, 0xE367, 0x61E6, 0x2965, 0x3A08, 
  0x31C6, 0x31C7, 0x3229, 0x3A28, 0x3208, 0x3228, 0x3248, 0x3229, 
  0x3249, 0x3209, 0x29E8, 0x3229, 0x3249, 0x3A8A, 0x428B, 0x63D0, 
  0x63D0, 0x536E, 0x4B0C, 0x530D, 0x42CB, 0x42EC, 0x3AAB, 0x5B6E, 
  0x530C, 0x534E, 0x538F, 0x53D1, 0x5413, 0x4BB0, 0x2985, 0x3144, 
  0x31A6, 0x29E7, 0x3AAA, 0x5B6E, 0x5B8F, 0x536F, 0x4AED, 0x5B0D, 
  0x52CC, 0x4249, 0x31E7, 0x3A28, 0x3A8A, 0x3ACC, 0x3AAB, 0x3269, 
  0x5B0C, 0x8CB3, 0x9493, 0x528B, 0x2104, 0x1082, 0x18C3, 0x18C3, 
  0x20E4, 0x20E3, 0x2904, 0x2925, 0x2905, 0x2104, 0x3125, 0x2925, 
  0x2104, 0x2924, 0x3165, 0x2945, 0x2945, 0x4229, 0x5AAB, 0x3186, 
  0x39A7, 0x4229, 0x5AAC, 0x4208, 0x3986, 0x526A, 0x83F0, 0x83EF, 
  0x83EF, 0x7BCF, 0x83CF, 0x83CF, 0x8BCF, 0x8BCE, 0x93CF, 0x93AE, 
  0x9BAE, 0xA38D, 0xB38D, 0xB36D, 0xB3AE, 0x9C0F, 0x8C50, 0x8470, 
  0x8471, 0x8470, 0x9470, 0x632C, 0x2167, 0x08E4, 0x1105, 0x224B, 
  0x22AE, 0x1A4B, 0x226D, 0x226C, 0x19E9, 0x5A69, 0xC42E, 0xC42D, 
  0xD40C, 0xCBAB, 0xC34A, 0x51E7, 0x31E8, 0x4229, 0x62CB, 0x5229, 
  0x5A6A, 0x528A, 0x5229, 0x8206, 0xCB07, 0x3965, 0x31C7, 0x3A29, 
  0x3A49, 0x3A07, 0x3A4A, 0x3A49, 0x3A6A, 0x3228, 0x3A8A, 0x3A69, 
  0x3A8A, 0x328B, 0x3209, 0x3208, 0x3A28, 0x324A, 0x42CC, 0x63F0, 
  0x6C11, 0x6432, 0x63D0, 0x534E, 0x532D, 0x536E, 0x4B4E, 0x538F, 
  0x3A6A, 0x3249, 0x538F, 0x53AF, 0x4B4E, 0x5411, 0x4B2E, 0x3A88, 
  0x430B, 0x430C, 0x5B8E, 0x536E, 0x638F, 0x5B8F, 0x634F, 0x5B0D, 
  0x5B4E, 0x532E, 0x52CC, 0x4A6A, 0x3A6A, 0x328A, 0x42AA, 0x31E8, 
  0x8493, 0x8C73, 0x528A, 0x2104, 0x18A3, 0x1082, 0x1082, 0x18A2, 
  0x18C3, 0x20E3, 0x18E3, 0x2925, 0x2104, 0x2925, 0x2104, 0x2104, 
  0x18E3, 0x2925, 0x3144, 0x2924, 0x2124, 0x528B, 0x39E8, 0x2966, 
  0x3187, 0x39A7, 0x2966, 0x41E8, 0x5ACC, 0x73AF, 0x73CF, 0x73CF, 
  0x73CF, 0x73CF, 0x73CF, 0x73EF, 0x73CF, 0x7BEF, 0x7BCE, 0x83EF, 
  0x8BCE, 0x93CF, 0x93AE, 0xAB8E, 0xB36C, 0xB38D, 0x93EF, 0x9430, 
  0x8C30, 0x8C50, 0x8C4F, 0x8C2F, 0x3A49, 0x1126, 0x1105, 0x1A0A, 
  0x1A2B, 0x1A2B, 0x122A, 0x1A4B, 0x21C8, 0x628A, 0xB42E, 0xBC2E, 
  0xB40D, 0xBBED, 0x92E9, 0x4A4A, 0x426A, 0x4A8A, 0x632C, 0x732D, 
  0x83CF, 0x6B0D, 0x51E7, 0xC308, 0xAAC7, 0x3186, 0x29A6, 0x3A69, 
  0x42CA, 0x4249, 0x3A29, 0x3A49, 0x3A48, 0x3A69, 0x328B, 0x3AAA, 
  0x3AA9, 0x432D, 0x326A, 0x324A, 0x3A28, 0x31E9, 0x3A8A, 0x536E, 
  0x6411, 0x6C32, 0x6C11, 0x6411, 0x3A8B, 0x42CC, 0x434E, 0x536F, 
  0x426A, 0x2986, 0x21C7, 0x3ACB, 0x3ACB, 0x536E, 0x5BD0, 0x5BCF, 
  0x4B2D, 0x534E, 0x430D, 0x3AAB, 0x428A, 0x42AC, 0x42CC, 0x4A6A, 
  0x4A4A, 0x4A6B, 0x3A29, 0x39C8, 0x2986, 0x31E7, 0x3A49, 0x3228, 
  0x8473, 0x5ACC, 0x2904, 0x18C3, 0x18A3, 0x1082, 0x1082, 0x10A2, 
  0x20E3, 0x18C3, 0x2104, 0x2905, 0x2905, 0x2104, 0x2104, 0x18E3, 
  0x20E4, 0x2924, 0x3145, 0x2124, 0x2945, 0x39A7, 0x3187, 0x2945, 
  0x3187, 0x2945, 0x4209, 0x738F, 0x7BF1, 0x73D0, 0x73D0, 0x73AF, 
  0x73D0, 0x6BAF, 0x73CF, 0x73AF, 0x7BD0, 0x73CF, 0x73F0, 0x73EF, 
  0x83EF, 0x8BCF, 0x93EF, 0x93CE, 0xA38E, 0xB34C, 0xABAE, 0x9BEF, 
  0x9C30, 0x9C0F, 0x9C30, 0x942F, 0x6B2C, 0x1987, 0x1125, 0x19C8, 
  0x222B, 0x1A2B, 0x220A, 0x1A0A, 0x29A8, 0x82CA, 0xC42E, 0xBC0E, 
  0xBC2E, 0xA38C, 0x5208, 0x3A4A, 0x528B, 0x528A, 0x73AF, 0x738E, 
  0x7BAF, 0x62CC, 0x8A88, 0xE348, 0x6A07, 0x31C7, 0x3208, 0x3A28, 
  0x4AEB, 0x42AB, 0x3A6A, 0x3208, 0x426A, 0x3A8A, 0x536E, 0x4B6D, 
  0x534D, 0x3B2C, 0x3B0B, 0x42EC, 0x3A6A, 0x42CC, 0x4B2D, 0x42AA, 
  0x538F, 0x63F0, 0x5BF0, 0x6C72, 0x6411, 0x3AEC, 0x32AB, 0x32AB, 
  0x42AB, 0x29E8, 0x29A7, 0x3228, 0x3AAB, 0x31E8, 0x3A28, 0x3A69, 
  0x42AB, 0x42CC, 0x42CC, 0x3A8B, 0x426B, 0x2A09, 0x3A8B, 0x3A4A, 
  0x3187, 0x2966, 0x2987, 0x2146, 0x2966, 0x29A7, 0x31C8, 0x29A7, 
  0x5ACC, 0x3187, 0x1082, 0x18C3, 0x1081, 0x1082, 0x18A2, 0x20E3, 
  0x18C2, 0x18C3, 0x2104, 0x2104, 0x20E3, 0x2104, 0x18A3, 0x18C3, 
  0x18E3, 0x2944, 0x2124, 0x2104, 0x2145, 0x3186, 0x2966, 0x2946, 
  0x2125, 0x2924, 0x5B0D, 0x7BF0, 0x73AF, 0x73B0, 0x6B8F, 0x73AF, 
  0x6B8F, 0x6BAF, 0x6BAF, 0x73AF, 0x738E, 0x73AF, 0x73AF, 0x73CF, 
  0x73CF, 0x7BCF, 0x7BCE, 0x8BCF, 0x8BAE, 0xA36D, 0xA36D, 0x9BCF, 
  0x9BCE, 0xA3EF, 0xA3CE, 0xA3EF, 0x8BCE, 0x4249, 0x10E4, 0x1167, 
  0x19E9, 0x19E9, 0x19C8, 0x19A8, 0x39A7, 0xAB8C, 0xC3EC, 0xC3ED, 
  0xBBED, 0x930B, 0x39A7, 0x4A29, 0x4228, 0x62CC, 0x6B4E, 0x6B4E, 
  0x524A, 0x4A09, 0x8268, 0xCB29, 0x41C6, 0x3229, 0x3208, 0x3A29, 
  0x4289, 0x4AEB, 0x3AAA, 0x3228, 0x3A69, 0x3AAB, 0x434D, 0x534D, 
  0x5B4C, 0x4B6B, 0x434B, 0x53D0, 0x42EC, 0x432D, 0x4B2D, 0x4B2D, 
  0x3AAA, 0x430D, 0x3AAB, 0x4B8F, 0x5C31, 0x5C11, 0x31E8, 0x31E8, 
  0x4A8A, 0x430D, 0x3AAB, 0x3A49, 0x3AAB, 0x324A, 0x29C7, 0x2987, 
  0x2186, 0x3228, 0x430D, 0x53D0, 0x5C11, 0x4B90, 0x3B2E, 0x434F, 
  0x32CC, 0x29C8, 0x31E9, 0x3A2A, 0x29E8, 0x21C8, 0x21E8, 0x29C8, 
  0x3166, 0x18E3, 0x10A2, 0x10A2, 0x18A2, 0x1082, 0x20E3, 0x20E3, 
  0x20E3, 0x18C3, 0x2104, 0x2103, 0x2124, 0x2103, 0x18C3, 0x18E3, 
  0x2104, 0x2944, 0x2924, 0x2124, 0x2966, 0x2945, 0x2946, 0x2125, 
  0x2104, 0x2945, 0x6B4E, 0x73AF, 0x738F, 0x6B8F, 0x738F, 0x736F, 
  0x6B8F, 0x638F, 0x6BB0, 0x6B8F, 0x73AF, 0x738F, 0x73AF, 0x6BAF, 
  0x73CF, 0x73AF, 0x7BCF, 0x7BCF, 0x83CF, 0x8B8E, 0x9B8E, 0x93AE, 
  0x93EF, 0x9BCE, 0xABAE, 0xABAE, 0xA3EF, 0x7B4D, 0x31A7, 0x1987, 
  0x21E9, 0x19C9, 0x21C9, 0x1967, 0x6269, 0xB3CD, 0xC3CD, 0xB3ED, 
  0xBC0E, 0x930B, 0x3987, 0x39C8, 0x31C8, 0x31E8, 0x39E9, 0x49E9, 
  0x49A7, 0x7A89, 0xC36B, 0xBB09, 0x49E7, 0x3A69, 0x31E8, 0x3A8A, 
  0x532B, 0x536C, 0x532D, 0x42CB, 0x42CA, 0x3AAB, 0x4ACB, 0x4B0B, 
  0x532C, 0x436A, 0x436B, 0x438E, 0x326A, 0x32AB, 0x430D, 0x4B2D, 
  0x42EC, 0x3B2D, 0x430D, 0x3AEC, 0x4B8F, 0x4B4D, 0x42AB, 0x3A4A, 
  0x526A, 0x4AEC, 0x4B0D, 0x42AB, 0x3A6A, 0x326A, 0x3209, 0x31A7, 
  0x3A4A, 0x29E8, 0x3A8B, 0x438F, 0x5C12, 0x5C12, 0x5C54, 0x4C33, 
  0x4390, 0x2AAC, 0x434F, 0x4BB1, 0x3B2F, 0x2A8B, 0x326B, 0x21E8, 
  0x18E3, 0x18E3, 0x10A2, 0x10A2, 0x10A2, 0x18A2, 0x18C2, 0x18C3, 
  0x18C3, 0x18E3, 0x18C2, 0x20E3, 0x20E3, 0x2104, 0x18C2, 0x2104, 
  0x2103, 0x2944, 0x1903, 0x2965, 0x2145, 0x2125, 0x1903, 0x18E3, 
  0x2945, 0x52AB, 0x6B6E, 0x738F, 0x6B6E, 0x6B6F, 0x6B6E, 0x736E, 
  0x6B6E, 0x6B8F, 0x636E, 0x6B8F, 0x6B8E, 0x6B8F, 0x6B8E, 0x6BAF, 
  0x6B8E, 0x73AF, 0x6BAE, 0x73AF, 0x73AE, 0x83AF, 0x83AE, 0x8BCE, 
  0x8BCE, 0x93CF, 0xA36D, 0xA38E, 0x9B8E, 0x9BAE, 0x5249, 0x21A8, 
  0x19E9, 0x1A0A, 0x19C8, 0x29A7, 0x8B0B, 0xBBAD, 0xBBAC, 0xB3EE, 
  0xABEE, 0xABAD, 0x7268, 0x4166, 0x2925, 0x3146, 0x3145, 0x51E7, 
  0x7268, 0xAB8C, 0xBB8B, 0xA30A, 0x41E6, 0x3A49, 0x2165, 0x2985, 
  0x42EA, 0x534C, 0x4B2D, 0x4B0C, 0x42AA, 0x3AAA, 0x3AC9, 0x3B0A, 
  0x3B2B, 0x432B, 0x3B2A, 0x3B0C, 0x2A28, 0x3249, 0x326A, 0x3A8A, 
  0x42EC, 0x4B4E, 0x2A07, 0x2A07, 0x3227, 0x29A4, 0x29C5, 0x31C6, 
  0x3A28, 0x3A08, 0x3AAB, 0x430D, 0x3AAB, 0x4B0D, 0x4B2D, 0x3209, 
  0x430D, 0x42CC, 0x328A, 0x32CC, 0x3ACC, 0x53D1, 0x4BD1, 0x4C13, 
  0x4390, 0x2A8C, 0x3B2F, 0x5413, 0x53F1, 0x536F, 0x53F1, 0x43B1, 
  0x2104, 0x18E3, 0x18C2, 0x10A1, 0x18C3, 0x18C3, 0x18E3, 0x18E3, 
  0x2104, 0x18E3, 0x18E3, 0x18C3, 0x2104, 0x2124, 0x2124, 0x2144, 
  0x2944, 0x2944, 0x2945, 0x2145, 0x2945, 0x3A08, 0x2966, 0x10C3, 
  0x4A6B, 0x6B6F, 0x6B6F, 0x6B4E, 0x6B6F, 0x6B4E, 0x6B6E, 0x6B4E, 
  0x6B6F, 0x636E, 0x6B6F, 0x636E, 0x6B8F, 0x6B6E, 0x6B8F, 0x6B6E, 
  0x6B8F, 0x6B8E, 0x6BAF, 0x6B8E, 0x73AF, 0x73AE, 0x7BAF, 0x7BAE, 
  0x8BCF, 0x8BAE, 0x9B8E, 0x9B8E, 0xA38E, 0xA36D, 0x932C, 0x39E8, 
  0x19C9, 0x19E9, 0x19A8, 0x5228, 0xB36C, 0xBB6C, 0xBBAD, 0xABAD, 
  0xABEF, 0xA3CE, 0xABAD, 0x930B, 0x8ACA, 0x8AC9, 0x9B4C, 0x9BCD, 
  0xAC0E, 0xABCD, 0xABAD, 0x82CA, 0x39A6, 0x2965, 0x20E3, 0x2123, 
  0x4289, 0x4AEC, 0x4AEC, 0x42EB, 0x42EB, 0x42EB, 0x4AEC, 0x430B, 
  0x4B0B, 0x42EA, 0x3A89, 0x3A49, 0x39C8, 0x2166, 0x31C8, 0x2145, 
  0x31E8, 0x29A6, 0x2163, 0x2162, 0x2163, 0x2143, 0x2963, 0x2163, 
  0x2965, 0x2984, 0x4B4E, 0x53D1, 0x5BB0, 0x63D0, 0x6433, 0x3A6A, 
  0x42CC, 0x4B6E, 0x4B6F, 0x432E, 0x430D, 0x4B6F, 0x5C12, 0x5433, 
  0x4BD2, 0x2A2A, 0x3AAC, 0x4B90, 0x53D1, 0x5390, 0x6474, 0x5C74, 
  0x1903, 0x18E3, 0x10A2, 0x18C2, 0x18E2, 0x20E3, 0x18E3, 0x2103, 
  0x18E3, 0x18E3, 0x18C2, 0x18E3, 0x18E3, 0x2124, 0x2124, 0x2965, 
  0x2944, 0x2965, 0x2124, 0x2104, 0x3A08, 0x6B8F, 0x4AAB, 0x3A09, 
  0x5B0D, 0x636F, 0x634E, 0x6B4E, 0x632E, 0x634E, 0x634E, 0x6B4E, 
  0x634D, 0x634E, 0x634E, 0x636E, 0x634E, 0x636E, 0x634E, 0x6B6E, 
  0x634E, 0x6B6E, 0x636E, 0x638F, 0x636E, 0x738E, 0x738E, 0x7B8F, 
  0x7B8E, 0x8B8E, 0x8B6D, 0x938E, 0x936D, 0xA34D, 0xA32C, 0x59E8, 
  0x1125, 0x1967, 0x2986, 0x8AEB, 0xAB4C, 0xB36C, 0xB36C, 0xB38D, 
  0x9BAE, 0x9BCF, 0x9BCE, 0xA3CE, 0xA3AD, 0xB3CD, 0xA3CD, 0x9C0E, 
  0x9BEE, 0x9BEE, 0x9BCD, 0x72AA, 0x3185, 0x2986, 0x18E3, 0x2104, 
  0x3A49, 0x4ACC, 0x42AB, 0x4ACB, 0x3A49, 0x42CB, 0x42CB, 0x42CB, 
  0x3A8A, 0x42AA, 0x29A7, 0x18C2, 0x1902, 0x2103, 0x20E3, 0x2986, 
  0x2965, 0x2143, 0x1921, 0x2142, 0x1922, 0x2143, 0x2143, 0x2965, 
  0x2966, 0x39C7, 0x3A09, 0x3A6B, 0x3ACC, 0x4BB0, 0x53F2, 0x430D, 
  0x3B0C, 0x3AAB, 0x3ACB, 0x4B6E, 0x434E, 0x53B0, 0x4B4F, 0x432E, 
  0x326A, 0x1943, 0x29E8, 0x3208, 0x2A08, 0x3AED, 0x32CC, 0x42ED, 
  0x2945, 0x18C2, 0x20E3, 0x2103, 0x2923, 0x2103, 0x2104, 0x2103, 
  0x2103, 0x18E3, 0x20E3, 0x18E3, 0x2103, 0x18E3, 0x2924, 0x2924, 
  0x2124, 0x1903, 0x2945, 0x39C7, 0x736F, 0x7BB0, 0x6B8F, 0x634E, 
  0x636F, 0x634E, 0x634F, 0x632E, 0x634E, 0x632E, 0x634E, 0x632E, 
  0x634E, 0x632E, 0x634E, 0x5B4E, 0x634E, 0x5B4E, 0x634E, 0x634E, 
  0x636E, 0x634E, 0x636F, 0x5B6E, 0x636F, 0x6B6E, 0x738F, 0x736E, 
  0x7B8E, 0x836D, 0x838E, 0x836E, 0x936E, 0x9B4C, 0xAB2C, 0x59C7, 
  0x1904, 0x18E4, 0x6229, 0xA34C, 0xA36D, 0xA36D, 0xAB6D, 0xAB8D, 
  0xB38D, 0xAB8D, 0xABAE, 0xA3AE, 0xABCE, 0xABAD, 0xABEE, 0xA3EE, 
  0x9C0E, 0x8BEE, 0x93EE, 0x5A69, 0x3145, 0x2104, 0x18C4, 0x2126, 
  0x4209, 0x52EC, 0x5AED, 0x52EC, 0x4A8B, 0x428B, 0x428B, 0x3A4A, 
  0x4A8C, 0x3A4A, 0x2144, 0x18E2, 0x18E2, 0x18C3, 0x18E4, 0x1062, 
  0x1082, 0x18C2, 0x2103, 0x1902, 0x2963, 0x2983, 0x39C3, 0x31A4, 
  0x31A5, 0x31C5, 0x31A6, 0x2145, 0x29C7, 0x52ED, 0x5B2E, 0x426B, 
  0x428B, 0x324A, 0x3AAC, 0x3A8B, 0x29E8, 0x31E8, 0x31A7, 0x2164, 
  0x2163, 0x1942, 0x2143, 0x1903, 0x1902, 0x1103, 0x1924, 0x1904, 
  0x4A28, 0x2104, 0x18C2, 0x3144, 0x2903, 0x2923, 0x2103, 0x2103, 
  0x18E3, 0x20E3, 0x18C2, 0x2103, 0x2103, 0x18E3, 0x18E3, 0x2103, 
  0x18E3, 0x2104, 0x5249, 0x734E, 0x7B8F, 0x736F, 0x634E, 0x634F, 
  0x5B2E, 0x5B2E, 0x5B0D, 0x5B2E, 0x5B0D, 0x5B2E, 0x5B0D, 0x5B2E, 
  0x5B0D, 0x5B2E, 0x5B0D, 0x5B2E, 0x5B2D, 0x5B2E, 0x5B2D, 0x632E, 
  0x5B2D, 0x634E, 0x5B2D, 0x5B4E, 0x5B4E, 0x6B4E, 0x6B4D, 0x736E, 
  0x734D, 0x7B6E, 0x736E, 0x836E, 0x8B4D, 0x9B2D, 0xA2EB, 0x7208, 
  0x10C3, 0x3125, 0x8A89, 0xA32C, 0x9B2C, 0xA34D, 0x934D, 0x938E, 
  0x9B8D, 0xB36D, 0xB36C, 0xB36D, 0xA38D, 0xB38D, 0xA38D, 0xA3CE, 
  0x93CD, 0x8BCE, 0x83CD, 0x62CA, 0x18C3, 0x1882, 0x1061, 0x20C3, 
  0x2925, 0x39A7, 0x3187, 0x2966, 0x2125, 0x2105, 0x2105, 0x2987, 
  0x3A09, 0x2965, 0x1922, 0x2143, 0x2142, 0x2984, 0x2985, 0x2103, 
  0x18E3, 0x20E3, 0x18E2, 0x2103, 0x2963, 0x31C4, 0x2983, 0x2943, 
  0x2922, 0x2942, 0x2142, 0x2963, 0x2143, 0x3164, 0x2924, 0x2124, 
  0x2103, 0x2124, 0x2144, 0x2965, 0x18E3, 0x2103, 0x1903, 0x2143, 
  0x2162, 0x2162, 0x1122, 0x1943, 0x1922, 0x1942, 0x1902, 0x18E3, 
  0x5AAB, 0x4A08, 0x39A6, 0x3165, 0x3124, 0x2103, 0x2924, 0x20E3, 
  0x18E3, 0x18C2, 0x18C3, 0x18E3, 0x2103, 0x18E3, 0x2103, 0x18E3, 
  0x2104, 0x41E8, 0x7B8F, 0x7B8F, 0x738F, 0x6B4E, 0x634F, 0x5B2E, 
  0x5B2E, 0x5B0E, 0x5B0E, 0x5B0D, 0x5B2E, 0x5B0D, 0x5B0E, 0x5B0D, 
  0x5B0E, 0x5B0D, 0x5B2E, 0x530D, 0x5B0E, 0x5B0D, 0x5B2E, 0x5B0D, 
  0x5B2E, 0x5B2D, 0x5B2E, 0x532D, 0x634E, 0x632D, 0x6B4E, 0x6B4D, 
  0x734E, 0x734E, 0x736E, 0x7B4D, 0x8B4D, 0x930C, 0xA2EB, 0x9269, 
  0x3966, 0x71E7, 0xB2CA, 0xA30B, 0x9B2D, 0x9B2C, 0x936D, 0x836E, 
  0x838E, 0x936D, 0x9B6D, 0x9B4C, 0xA36D, 0xAB4C, 0xAB6D, 0x9B8D, 
  0x93AE, 0x83AE, 0x83AE, 0x6B2C, 0x2924, 0x1881, 0x1861, 0x1061, 
  0x20E3, 0x2124, 0x2945, 0x2104, 0x20E4, 0x18C3, 0x18C3, 0x18E4, 
  0x2105, 0x2123, 0x2943, 0x2965, 0x39E7, 0x4207, 0x41C7, 0x18C3, 
  0x18A3, 0x18C3, 0x1882, 0x1041, 0x20A3, 0x20E4, 0x2104, 0x2103, 
  0x2923, 0x2103, 0x20E2, 0x18E2, 0x2102, 0x18E2, 0x18E2, 0x18E2, 
  0x2102, 0x2102, 0x2122, 0x2122, 0x2123, 0x2122, 0x2123, 0x1923, 
  0x2983, 0x2162, 0x2162, 0x1962, 0x2143, 0x1942, 0x1102, 0x10C2, 
  0x4208, 0x524A, 0x5A8A, 0x62EC, 0x4A49, 0x3185, 0x2123, 0x2924, 
  0x18E2, 0x18E3, 0x18C2, 0x18E3, 0x18E2, 0x1903, 0x18E3, 0x18C3, 
  0x2986, 0x632D, 0x738F, 0x6B8F, 0x634E, 0x634E, 0x5B0E, 0x5B0E, 
  0x530D, 0x5B0D, 0x52ED, 0x5B0E, 0x52ED, 0x5B0D, 0x52ED, 0x530E, 
  0x52ED, 0x5B0D, 0x52ED, 0x530D, 0x52ED, 0x530D, 0x52ED, 0x530D, 
  0x530D, 0x530D, 0x530D, 0x530E, 0x5B0D, 0x632D, 0x5B2D, 0x6B2D, 
  0x632D, 0x6B2D, 0x6B2D, 0x732D, 0x7B0C, 0x92EC, 0xA2AA, 0xA2AA, 
  0x8248, 0xAA69, 0xB2A9, 0xAAEB, 0x930C, 0x8B2D, 0x834D, 0x836E, 
  0x7B4D, 0x7B6E, 0x7B6D, 0x8B6E, 0x8B2C, 0x9B2C, 0xA30B, 0xA34C, 
  0x8B6C, 0x838D, 0x7B6D, 0x7B4D, 0x5268, 0x2904, 0x18A2, 0x18A2, 
  0x18C2, 0x2124, 0x2124, 0x2124, 0x2103, 0x2124, 0x18E3, 0x2104, 
  0x18E3, 0x1082, 0x1082, 0x18C3, 0x18E4, 0x20C3, 0x18A3, 0x1062, 
  0x0840, 0x1082, 0x1081, 0x18A2, 0x1041, 0x1041, 0x1082, 0x18A2, 
  0x18A2, 0x2103, 0x20E2, 0x2923, 0x2122, 0x2943, 0x2163, 0x2163, 
  0x2142, 0x2942, 0x2942, 0x3183, 0x2961, 0x2982, 0x2982, 0x29A2, 
  0x2982, 0x29A2, 0x2182, 0x21A2, 0x1962, 0x1962, 0x1142, 0x1922, 
  0x4A09, 0x41E8, 0x5A8B, 0x6B0C, 0x734D, 0x6B2C, 0x730C, 0x62CB, 
  0x5249, 0x1903, 0x18C3, 0x18C2, 0x20E3, 0x1903, 0x18E3, 0x2124, 
  0x52CC, 0x638F, 0x6390, 0x5B4F, 0x5B4F, 0x5B2E, 0x5B2E, 0x5B0D, 
  0x5B0E, 0x52ED, 0x530E, 0x52ED, 0x530E, 0x52ED, 0x530E, 0x530E, 
  0x530E, 0x52ED, 0x530D, 0x52ED, 0x52ED, 0x4AED, 0x530D, 0x52ED, 
  0x530D, 0x4AED, 0x530D, 0x530D, 0x5B0D, 0x5B0D, 0x632D, 0x630D, 
  0x632D, 0x630D, 0x732D, 0x730D, 0x7B0D, 0x8ACB, 0x9ACB, 0x9AAB, 
  0xA2AB, 0xAA8A, 0xB2AA, 0xA2CA, 0x9B0C, 0x8B0C, 0x834E, 0x7B2D, 
  0x834D, 0x834D, 0x836E, 0x7B4D, 0x8B4D, 0x8B2C, 0xA30C, 0xAAEB, 
  0xB30B, 0x9B2C, 0x8B6D, 0x7B4C, 0x734D, 0x62CA, 0x5AAA, 0x4A27, 
  0x2103, 0x2103, 0x2924, 0x2103, 0x2924, 0x2103, 0x20E4, 0x18C3, 
  0x18E3, 0x10A2, 0x1882, 0x1061, 0x1041, 0x0841, 0x1062, 0x1081, 
  0x18A2, 0x18A2, 0x20E3, 0x2924, 0x2904, 0x2924, 0x3144, 0x20C2, 
  0x20E3, 0x18A2, 0x20E3, 0x2103, 0x2104, 0x2124, 0x2164, 0x2163, 
  0x2163, 0x2162, 0x2963, 0x2983, 0x31C3, 0x31E2, 0x31E2, 0x31E2, 
  0x39E2, 0x29A2, 0x29C3, 0x21C3, 0x29C2, 0x21A2, 0x2182, 0x2161, 
  0x4A49, 0x5ACC, 0x62EC, 0x734D, 0x734D, 0x732D, 0x732C, 0x62CB, 
  0x6AEB, 0x4208, 0x2944, 0x2103, 0x18E2, 0x18E3, 0x2924, 0x528B, 
  0x634E, 0x636F, 0x5B4E, 0x5B4F, 0x532E, 0x532E, 0x530D, 0x5B0D, 
  0x52ED, 0x52ED, 0x4AED, 0x52ED, 0x4AED, 0x530E, 0x4AED, 0x530E, 
  0x52ED, 0x530E, 0x4AED, 0x4AED, 0x4ACD, 0x4AED, 0x4ACC, 0x52ED, 
  0x4AEC, 0x52ED, 0x4AEC, 0x52ED, 0x52EC, 0x5B0D, 0x52EC, 0x630D, 
  0x5AEC, 0x630D, 0x62EC, 0x6B0D, 0x72EC, 0x8ACC, 0x8AAB, 0x92AB, 
  0x928A, 0x9AAB, 0x9AAA, 0x9ACB, 0x92CB, 0x8B0C, 0x730C, 0x7B2D, 
  0x7B2D, 0x832D, 0x830C, 0x832D, 0x832D, 0x8B2D, 0x8B0C, 0xA2EB, 
  0xB2A9, 0xBAC9, 0xA2CA, 0x930B, 0x830B, 0x7B0C, 0x730B, 0x734C, 
  0x41C6, 0x28E3, 0x20E2, 0x2903, 0x2903, 0x2904, 0x2103, 0x2903, 
  0x20E3, 0x2924, 0x2903, 0x28E3, 0x1882, 0x1882, 0x18A2, 0x18A2, 
  0x20E3, 0x3124, 0x28E3, 0x2903, 0x2903, 0x5AAA, 0x630C, 0x3945, 
  0x20A3, 0x20C3, 0x20E3, 0x2104, 0x2104, 0x2944, 0x2143, 0x2963, 
  0x2963, 0x2983, 0x2982, 0x31C3, 0x31C2, 0x39E2, 0x39E1, 0x39E2, 
  0x31C1, 0x31C2, 0x21A1, 0x31C2, 0x29A1, 0x29A2, 0x2181, 0x2982, 
  0x5AEC, 0x6B4E, 0x6B4E, 0x6B0D, 0x734E, 0x5A8A, 0x5249, 0x5249, 
  0x62AB, 0x62AB, 0x5A8B, 0x39E7, 0x18E3, 0x18C3, 0x524A, 0x736E, 
  0x6B6F, 0x5B4F, 0x5B4F, 0x534E, 0x5B4F, 0x532E, 0x530E, 0x52ED, 
  0x5AED, 0x52ED, 0x52ED, 0x4AED, 0x530E, 0x4AEE, 0x530E, 0x4B0E, 
  0x530E, 0x530E, 0x530E, 0x4AED, 0x4AED, 0x4ACD, 0x4AED, 0x4ACC, 
  0x52ED, 0x4ACD, 0x4AED, 0x4ACC, 0x52ED, 0x52EC, 0x5AED, 0x5AEC, 
  0x62ED, 0x62EC, 0x6AEC, 0x62EC, 0x72EC, 0x82AB, 0x8AAB, 0x8A8A, 
  0x928B, 0x928B, 0x92AB, 0x8ACB, 0x8AEC, 0x7AEC, 0x730D, 0x6B0D, 
  0x730D, 0x730D, 0x830D, 0x7B0C, 0x830D, 0x830C, 0x930C, 0x92EC, 
  0xA2CB, 0xB289, 0xBAA9, 0xA2AA, 0xA2CB, 0x92CA, 0x8AEB, 0x82EB, 
  0x7B0C, 0x5A69, 0x41A6, 0x20E3, 0x28E3, 0x20E3, 0x2924, 0x2103, 
  0x2903, 0x20E3, 0x28E3, 0x2945, 0x39C8, 0x2924, 0x20C3, 0x3964, 
  0x6AAA, 0x5229, 0x28E4, 0x20E4, 0x20A3, 0x28C4, 0x3945, 0x3965, 
  0x3945, 0x3125, 0x41A7, 0x3146, 0x3124, 0x2923, 0x3143, 0x2962, 
  0x3183, 0x3163, 0x39A2, 0x39A2, 0x39A3, 0x39A2, 0x39C2, 0x39E1, 
  0x41E2, 0x39C1, 0x31C2, 0x31C1, 0x39C2, 0x31A1, 0x39A2, 0x3181, 
  0x39E8, 0x4A4A, 0x4A29, 0x526A, 0x6B0C, 0x5AAB, 0x4A09, 0x5229, 
  0x41E8, 0x49E8, 0x4A08, 0x3986, 0x18C2, 0x3986, 0x6B2D, 0x7B6F, 
  0x6B4E, 0x636F, 0x5B4F, 0x5B4F, 0x532E, 0x532F, 0x532E, 0x5B2E, 
  0x52ED, 0x52ED, 0x4AED, 0x4AEE, 0x4AED, 0x532E, 0x4B2E, 0x534F, 
  0x4B0E, 0x4AED, 0x4AED, 0x4AED, 0x42CC, 0x4ACD, 0x42CC, 0x4ACD, 
  0x42AC, 0x42CC, 0x42AC, 0x4ACC, 0x4AAC, 0x52CC, 0x52CC, 0x52CC, 
  0x5ACC, 0x62CC, 0x62CC, 0x6ACC, 0x6AAB, 0x7AAC, 0x828B, 0x8A8B, 
  0x8A6A, 0x8A8B, 0x828B, 0x82CC, 0x7ACB, 0x7ACC, 0x6AEC, 0x6AED, 
  0x62EC, 0x6B0D, 0x6AEC, 0x72ED, 0x6AEC, 0x7AEC, 0x82CC, 0x8ACC, 
  0x8AAB, 0x9AAB, 0x9A8A, 0x9AAB, 0x9A8A, 0xA28A, 0x9A8A, 0xA2AA, 
  0x92AA, 0x8ACB, 0x82EB, 0x6208, 0x20A2, 0x20C2, 0x20C3, 0x28C3, 
  0x20C2, 0x20C2, 0x2102, 0x3166, 0x2986, 0x2945, 0x3165, 0x6ACB, 
  0x82CB, 0x82CB, 0x6249, 0x5A6A, 0x41C8, 0x20E4, 0x1082, 0x1883, 
  0x20A2, 0x3104, 0x3104, 0x3104, 0x30E2, 0x3923, 0x3122, 0x4163, 
  0x3982, 0x3963, 0x3143, 0x3964, 0x3164, 0x3984, 0x3163, 0x3983, 
  0x3982, 0x39E4, 0x31E2, 0x3A23, 0x3A02, 0x3A23, 0x4243, 0x3A23, 
  0x31C9, 0x4229, 0x526B, 0x5A6A, 0x6B2D, 0x528B, 0x4A2A, 0x3987, 
  0x3166, 0x2925, 0x2925, 0x2925, 0x39A7, 0x62EC, 0x7B8F, 0x7B6E, 
  0x734E, 0x52ED, 0x52ED, 0x5B2E, 0x5B2F, 0x4AED, 0x52ED, 0x4ACC, 
  0x3A07, 0x31E6, 0x4228, 0x426A, 0x426A, 0x428C, 0x428C, 0x428B, 
  0x426B, 0x31C8, 0x3A2A, 0x4AED, 0x4AED, 0x42AC, 0x4ACD, 0x42AC, 
  0x4ACC, 0x42AC, 0x42CD, 0x42AC, 0x4ACC, 0x4AAC, 0x52CC, 0x52CC, 
  0x5ACC, 0x5AAB, 0x62CC, 0x62AB, 0x6AAC, 0x728B, 0x7A8B, 0x826A, 
  0x8A6A, 0x7A6B, 0x82AB, 0x72AB, 0x7ACC, 0x72CC, 0x6AED, 0x62CC, 
  0x62ED, 0x5AEC, 0x6AED, 0x6AEC, 0x6AED, 0x6AEC, 0x7AEC, 0x82CC, 
  0x8AAB, 0x8AAB, 0x8AAB, 0x82AB, 0x8ACB, 0x9A8A, 0xA28A, 0xA28A, 
  0xA28A, 0x9A8A, 0x92AB, 0x92CA, 0x69E7, 0x3103, 0x28C3, 0x18A2, 
  0x20A2, 0x18A2, 0x3144, 0x2123, 0x3144, 0x2904, 0x52CB, 0x632D, 
  0x72EC, 0x8ACB, 0xAB0C, 0x9B6D, 0x838E, 0x734D, 0x528A, 0x3187, 
  0x20E4, 0x18A3, 0x20C3, 0x20C3, 0x2903, 0x3123, 0x3963, 0x3962, 
  0x4183, 0x3163, 0x3165, 0x2964, 0x39A4, 0x41C3, 0x49E3, 0x4A24, 
  0x4A64, 0x3A44, 0x4264, 0x4263, 0x4263, 0x3A43, 0x3A04, 0x3A04, 
  0x3A2A, 0x4AAC, 0x4A8B, 0x4A2A, 0x5B0D, 0x4A29, 0x2945, 0x20E4, 
  0x18C3, 0x20C3, 0x20E3, 0x3965, 0x62CC, 0x7B6F, 0x630D, 0x5AAB, 
  0x4249, 0x4249, 0x3A49, 0x428B, 0x3A6A, 0x324A, 0x2A4A, 0x326B, 
  0x29C5, 0x39E5, 0x31A3, 0x2943, 0x20E2, 0x39A8, 0x4A8B, 0x4AAC, 
  0x426A, 0x39E9, 0x29C8, 0x31E9, 0x3A8C, 0x42AC, 0x3A8C, 0x42AC, 
  0x428C, 0x42AC, 0x3A8B, 0x42AC, 0x428B, 0x4AAC, 0x42AB, 0x4AAC, 
  0x52AB, 0x5AAB, 0x5A8B, 0x62AB, 0x628B, 0x6A8B, 0x6A6A, 0x7A6A, 
  0x7A4A, 0x726B, 0x6A6A, 0x728B, 0x6A8B, 0x6AAC, 0x62AB, 0x62CC, 
  0x5ACC, 0x62CC, 0x62CC, 0x62CC, 0x62CC, 0x6ACC, 0x62CC, 0x72CC, 
  0x7AAB, 0x8AAB, 0x828A, 0x82AB, 0x7AAB, 0x8AAB, 0x9A69, 0xAA69, 
  0xAA69, 0xAA69, 0x9A69, 0x9289, 0x8A69, 0x9268, 0x8226, 0x59A5, 
  0x28E3, 0x20C3, 0x1061, 0x18A2, 0x18A3, 0x20C3, 0x4A49, 0x630C, 
  0x62EC, 0x72EC, 0x92CB, 0xB2EB, 0xB36C, 0xA3F0, 0x7B6D, 0x7B8F, 
  0x6B4E, 0x4A6A, 0x20E4, 0x20C3, 0x2903, 0x3943, 0x3962, 0x39A2, 
  0x3162, 0x4182, 0x3982, 0x3983, 0x3182, 0x39E2, 0x41E2, 0x5263, 
  0x4A63, 0x4263, 0x3A02, 0x31C3, 0x3203, 0x4225, 0x31C3, 0x2984, 
  0x20E4, 0x2904, 0x2966, 0x2104, 0x3145, 0x2903, 0x3144, 0x3164, 
  0x3164, 0x2923, 0x3986, 0x6249, 0x6A8B, 0x4229, 0x3A08, 0x4229, 
  0x4AAB, 0x424A, 0x426A, 0x428B, 0x3A8B, 0x3A6B, 0x3AED, 0x3B0E, 
  0x42CD, 0x31A7, 0x2987, 0x18E2, 0x18E4, 0x31C8, 0x6370, 0x5B4E, 
  0x4A8C, 0x3A09, 0x39E9, 0x3A6B, 0x42AD, 0x3A8C, 0x428C, 0x3A8B, 
  0x428C, 0x3A8C, 0x428C, 0x428B, 0x4A8C, 0x428B, 0x4AAC, 0x428B, 
  0x52AC, 0x528B, 0x5A8B, 0x5A6B, 0x628B, 0x626B, 0x6A6B, 0x724A, 
  0x7A4B, 0x6A6A, 0x6A6B, 0x6A8B, 0x6AAC, 0x628B, 0x62AC, 0x62AB, 
  0x62AC, 0x62AB, 0x62AC, 0x62AB, 0x6ACC, 0x62AC, 0x6ACC, 0x6AAB, 
  0x72AC, 0x72AB, 0x8A8B, 0x828A, 0x82AB, 0x7AAB, 0x8AAB, 0xA249, 
  0xB249, 0xAA48, 0xBA48, 0xB227, 0xAA48, 0x9A49, 0xA289, 0xAA88, 
  0xA289, 0x8248, 0x28C3, 0x0821, 0x1882, 0x41C7, 0x6AAB, 0x6ACC, 
  0x6ACC, 0x6ACC, 0x7AED, 0x8AEC, 0x8AAB, 0x49A7, 0x3946, 0x41A7, 
  0x528B, 0x5ACC, 0x3145, 0x20C2, 0x30E3, 0x28E2, 0x3123, 0x2942, 
  0x3143, 0x3142, 0x3982, 0x3182, 0x39A3, 0x31C3, 0x39E3, 0x39C3, 
  0x31C3, 0x3A03, 0x4223, 0x29C2, 0x31E4, 0x2984, 0x2123, 0x1923, 
  0x20C3, 0x20C3, 0x20E3, 0x2904, 0x18C2, 0x2904, 0x2923, 0x2923, 
  0x2102, 0x20E2, 0x18A2, 0x2925, 0x4208, 0x4A8A, 0x4AAA, 0x4A8A, 
  0x3208, 0x3A29, 0x428B, 0x4ACC, 0x42CB, 0x42CC, 0x328B, 0x3AED, 
  0x3B2E, 0x29C7, 0x0862, 0x1083, 0x2146, 0x3A09, 0x3A09, 0x4A8B, 
  0x3A2A, 0x3209, 0x42AC, 0x4B0E, 0x42AC, 0x428C, 0x3A8B, 0x428C, 
  0x3A6B, 0x3A6C, 0x3A6B, 0x428B, 0x426B, 0x428B, 0x428B, 0x428B, 
  0x426B, 0x4A8B, 0x526A, 0x5A6B, 0x526A, 0x626B, 0x624A, 0x6A4A, 
  0x6A2A, 0x6A4A, 0x624A, 0x626B, 0x626B, 0x628B, 0x5A6B, 0x5A8B, 
  0x5A8B, 0x628B, 0x5A8B, 0x62AB, 0x5A8B, 0x62AC, 0x62AB, 0x62AC, 
  0x62AB, 0x6A8B, 0x728B, 0x828B, 0x826A, 0x72AB, 0x728B, 0x8A6A, 
  0x9A49, 0xAA28, 0xB207, 0xC207, 0xCA06, 0xBA27, 0xA248, 0xB248, 
  0xB247, 0xB268, 0x89E6, 0x6186, 0x59E8, 0x72AB, 0x72AB, 0x72AB, 
  0x6AAB, 0x72CC, 0x72CC, 0x82CC, 0x5A2A, 0x49E8, 0x39A7, 0x2125, 
  0x2166, 0x20E4, 0x18A2, 0x20C3, 0x20C2, 0x28E3, 0x2903, 0x2924, 
  0x2123, 0x2923, 0x2122, 0x2943, 0x2142, 0x2943, 0x2143, 0x2963, 
  0x29A3, 0x3203, 0x31E2, 0x31E3, 0x31C3, 0x31C4, 0x2183, 0x2183, 
  0x2925, 0x2125, 0x2945, 0x2104, 0x10C4, 0x1061, 0x18A2, 0x18C2, 
  0x20E3, 0x2945, 0x4208, 0x4269, 0x52AB, 0x52CB, 0x52CC, 0x4A8A, 
  0x4AAC, 0x4AEC, 0x52ED, 0x42CC, 0x42AC, 0x326B, 0x2A4A, 0x2A0A, 
  0x324B, 0x3229, 0x1083, 0x1083, 0x0841, 0x0821, 0x1021, 0x18C4, 
  0x31C9, 0x42AD, 0x4AEE, 0x42AC, 0x3A09, 0x2987, 0x422A, 0x3A6B, 
  0x3A6C, 0x3A4B, 0x426C, 0x426B, 0x428B, 0x426B, 0x428B, 0x426B, 
  0x4A8B, 0x426B, 0x526B, 0x526A, 0x5A6B, 0x524A, 0x626B, 0x624A, 
  0x624A, 0x622A, 0x626B, 0x5A6B, 0x626B, 0x5A6B, 0x628B, 0x5A8B, 
  0x5A8B, 0x5A6B, 0x628B, 0x626B, 0x628B, 0x5A8B, 0x62AC, 0x5AAB, 
  0x62AC, 0x6A8B, 0x728B, 0x726B, 0x826A, 0x7A6A, 0x728B, 0x7A6B, 
  0x924A, 0xA228, 0xB228, 0xBA07, 0xC207, 0xB227, 0xBA28, 0xBA27, 
  0xC227, 0xBA27, 0xBA48, 0xBA28, 0xAA69, 0x8A6A, 0x82AB, 0x7A8B, 
  0x7AAC, 0x72AC, 0x7ACD, 0x82CC, 0x624A, 0x5A4A, 0x62AC, 0x4A4A, 
  0x31C8, 0x2145, 0x18C4, 0x1882, 0x28C3, 0x2903, 0x3944, 0x3984, 
  0x3984, 0x3162, 0x3163, 0x3162, 0x31A4, 0x31A3, 0x31A3, 0x2963, 
  0x2963, 0x31E2, 0x3A23, 0x3A43, 0x3A23, 0x3202, 0x31E3, 0x29A2, 
  0x3182, 0x39A4, 0x2123, 0x2124, 0x1904, 0x18A3, 0x1082, 0x20E4, 
  0x3A08, 0x5AEC, 0x52CA, 0x526A, 0x4A6A, 0x4A4A, 0x4AAB, 0x52CC, 
  0x530D, 0x530D, 0x428B, 0x4AAB, 0x3A8A, 0x326B, 0x2A08, 0x21C8, 
  0x29E8, 0x3A4A, 0x2145, 0x10C4, 0x1105, 0x10C4, 0x1082, 0x2126, 
  0x322A, 0x42AD, 0x31C8, 0x2946, 0x29E8, 0x2A09, 0x2987, 0x31C9, 
  0x322A, 0x3A4B, 0x324A, 0x3A6B, 0x3A6A, 0x426B, 0x426A, 0x426B, 
  0x424A, 0x4A6B, 0x424A, 0x4A6B, 0x4A4A, 0x524A, 0x522A, 0x5A4A, 
  0x5A29, 0x622A, 0x524A, 0x5A6A, 0x5A4A, 0x5A6B, 0x524A, 0x526B, 
  0x526A, 0x5A6B, 0x5A6A, 0x626B, 0x5A6B, 0x5A6B, 0x5A6B, 0x5A8B, 
  0x5A8B, 0x6A8B, 0x6A6A, 0x726B, 0x724A, 0x824A, 0x724A, 0x6A6B, 
  0x724A, 0x924A, 0xA208, 0xB207, 0xB9E7, 0xAA28, 0xAA28, 0xB228, 
  0xC206, 0xC227, 0xB227, 0xB248, 0xA228, 0xA249, 0x8A6A, 0x7A6B, 
  0x6A4A, 0x72AC, 0x72CC, 0x82ED, 0x82EC, 0x7B0D, 0x7B2D, 0x62ED, 
  0x62EC, 0x528B, 0x2987, 0x18E4, 0x18A2, 0x28E3, 0x20E3, 0x2903, 
  0x2902, 0x3185, 0x3228, 0x536D, 0x7471, 0x7C30, 0x4205, 0x3182, 
  0x39C2, 0x4A62, 0x3A22, 0x31E3, 0x29A2, 0x29C3, 0x29C2, 0x2982, 
  0x39A5, 0x2943, 0x3163, 0x3144, 0x39A6, 0x3186, 0x424A, 0x428B, 
  0x5B0C, 0x632D, 0x630C, 0x5ACC, 0x632E, 0x632E, 0x6B6E, 0x636E, 
  0x636F, 0x5B2E, 0x4AED, 0x42CC, 0x4B0C, 0x42EC, 0x328B, 0x326B, 
  0x326B, 0x3209, 0x3209, 0x324B, 0x3AAD, 0x324B, 0x322B, 0x2A09, 
  0x3A4B, 0x31C8, 0x18E4, 0x31C8, 0x42CD, 0x2A6B, 0x3A2A, 0x3A4B, 
  0x3A4B, 0x324B, 0x3A4B, 0x3A4A, 0x426B, 0x426A, 0x426B, 0x424A, 
  0x4A6B, 0x424A, 0x4A4B, 0x4A4A, 0x524B, 0x522A, 0x524A, 0x5229, 
  0x5A2A, 0x5A2A, 0x524A, 0x524A, 0x5A6B, 0x5A4A, 0x5A6B, 0x526B, 
  0x5A6B, 0x526B, 0x626B, 0x5A6B, 0x5A6B, 0x5A6B, 0x5A6B, 0x5A6B, 
  0x626B, 0x6A6B, 0x6A6B, 0x6A4A, 0x726B, 0x7A4A, 0x824A, 0x6A4A, 
  0x6A6B, 0x724A, 0x8A4A, 0x9A08, 0xB208, 0xA208, 0x9A29, 0x9A29, 
  0xBA28, 0xAA28, 0xA249, 0x9A29, 0x9A49, 0x9249, 0x926B, 0x7A4A, 
  0x5A09, 0x4187, 0x49C8, 0x5A2A, 0x7ACC, 0x6AAC, 0x4A2A, 0x2946, 
  0x2105, 0x2105, 0x2946, 0x3A09, 0x3987, 0x1882, 0x28E3, 0x3123, 
  0x3143, 0x41C5, 0x6B6D, 0x8471, 0x83EF, 0x6B0A, 0x41E4, 0x3162, 
  0x39A2, 0x31A2, 0x31C2, 0x1942, 0x1923, 0x2164, 0x3185, 0x2163, 
  0x2102, 0x2103, 0x2904, 0x39A7, 0x4ACC, 0x6C33, 0x6412, 0x52EC, 
  0x636D, 0x6BAF, 0x632D, 0x62EC, 0x632D, 0x6B6E, 0x636E, 0x5B6F, 
  0x5B8F, 0x536F, 0x4B2E, 0x4B0D, 0x3ACC, 0x328B, 0x29E9, 0x3209, 
  0x2A29, 0x2A4A, 0x21A7, 0x29A8, 0x2A8C, 0x3AAD, 0x3A8D, 0x3AAD, 
  0x328C, 0x18E4, 0x2987, 0x42ED, 0x2A6B, 0x2A2A, 0x3A2A, 0x3A4B, 
  0x322A, 0x3A4B, 0x3A4A, 0x424B, 0x3A4A, 0x3A4A, 0x3A4A, 0x424A, 
  0x422A, 0x4A4A, 0x422A, 0x4A4A, 0x4A29, 0x522A, 0x4A09, 0x520A, 
  0x5209, 0x5209, 0x4A29, 0x522A, 0x524A, 0x524A, 0x4A4A, 0x526B, 
  0x4A4A, 0x526B, 0x524A, 0x5A6B, 0x524A, 0x5A6B, 0x524A, 0x5A6B, 
  0x5A4A, 0x6A4B, 0x624A, 0x6A4B, 0x624A, 0x624B, 0x6A2A, 0x724B, 
  0x624A, 0x624B, 0x6A2A, 0x7A2A, 0x91E8, 0xA208, 0x9A08, 0x9229, 
  0x9209, 0x9A29, 0x8A29, 0x924A, 0xA228, 0x9A49, 0x7A4A, 0x5A09, 
  0x39A7, 0x3187, 0x2967, 0x2967, 0x2966, 0x39A7, 0x2146, 0x18E5, 
  0x10A3, 0x1083, 0x10A3, 0x2925, 0x2945, 0x20C3, 0x2903, 0x3144, 
  0x2923, 0x3143, 0x3143, 0x3984, 0x2942, 0x2942, 0x2942, 0x3182, 
  0x2961, 0x2942, 0x2141, 0x2142, 0x1922, 0x29C2, 0x3A01, 0x3A22, 
  0x18C2, 0x20E3, 0x3187, 0x3A09, 0x6C54, 0x6CB5, 0x63B0, 0x6BAF, 
  0x73AF, 0x6B6D, 0x630D, 0x632D, 0x6BAF, 0x6BAF, 0x73D0, 0x6BF1, 
  0x63F1, 0x4B6F, 0x4B0D, 0x42AC, 0x326B, 0x2A4A, 0x3A6A, 0x324A, 
  0x322A, 0x3209, 0x2105, 0x29E9, 0x32AD, 0x328C, 0x3AAD, 0x3A8C, 
  0x3A8C, 0x29E9, 0x3A4B, 0x42AC, 0x29A7, 0x10E4, 0x3167, 0x3A2A, 
  0x424B, 0x3A2A, 0x424B, 0x424A, 0x3A4B, 0x3A2A, 0x424B, 0x422A, 
  0x424A, 0x422A, 0x4A4A, 0x4A2A, 0x4A2A, 0x4A09, 0x520A, 0x51E9, 
  0x5A09, 0x49E9, 0x520A, 0x4A09, 0x522A, 0x4A2A, 0x524B, 0x4A4A, 
  0x526B, 0x524A, 0x524B, 0x524A, 0x5A4B, 0x524A, 0x5A4B, 0x5A4A, 
  0x624B, 0x624A, 0x6A4B, 0x6A2A, 0x624B, 0x5A4A, 0x624B, 0x624A, 
  0x624B, 0x5A4A, 0x624B, 0x6A2A, 0x7A2A, 0x79E9, 0x8209, 0x8A08, 
  0x8A09, 0x7A09, 0x6A0A, 0x51C8, 0x7209, 0x7A2A, 0x7A6B, 0x728B, 
  0x7AAC, 0x6A8B, 0x41C8, 0x2126, 0x18E5, 0x1082, 0x10A3, 0x1083, 
  0x18A3, 0x10A3, 0x20E4, 0x20E4, 0x2905, 0x2904, 0x3125, 0x2904, 
  0x2903, 0x2903, 0x2904, 0x2103, 0x2123, 0x2943, 0x2963, 0x2142, 
  0x2962, 0x2962, 0x2962, 0x2962, 0x39E3, 0x4222, 0x4223, 0x39E2, 
  0x20E3, 0x3166, 0x2945, 0x4ACD, 0x6C95, 0x5BF1, 0x4B4E, 0x5B2D, 
  0x52EB, 0x52EC, 0x4AEC, 0x532D, 0x5B4D, 0x6BCF, 0x63CF, 0x63B0, 
  0x52EC, 0x4ACC, 0x432D, 0x432E, 0x2A4A, 0x29A8, 0x29E8, 0x2946, 
  0x18E4, 0x18A3, 0x18C3, 0x2987, 0x2A4B, 0x326C, 0x326C, 0x3A8C, 
  0x3A6C, 0x3A4B, 0x4A8C, 0x426B, 0x1904, 0x1905, 0x2126, 0x3A2A, 
  0x3A2A, 0x422A, 0x3A2A, 0x3A2A, 0x3A2A, 0x3A2A, 0x3A29, 0x3A2A, 
  0x3A0A, 0x422A, 0x4209, 0x4A0A, 0x41E9, 0x4A09, 0x49E9, 0x51E9, 
  0x49E9, 0x51E9, 0x49E9, 0x4A0A, 0x4A0A, 0x4A2A, 0x4A2A, 0x4A4A, 
  0x4A4A, 0x524A, 0x4A2A, 0x524A, 0x522A, 0x5A4A, 0x522A, 0x5A4A, 
  0x5A2A, 0x622A, 0x5A2A, 0x6A2A, 0x5A2A, 0x524A, 0x522A, 0x5A4A, 
  0x5A2A, 0x624B, 0x5A2A, 0x622A, 0x620A, 0x720A, 0x69E8, 0x7A09, 
  0x81E9, 0x8A29, 0x7229, 0x5209, 0x39A7, 0x3987, 0x41A7, 0x51E9, 
  0x5A29, 0x626B, 0x4A4A, 0x31A8, 0x18E4, 0x18A3, 0x10A3, 0x10A3, 
  0x10A3, 0x18C4, 0x18C4, 0x2105, 0x2924, 0x3145, 0x3124, 0x3124, 
  0x20E3, 0x20C3, 0x18C3, 0x2924, 0x2923, 0x3143, 0x2943, 0x2943, 
  0x2142, 0x2162, 0x2962, 0x3182, 0x39C1, 0x39E2, 0x31A2, 0x3123, 
  0x20E4, 0x2925, 0x3A0A, 0x6434, 0x53D2, 0x4B4E, 0x3A6B, 0x3A09, 
  0x3A6A, 0x42EC, 0x534E, 0x4B2D, 0x5B6F, 0x5B8F, 0x536F, 0x42CC, 
  0x428B, 0x42CC, 0x4ACD, 0x3ACC, 0x3209, 0x1905, 0x18E4, 0x10E4, 
  0x18C4, 0x2125, 0x3167, 0x2946, 0x3A2B, 0x324B, 0x3A6C, 0x3A6B, 
  0x31E9, 0x3187, 0x39E9, 0x31A8, 0x20E4, 0x18C4, 0x2105, 0x31E9, 
  0x422A, 0x3A2A, 0x422A, 0x3A2A, 0x3A2A, 0x320A, 0x3A2A, 0x3A09, 
  0x422A, 0x4209, 0x4A0A, 0x41E9, 0x49E9, 0x49E9, 0x51E9, 0x49C9, 
  0x51E9, 0x51C9, 0x51E9, 0x49E9, 0x4A0A, 0x420A, 0x4A2A, 0x4A2A, 
  0x4A4B, 0x4A2A, 0x4A4B, 0x4A2A, 0x524B, 0x522A, 0x524B, 0x522A, 
  0x5A2B, 0x5A0A, 0x622A, 0x620A, 0x622A, 0x522A, 0x5A2A, 0x5209, 
  0x5A0A, 0x51E9, 0x49C9, 0x41A8, 0x51E9, 0x51C8, 0x59C8, 0x69E9, 
  0x8209, 0x8A29, 0x7A4A, 0x5209, 0x49E9, 0x2146, 0x18E5, 0x18C4, 
  0x20E5, 0x2125, 0x39C8, 0x31C8, 0x2105, 0x1083, 0x18C3, 0x10A3, 
  0x18C4, 0x18C4, 0x18E4, 0x18E4, 0x2105, 0x2904, 0x2925, 0x2904, 
  0x2925, 0x20E4, 0x2104, 0x2124, 0x41C4, 0x5286, 0x632B, 0x52EA, 
  0x4A66, 0x31A2, 0x39A2, 0x31A2, 0x3182, 0x2162, 0x29A3, 0x2122, 
  0x20E4, 0x2946, 0x53B2, 0x53D3, 0x2A6B, 0x324A, 0x2A08, 0x31E8, 
  0x2A08, 0x3A6B, 0x42AC, 0x4B2E, 0x432D, 0x4B0D, 0x426B, 0x4A8B, 
  0x426A, 0x3A08, 0x31E8, 0x3209, 0x2125, 0x18C3, 0x2105, 0x31A8, 
  0x31E8, 0x424A, 0x2946, 0x20E4, 0x2146, 0x3A4B, 0x3A4B, 0x3A4B, 
  0x29C8, 0x29A8, 0x2146, 0x2105, 0x10C3, 0x1062, 0x2126, 0x2988, 
  0x2987, 0x31A8, 0x31C8, 0x3A0A, 0x31E9, 0x320A, 0x31E9, 0x3A0A, 
  0x31E9, 0x3A09, 0x39E9, 0x41E9, 0x41C8, 0x49C9, 0x49C8, 0x51C9, 
  0x49C8, 0x49C9, 0x51C8, 0x51E9, 0x41E9, 0x4A0A, 0x420A, 0x422A, 
  0x422A, 0x422A, 0x422A, 0x4A2A, 0x4A2A, 0x4A2A, 0x4A0A, 0x522A, 
  0x5209, 0x5A0A, 0x5A09, 0x5A0A, 0x51E9, 0x5209, 0x3987, 0x2926, 
  0x20E4, 0x2905, 0x18E4, 0x2105, 0x3166, 0x2926, 0x2105, 0x3987, 
  0x3126, 0x51A8, 0x41A8, 0x3167, 0x2946, 0x18C4, 0x1083, 0x1082, 
  0x1082, 0x1083, 0x1082, 0x18C4, 0x10C3, 0x18C4, 0x10A3, 0x18C4, 
  0x18C3, 0x2104, 0x2104, 0x2104, 0x20E4, 0x2104, 0x2924, 0x2924, 
  0x2943, 0x2944, 0x2943, 0x41A4, 0x41E3, 0x4268, 0x5B4D, 0x530D, 
  0x3A25, 0x31A2, 0x3182, 0x31A3, 0x2162, 0x2163, 0x2162, 0x2983, 
  0x2946, 0x3ACE, 0x53F4, 0x328B, 0x29E8, 0x29C7, 0x31C8, 0x29C7, 
  0x31E8, 0x3A4A, 0x430D, 0x42CC, 0x42CC, 0x3A29, 0x4229, 0x31E8, 
  0x31E8, 0x39E8, 0x39C8, 0x2945, 0x3187, 0x39C8, 0x422A, 0x4A6B, 
  0x52AC, 0x39E8, 0x18A3, 0x1905, 0x29C9, 0x322B, 0x3A4B, 0x322B, 
  0x324B, 0x2A2B, 0x2A2B, 0x220A, 0x21EA, 0x19A8, 0x29EA, 0x31EA, 
  0x31C9, 0x2988, 0x31EA, 0x29EA, 0x31EA, 0x29E9, 0x320A, 0x31E9, 
  0x31E9, 0x31E9, 0x41E9, 0x41C9, 0x41E9, 0x41C8, 0x51C9, 0x49A8, 
  0x49C9, 0x49C8, 0x51E9, 0x49C9, 0x49E9, 0x41C9, 0x39A8, 0x3167, 
  0x2967, 0x3187, 0x2947, 0x41E9, 0x4A4A, 0x422A, 0x4A2A, 0x4A0A, 

 

 

};
















 







 
 
 uint8_t data[1000];
 unsigned char x_loca,y_loca;
 
 
int main(void)
{
	
	
	
	nrf_gpio_cfg_output(4);
  nrf_gpio_cfg_output(5);
	nrf_gpio_cfg_output(6 );

	
	Winbond_SPI_Initial();
	
	
		
	simple_uart_config(19, 17, 18, 16, 0);
	nrf_delay_ms(200);

	

	
	

	ST7735_SPI_Initial();
	
	ST7735_Initial();

	SetAddrWindow(0, 0, 129, 132);
	
	fill_display(0,0,129,130,0xFFFF);





		Winbond_Release_Powerdown();
		
		






















 
		
		
	
	while(1)
	{	
		
		

		
nrf_gpio_pin_clear(3);
	SPI_Write_Read(0x03);
	SPI_Write_Read(0x0f);
	SPI_Write_Read(0x00);
	SPI_Write_Read(0);	
	
	SetAddrWindow(2, 2, 129, 130);
	


















 
for(int i=0;i<32000;i++)
{
	
	
	ST7735_Write_Data(SPI_Write_Read(0));
	
}
nrf_gpio_pin_set(3);






nrf_gpio_pin_clear(3);
	SPI_Write_Read(0x03);
	SPI_Write_Read(0x00);
	SPI_Write_Read(0x00);
	SPI_Write_Read(0);	
	
	SetAddrWindow(2, 2, 129, 130);


		for(int i=0;i<32000;i++)
{
	
	
	ST7735_Write_Data(SPI_Write_Read(0));
	
	
	
}

nrf_gpio_pin_set(3);



		
		




		
		
	}
	
	
	
	
	
		
}
 
